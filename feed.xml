<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="https://sarthakmakhija.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://sarthakmakhija.github.io/" rel="alternate" type="text/html" /><updated>2020-03-31T19:14:53+05:30</updated><id>https://sarthakmakhija.github.io/feed.xml</id><title type="html">tech-lessons.in</title><subtitle>Sarthak's blog</subtitle><entry><title type="html">Concluding Serverless Journey</title><link href="https://sarthakmakhija.github.io/concluding-serverless-journey/" rel="alternate" type="text/html" title="Concluding Serverless Journey" /><published>2020-03-18T00:00:00+05:30</published><updated>2020-03-18T00:00:00+05:30</updated><id>https://sarthakmakhija.github.io/concluding-serverless-journey</id><content type="html" xml:base="https://sarthakmakhija.github.io/concluding-serverless-journey/">&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;We have come a long way in our &lt;a href=&quot;/beginning-serverless-journey&quot;&gt;Serverless journey&lt;/a&gt;.
    This journey which started with building a serverless application has finally come to a stage where we can see all
    our hard work in action. Yes, we will be deploying our application.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;We will be using &lt;a href=&quot;https://docs.aws.amazon.com/cdk/latest/guide/home.html&quot;&gt;AWS CDK&lt;/a&gt; to deploy our
    application. Before we start using CDK, let's quickly look at what is CDK -&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:group --&gt;&lt;/p&gt;
&lt;div class=&quot;wp-block-group&quot;&gt;
    &lt;div class=&quot;wp-block-group__inner-container&quot;&gt;&lt;!-- wp:quote {&quot;align&quot;:&quot;left&quot;} --&gt;&lt;/p&gt;
        &lt;blockquote class=&quot;wp-block-quote has-text-align-left&quot;&gt;&lt;p&gt;The AWS Cloud Development Kit (AWS CDK) is an open
            source software development framework to model and &lt;strong&gt;provision your cloud application resources using
                familiar programming languages.&lt;/strong&gt;&lt;/p&gt;
            &lt;p&gt;Provisioning cloud applications can be a challenging process that requires you to perform manual actions,
                write custom scripts, maintain templates, or learn domain-specific languages. &lt;/p&gt;
            &lt;p&gt;AWS CDK uses the familiarity and &lt;strong&gt;expressive power of programming languages for modeling your
                applications&lt;/strong&gt;. It provides you with high-level components that preconfigure cloud resources with
                proven defaults, so you can build cloud applications without needing to be an expert. &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;AWS CDK provisions your resources in a safe, repeatable manner through AWS
                CloudFormation&lt;/strong&gt;. It also enables you to &lt;strong&gt;compose and share your own custom
                components&lt;/strong&gt; that incorporate your organization's requirements, helping you start new projects
                faster. &lt;br/&gt;&lt;a href=&quot;https://aws.amazon.com/cdk/&quot;&gt;https://aws.amazon.com/cdk/&lt;/a&gt;&lt;/p&gt;
        &lt;/blockquote&gt;
        &lt;p&gt;&lt;!-- /wp:quote --&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:group --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;In summary, we don't have to directly deal with CloudFormation or SAM for deploying our application. We will
    provision our cloud resources using a higher level framework called CDK which will ultimately translate into a
    CloudFormation template. &lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;We should be able to see the advantages of using CDK very soon but let's look at this conversation to get some
    understanding of CDK.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;
&lt;figure class=&quot;wp-block-embed-youtube wp-block-embed is-type-video is-provider-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio&quot;&gt;
    &lt;div class=&quot;wp-block-embed__wrapper&quot;&gt;
        &lt;iframe width=&quot;800&quot; height=&quot;400&quot; src=&quot;https://www.youtube.com/embed/W8sibGJnHEM&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
    &lt;/div&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;!-- /wp:core-embed/youtube --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Let's begin now.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:heading {&quot;level&quot;:4} --&gt;&lt;/p&gt;
&lt;h4&gt;Step 1: Setting up the project&lt;/h4&gt;
&lt;p&gt;&lt;!-- /wp:heading --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;We will be using the same project which was pushed &lt;a
        href=&quot;https://github.com/aws-articles/serverless-order-service&quot;&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:list --&gt;&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;Install CDK globally by executing &lt;code&gt;npm install aws-cdk -g&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;Create a directory named &lt;code&gt;infra&lt;/code&gt; inside our project serverless-order-service&lt;/li&gt;
    &lt;li&gt;Execute &lt;code&gt;cdk init app --language=typescript&lt;/code&gt; inside &lt;code&gt;infra&lt;/code&gt; directory&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;!-- /wp:list --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;This should generate a project which uses &lt;code&gt;typescript&lt;/code&gt; as the programming language and &lt;code&gt;jest&lt;/code&gt;
    as a testing framework. Let's update the generated &lt;code&gt;jest.config.js&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Below is how our jest.config.js will look like -&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;module.exports = {
    &quot;testMatch&quot;: [
        &quot;**/__tests__/**/*.+(ts|tsx|js)&quot;,
        &quot;**/?(*.)+(spec|test).+(ts|tsx|js)&quot;
    ],
    &quot;transform&quot;: {
        &quot;^.+\\.(ts|tsx)$&quot;: &quot;ts-jest&quot;
    },
};&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;
    &lt;!-- wp:image {&quot;align&quot;:&quot;left&quot;,&quot;id&quot;:878,&quot;width&quot;:277,&quot;height&quot;:381,&quot;sizeSlug&quot;:&quot;large&quot;,&quot;className&quot;:&quot;is-style-default&quot;} --&gt;&lt;/p&gt;
&lt;div class=&quot;wp-block-image is-style-default&quot;&gt;
    &lt;img style=&quot;padding-left: 0&quot; src=&quot;/assets/img/pexels/project-setup-cdk.png&quot;
         width=&quot;500&quot; height=&quot;500&quot; class=&quot;wp-image-878&quot;/&gt;
&lt;/div&gt;
&lt;p&gt;If all has gone well so far this how our project structure will look like -&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;em&gt;infra-stack.ts&lt;/em&gt; defines a class called &lt;em&gt;InfraStack&lt;/em&gt; which is going to be a logical collection of
        various constructs like lambda function(s), dynamodb etc
    &lt;/li&gt;
    &lt;li&gt;&lt;em&gt;infra.ts&lt;/em&gt; is the entry point of the application which creates an instance of InfraStack&lt;/li&gt;
    &lt;li&gt;&lt;em&gt;infra.test.ts&lt;/em&gt; contains a simple test to assert an empty stack&lt;/li&gt;
    &lt;li&gt;&lt;em&gt;package.json&lt;/em&gt; contains the project definition along with various dependencies including &lt;em&gt;@aws-cdk/assert&lt;/em&gt;
        which is a library for asserting various cloud resources
    &lt;/li&gt;
    &lt;li&gt;&lt;em&gt;jest.config.js &lt;/em&gt;contains the necessary configuration to run jest tests&lt;/li&gt;
    &lt;li&gt;&lt;em&gt;cdk.json &lt;/em&gt;contains the command to run cdk application&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;!-- /wp:list --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Let's make a few quick changes to the file names to match our convention, run the test and commit the changes -&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:list --&gt;&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;Rename infra.ts to OrderServiceInfra.ts&lt;/li&gt;
    &lt;li&gt;Rename infra-stack.ts to OrderServiceInfraStack.ts&lt;/li&gt;
    &lt;li&gt;Rename infra.test.ts to OrderServiceInfraStack.spec.ts&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;!-- /wp:list --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:heading {&quot;level&quot;:4} --&gt;&lt;/p&gt;
&lt;h4&gt;Step 2: Creating stack with lambda function&lt;/h4&gt;
&lt;p&gt;&lt;!-- /wp:heading --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Let's provision our lambda function. In order to do so we need to add a dependency &lt;code&gt;@aws-cdk/aws-lambda&lt;/code&gt;.
    So, let's add it by executing &lt;code&gt;npm install @aws-cdk/aws-lambda@1.19.0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;We will start by creating a lambda function construct inside OrderServiceInfraStack.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;import * as cdk from &quot;@aws-cdk/core&quot;;
import {Function} from &quot;@aws-cdk/aws-lambda&quot;;

export class OrderServiceInfraStack extends cdk.Stack {
    constructor(scope: cdk.Construct, id: string, props?: cdk.StackProps) {
        super(scope, id, props);

        new Function(this, &quot;order-service-function&quot;, null); &lt;code style=&quot;color: darkorange&quot;&gt;//compilation error&lt;/code&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Few quick observations - &lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:list --&gt;&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;We have imported Function class from @aws-cdk/aws-lambda&lt;/li&gt;
    &lt;li&gt;Constructor of Function class takes 3 parameters -
        &lt;ul&gt;
            &lt;li&gt;scope: Construct - which identifies the parent resource&lt;/li&gt;
            &lt;li&gt;id: string - unique identifier of the resource within the stack&lt;/li&gt;
            &lt;li&gt;props: FunctionProps - lambda function properties including name, runtime, handler etc&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Typescript compiler gives an error because null is not acceptable in place of FunctionProps&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;!-- /wp:list --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Let's pass the required function properties - &lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;import {Code, Function, FunctionProps, Runtime} from &quot;@aws-cdk/aws-lambda&quot;;
import {Construct, Stack, StackProps} from &quot;@aws-cdk/core&quot;;

export class OrderServiceInfraStack extends Stack {
    constructor(scope: Construct, id: string, props?: StackProps) {
        super(scope, id, props);

        &lt;code style=&quot;color: darkorange&quot;&gt;//create FunctionProps&lt;/code&gt;
        const functionProperties: FunctionProps = {
            code: Code.fromAsset(&quot;../dist&quot;),
            handler: &quot;handler.ordersHandler&quot;,
            runtime: Runtime.NODEJS_10_X,
            functionName: &quot;order-service-function&quot;,
            environment: {&quot;ExecutionEnvironment&quot;: &quot;dev&quot;}
        };
        new Function(this, &quot;order-service-function&quot;, functionProperties);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Here, &lt;em&gt;code, handler and runtime&lt;/em&gt; are the only mandatory properties. Passing them should make the compiler
    happy. &lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;With this change in OrderServiceInfraStack, our test will break because it asserts for empty resources inside the
    stack but now stack contains a lambda function. We will fix the test in a moment.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Quick observation - &lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:list --&gt;&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;We are passing &lt;code&gt;ExecutionEnvironment&lt;/code&gt; as lambda environment variable. This variable is used to
        determine if the lambda is running is running in test mode or production mode. This value can also be taken as
        deployment parameter, but for now we are passing it as dev
    &lt;/li&gt;
    &lt;li&gt;We have used &lt;code&gt;../dist &lt;/code&gt;inside code asset which contains our transpiled code&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;!-- /wp:list --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:heading {&quot;level&quot;:4} --&gt;&lt;/p&gt;
&lt;h4&gt;Step 3: Fixing the test&lt;/h4&gt;
&lt;p&gt;&lt;!-- /wp:heading --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;CDK allows us to write different forms of tests including snapshot tests and fine grained unit tests. We will be
    writing both the tests - snapshot test(s) for our entire stack and unit tests for resources like lambda function,
    dynamodb, api gateway etc.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;We will be starting with unit tests which will assert on resources and their properties.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;import {OrderServiceInfraStack} from &quot;../lib/OrderServiceInfraStack&quot;;
import {App} from &quot;@aws-cdk/core&quot;;
import {Runtime} from &quot;@aws-cdk/aws-lambda&quot;;
import &quot;@aws-cdk/assert/jest&quot;;

test(&quot;stack should contain a lambda function with node10 as the runtime&quot;, () =&gt; {
    const app = new App();
    const stack = new OrderServiceInfraStack(app, &quot;OrderServiceStack&quot;);

    expect(stack).toHaveResource(&quot;AWS::Lambda::Function&quot;, {
        Runtime: Runtime.NODEJS_10_X.toString()
    })
});&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Few quick observations - &lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:list --&gt;&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;We have imported &lt;code&gt;aws-cdk/assert/jest&lt;/code&gt; which provides us with &lt;code&gt;expect&lt;/code&gt; function that
        allows us to match resources in the stack
    &lt;/li&gt;
    &lt;li&gt;Our unit test asserts only on lambda's runtime property&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;!-- /wp:list --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;That's it. Our lambda function resource is created in the stack and we have been able to write a unit test. Let's
    commit the changes.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:heading {&quot;level&quot;:4} --&gt;&lt;/p&gt;
&lt;h4&gt;Step 4: Adding DynamoDB to stack&lt;/h4&gt;
&lt;p&gt;&lt;!-- /wp:heading --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Let's provision dynamodb. In order to do so we need to add a dependency &lt;code&gt;@aws-cdk/aws-dynamodb&lt;/code&gt;. So, let's
    add it by executing &lt;code&gt;npm install @aws-cdk/aws-dynamodb@1.19.0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;import {Code, Function, FunctionProps, Runtime} from &quot;@aws-cdk/aws-lambda&quot;;
import {Construct, Stack, StackProps} from &quot;@aws-cdk/core&quot;;
import {AttributeType, Table, TableProps} from &quot;@aws-cdk/aws-dynamodb&quot;;

export class OrderServiceInfraStack extends Stack {
    constructor(scope: Construct, id: string, props?: StackProps) {
        super(scope, id, props);

        &lt;code style=&quot;color: darkorange&quot;&gt;//create FunctionProps&lt;/code&gt;
        const functionProperties: FunctionProps = {
            code: Code.fromAsset(&quot;../dist&quot;),
            handler: &quot;handler.ordersHandler&quot;,
            runtime: Runtime.NODEJS_10_X,
            functionName: &quot;order-service-function&quot;,
            environment: {&quot;ExecutionEnvironment&quot;: &quot;dev&quot;}
        };
        new Function(this, &quot;order-service-function&quot;, functionProperties);

        &lt;code style=&quot;color: darkorange&quot;&gt;//create TableProps&lt;/code&gt;
        const tableProps: TableProps = {
            partitionKey: {
                name: &quot;orderId&quot;,
                type: AttributeType.STRING
            },
            tableName: &quot;orders&quot;
        };
        new Table(this, &quot;order-table&quot;, tableProps);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Few quick observations - &lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:list --&gt;&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;We have imported Table class from @aws-cdk/aws-dynamodb&lt;/li&gt;
    &lt;li&gt;Constructor of Table class takes 3 parameters -
        &lt;ul&gt;
            &lt;li&gt;scope: Construct - which identifies the parent resource&lt;/li&gt;
            &lt;li&gt;id: string - unique identifier of the resource within the stack&lt;/li&gt;
            &lt;li&gt;props: TableProps - table properties including name of the table, partitionKey etc&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;!-- /wp:list --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;That's it. Our dynamo table resource is created in the stack. Let's verify by writing a unit test.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;test(&quot;stack should contain a dynamodb table with table name&quot;, () =&gt; {
    const app = new App();
    const stack = new OrderServiceInfraStack(app, &quot;OrderServiceStack&quot;);

    expect(stack).toHaveResource(&quot;AWS::DynamoDB::Table&quot;, {
        &quot;TableName&quot;: &quot;orders&quot;
    })
});

test(&quot;stack should contain a dynamodb table with orderId as the Hash key&quot;, () =&gt; {
    const app = new App();
    const stack = new OrderServiceInfraStack(app, &quot;OrderServiceStack&quot;);

    expect(stack).toHaveResource(&quot;AWS::DynamoDB::Table&quot;, {
        &quot;KeySchema&quot;: [
            {
                &quot;AttributeName&quot;: &quot;orderId&quot;,
                &quot;KeyType&quot;: &quot;HASH&quot;
            }
        ]
    })
});&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:heading {&quot;level&quot;:4} --&gt;&lt;/p&gt;
&lt;h4&gt;Step 5: Refactoring the stack&lt;/h4&gt;
&lt;p&gt;&lt;!-- /wp:heading --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Let's look at a unit test and see if there are any challenges in understanding it. &lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;test(&quot;stack should contain a lambda function with node10 as runtime&quot;, () =&gt; {
    const app = new App();
    const stack = new OrderServiceInfraStack(app, &quot;OrderServiceStack&quot;);

    expect(stack).toHaveResource(&quot;AWS::Lambda::Function&quot;, {
        Runtime: Runtime.NODEJS_10_X.toString()
    })
});&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:list {&quot;ordered&quot;:true} --&gt;&lt;/p&gt;
&lt;ol&gt;
    &lt;li&gt;How do you know our stack will contain a lambda function with node10 as the runtime? Honestly, there is no
        relation between the test input and its output
    &lt;/li&gt;
    &lt;li&gt;Even though the test is for OrderServiceStack, I see that we are trying to assert on properties of a resource.
        It somehow looks to me like a misplaced test
    &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;!-- /wp:list --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;In order to solve both the problems, we can create a component (or a class) which will take some properties and
    create a lambda function. This means we will be able to move lambda function unit tests closer to that class and
    make the unit tests more revealing. Let's see how. &lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Let's consider that all our lambda functions are based on node10 runtime. With this consideration, we can create a
    class &lt;code&gt;Node10LambdaFunction&lt;/code&gt; which represents a lambda function and accepts properties that are relevant
    to our project defined by &lt;code&gt;Node10LambdaFunctionProperties&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;import {Code, Function, FunctionProps, Runtime} from &quot;@aws-cdk/aws-lambda&quot;;
import {Construct} from &quot;@aws-cdk/core&quot;;

&lt;code style=&quot;color: darkorange&quot;&gt;//inherit from Function&lt;/code&gt;
export class Node10LambdaFunction extends Function {
    constructor(scope: Construct, properties: Node10FunctionProperties) {
        super(scope, properties.functionName, properties.toFunctionProps())
    }
}

class Node10LambdaFunctionProperties {
    &lt;code style=&quot;color: darkorange&quot;&gt;//attributes that make sense at this stage&lt;/code&gt;
    constructor(private readonly code: Code,
                private readonly handler: string,
                readonly functionName: string,
                private readonly environmentVariables?: { &amp;#91;key: string]: string }) {
    }

    &lt;code style=&quot;color: darkorange&quot;&gt;//return FunctionProps&lt;/code&gt;
    toFunctionProps(): FunctionProps {
        return {
            code: this.code,
            handler: this.handler,
            runtime: Runtime.NODEJS_10_X,
            functionName: this.functionName,
            environment: this.environmentVariables
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Few quick observations - &lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:list --&gt;&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;Client of Node10LambdaFunction (which is going be our stack now) is not required to pass runtime as it is
        evident from the name itself
    &lt;/li&gt;
    &lt;li&gt;Client code is not required to pass id of the resource. Node10LambdaFunction passes function name as the id of
        the resource
    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;!-- /wp:list --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Now, we can move the lambda function unit tests closer to &lt;code&gt;Node10LambdaFunction&lt;/code&gt;. This is how the updated
    test(s) will look like -&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;test(&quot;stack should contain a lambda function with node10 as runtime&quot;, () =&gt; {
    const stack = new Stack();
    const properties = new Node10LambdaFunctionProperties(
        Code.fromAsset(&quot;../dist&quot;),
        &quot;handler.ordersHandler&quot;,
        &quot;order-service-function&quot;);

    new Node10LambdaFunction(stack, properties);

    expect(stack).toHaveResource(&quot;AWS::Lambda::Function&quot;, {
        Runtime: Runtime.NODEJS_10_X.toString()
    })
});

test(&quot;stack should contain a lambda function with specified environment variable&quot;, () =&gt; {
    const stack = new Stack();
    const properties = new Node10LambdaFunctionProperties(
        Code.fromAsset(&quot;../dist&quot;),
        &quot;handler.ordersHandler&quot;,
        &quot;order-service-function&quot;,
        {&quot;env&quot;: &quot;dev&quot;});

    new Node10LambdaFunction(stack, properties);

    expect(stack).toHaveResource(&quot;AWS::Lambda::Function&quot;, {
        Environment: {
            Variables: {
                &quot;env&quot;: &quot;dev&quot;
            }
        }
    })
});&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Here, we are not instantiating OrderServiceStack but creating an empty stack which gets passed to
    Node10LambdaFunction. &lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Similarly, we can write other tests around lambda function like - assert that lambda function is created with a given
    name, assert that lambda function is inside a VPC etc. I will make similar changes for Dynamo table and commit the
    code.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;With these changes, we can write unit tests for various components (as fine grained as we want) and a snapshot test
    for the entire stack.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:heading {&quot;level&quot;:4} --&gt;&lt;/p&gt;
&lt;h4&gt;Step 6: Adding lambda backed public RestApi to stack&lt;/h4&gt;
&lt;p&gt;&lt;!-- /wp:heading --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Let's provision a rest api. In order to do so we need to add a dependency &lt;code&gt;@aws-cdk/aws-apigateway&lt;/code&gt;. So,
    let's add it by executing &lt;code&gt;npm install @aws-cdk/aws-apigateway@1.19.0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Following the same pattern we would like to create a class that allows us to add an endpoint which can be accessed
    publicly and is backed by a lambda function.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;import {LambdaRestApi, LambdaRestApiProps, MethodLoggingLevel} from &quot;@aws-cdk/aws-apigateway&quot;;
import {Construct} from &quot;@aws-cdk/core&quot;;
import {Node10LambdaFunction} from &quot;../../function/Node10LambdaFunction&quot;;
import {IFunction} from &quot;@aws-cdk/aws-lambda&quot;;

&lt;code style=&quot;color: darkorange&quot;&gt;//inherit from LambdaRestApi&lt;/code&gt;
class LambdaBackedPublicRestApi extends LambdaRestApi {

    constructor(scope: Construct, properties: LambdaBackedPublicRestApiProperties) {
        super(scope, properties.apiName, properties.toLambdaRestApiProps());
    }
}

class LambdaBackedPublicRestApiProperties {

    constructor(readonly apiName: string,
                private readonly stageName: string,
                private handler: Node10LambdaFunction) {
    }

    &lt;code style=&quot;color: darkorange&quot;&gt;//return LambdaRestApiProps&lt;/code&gt;
    toLambdaRestApiProps(): LambdaRestApiProps {
        return {
            restApiName: this.apiName,
            deployOptions: {
                stageName: this.stageName,
                loggingLevel: MethodLoggingLevel.INFO
            },
            proxy: false,
            handler: this.handler as IFunction
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;This will create a RestApi in the stack for us but there is no endpoint available for us. In order to allow that to
    happen we can expose a method that takes a resource path say - &quot;&lt;code&gt;order/{orderId}&lt;/code&gt;&quot; and an http method
    which needs to be attached to the last part of resource which in this example is &lt;code&gt;{orderId}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;So, let's do this.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;import {
    LambdaRestApi,
    LambdaRestApiProps,
    MethodLoggingLevel,
    Resource
} from &quot;@aws-cdk/aws-apigateway&quot;;
import {Construct} from &quot;@aws-cdk/core&quot;;
import {Node10LambdaFunction} from &quot;../../function/Node10LambdaFunction&quot;;
import {IFunction} from &quot;@aws-cdk/aws-lambda&quot;;

class LambdaBackedPublicRestApi extends LambdaRestApi {

    constructor(scope: Construct, properties: LambdaBackedPublicRestApiProperties) {
        super(scope, properties.apiName, properties.toLambdaRestApiProps());
    }

    &lt;code style=&quot;color: darkorange&quot;&gt;//add resource say, orders/{orderId} and a method GET against {orderId}&lt;/code&gt;
    addEndpoint(resourcePath: string, httpMethod: HttpMethod) {
        if (resourcePath.startsWith(&quot;/&quot;))
            throw new IllegalArgumentException(
                `${resourcePath} should not begin with a / while adding a rest endpoint`
            );

        const resource = this.addAllResourcesUsing(resourcePath);
        resource.addMethod(httpMethod);
    }

    &lt;code style=&quot;color: darkorange&quot;&gt;//add resources recursively&lt;/code&gt;
    private addAllResourcesUsing(resourcePath: string): Resource {
        function add(resources: string[], rootResource: Resource): Resource {
            if (resources.length === 0)
                return rootResource;
            else
                return add(
                    resources.slice(1, resources.length),
                    LambdaBackedPublicRestApi.getOrAdd(resources[0], rootResource)
                );
        }

        return add(resourcePath.split(&quot;/&quot;), (this.root as Resource));
    }

    private static getOrAdd(resourcePath: string, rootResource: Resource): Resource {
        const alreadyPresentResource = rootResource.getResource(resourcePath) as Resource;
        return alreadyPresentResource || rootResource.addResource(resourcePath)
    }
}

class LambdaBackedPublicRestApiProperties {

    constructor(readonly apiName: string,
                private readonly stageName: string,
                private handler: Node10LambdaFunction) {
    }

    toLambdaRestApiProps(): LambdaRestApiProps {
        return {
            restApiName: this.apiName,
            deployOptions: {
                stageName: this.stageName,
                loggingLevel: MethodLoggingLevel.INFO
            },
            proxy: false,
            handler: this.handler as IFunction
        }
    }
}

enum HttpMethod {
    GET = &quot;GET&quot;
}

class IllegalArgumentException extends Error {
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Few quick observations - &lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:list --&gt;&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;We do not expect the resource path to begin with a &quot;/&quot;, &lt;code&gt;aws-apigateway&lt;/code&gt; throws an error if that is
        the case
    &lt;/li&gt;
    &lt;li&gt;We are recursively adding each resource from the resource path&lt;/li&gt;
    &lt;li&gt;Http method gets added on the last resource of the resource path&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;!-- /wp:list --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Let's quickly add some unit tests.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;import {LambdaBackedPublicRestApi} from &quot;../../../lib/restapi/public/LambdaBackedPublicRestApi&quot;;
import {Stack} from &quot;@aws-cdk/core&quot;;
import {LambdaBackedPublicRestApiProperties} from &quot;../../../lib/restapi/public/LambdaBackedPublicRestApiProperties&quot;;
import {Node10LambdaFunctionProperties} from &quot;../../../lib/function/Node10LambdaFunctionProperties&quot;;
import {Code} from &quot;@aws-cdk/aws-lambda&quot;;
import {Node10LambdaFunction} from &quot;../../../lib/function/Node10LambdaFunction&quot;;
import &quot;@aws-cdk/assert/jest&quot;;
import {HttpMethod} from &quot;../../../lib/restapi/public/HttpMethod&quot;;
import {CfnMethod} from &quot;@aws-cdk/aws-apigateway&quot;;

const addFakeEndpoint = (api: LambdaBackedPublicRestApi) =&gt; {
    api.addEndpoint(&quot;fake&quot;, HttpMethod.GET);
};

test(&quot;stack should contain a public api with a name&quot;, () =&gt; {
    const stack = new Stack();
    const node10LambdaFunction = new Node10LambdaFunction(
        stack,
        new Node10LambdaFunctionProperties(
            Code.fromAsset(&quot;../dist&quot;),
            &quot;handler.ordersHandler&quot;,
            &quot;order-service-function&quot;));

    const properties = new LambdaBackedPublicRestApiProperties(
        &quot;orders-api&quot;,
        &quot;dev&quot;,
        node10LambdaFunction
    );

    const api = new LambdaBackedPublicRestApi(stack, properties);
    addFakeEndpoint(api);

    expect(stack).toHaveResource(&quot;AWS::ApiGateway::RestApi&quot;, {
        Name: &quot;orders-api&quot;
    });
});

test(&quot;stack should contain a public api with stage name&quot;, () =&gt; {
    const stack = new Stack();
    const node10LambdaFunction = new Node10LambdaFunction(
        stack,
        new Node10LambdaFunctionProperties(
            Code.fromAsset(&quot;../dist&quot;),
            &quot;handler.ordersHandler&quot;,
            &quot;order-service-function&quot;));

    const properties = new LambdaBackedPublicRestApiProperties(
        &quot;orders-api&quot;,
        &quot;dev&quot;,
        node10LambdaFunction
    );

    const api = new LambdaBackedPublicRestApi(stack, properties);
    addFakeEndpoint(api);

    expect(stack).toHaveResource(&quot;AWS::ApiGateway::Stage&quot;, {
        StageName: &quot;dev&quot;
    });
});

test(&quot;stack should contain a public api with a resource&quot;, () =&gt; {
    const stack = new Stack();
    const node10LambdaFunction = new Node10LambdaFunction(
        stack,
        new Node10LambdaFunctionProperties(
            Code.fromAsset(&quot;../dist&quot;),
            &quot;handler.ordersHandler&quot;,
            &quot;order-service-function&quot;));

    const properties = new LambdaBackedPublicRestApiProperties(
        &quot;orders-api&quot;,
        &quot;dev&quot;,
        node10LambdaFunction
    );

    const api = new LambdaBackedPublicRestApi(stack, properties);
    api.addEndpoint(&quot;article/serverless&quot;, HttpMethod.GET);

    &lt;code style=&quot;color: darkorange&quot;&gt;//assert a resource&lt;/code&gt;
    const articleResource = api.root.getResource(&quot;article&quot;);
    expect(articleResource).toBeDefined();

    const serverlessResource = articleResource?.getResource(&quot;serverless&quot;);
    expect(serverlessResource).toBeDefined();
});

test(&quot;stack should contain a public api with an http method added to the resource&quot;, () =&gt; {
    const stack = new Stack();
    const node10LambdaFunction = new Node10LambdaFunction(
        stack,
        new Node10LambdaFunctionProperties(
            Code.fromAsset(&quot;../dist&quot;),
            &quot;handler.ordersHandler&quot;,
            &quot;order-service-function&quot;));

    const properties = new LambdaBackedPublicRestApiProperties(
        &quot;orders-api&quot;,
        &quot;dev&quot;,
        node10LambdaFunction
    );

    const api = new LambdaBackedPublicRestApi(stack, properties);
    api.addEndpoint(&quot;article/serverless&quot;, HttpMethod.GET);

    &lt;code style=&quot;color: darkorange&quot;&gt;//get a resource and a CfnMethod against that resource&lt;/code&gt;
    const serverlessResource = api.root.getResource(&quot;article&quot;)?.getResource(&quot;serverless&quot;);
    const method = serverlessResource?.node.findChild(&quot;GET&quot;) as CfnMethod;

    expect(method.httpMethod).toEqual(HttpMethod.GET);
});&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;These tests assert that a rest api exists with a given name, with a given stage name, with a resource and an http
    method attached to a resource.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:heading {&quot;level&quot;:4} --&gt;&lt;/p&gt;
&lt;h4&gt;Step 7: Updating the stack&lt;/h4&gt;
&lt;p&gt;&lt;!-- /wp:heading --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Let's update the stack to have lambda function, dynamo table, lambda backed public api and dynamo table read access
    to lambda function.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;import {Code} from &quot;@aws-cdk/aws-lambda&quot;;
import {Construct, Stack, StackProps} from &quot;@aws-cdk/core&quot;;
import {AttributeType} from &quot;@aws-cdk/aws-dynamodb&quot;;
import {Node10LambdaFunction} from &quot;./function/Node10LambdaFunction&quot;;
import {Node10LambdaFunctionProperties} from &quot;./function/Node10LambdaFunctionProperties&quot;;
import {DynamoTable} from &quot;./dynamodb/DynamoTable&quot;;
import {DynamoTableProperties} from &quot;./dynamodb/DynamoTableProperties&quot;;
import {PrimaryKey} from &quot;./dynamodb/PrimaryKey&quot;;
import {PartitionKey} from &quot;./dynamodb/PartitionKey&quot;;
import {LambdaBackedPublicRestApi} from &quot;./restapi/public/LambdaBackedPublicRestApi&quot;;
import {LambdaBackedPublicRestApiProperties} from &quot;./restapi/public/LambdaBackedPublicRestApiProperties&quot;;
import {HttpMethod} from &quot;./restapi/public/HttpMethod&quot;;

export class OrderServiceInfraStack extends Stack {
    constructor(scope: Construct, id: string, props?: StackProps) {
        super(scope, id, props);

        &lt;code style=&quot;color: darkorange&quot;&gt;//use the newly prepared classes&lt;/code&gt;
        const ordersFunction = this.ordersFunction();
        const ordersTable    = this.ordersTable();
        const restApi        = this.lambdaBackedPublicRestApi(ordersFunction);

        restApi.addEndpoint(&quot;orders/{orderId}&quot;, HttpMethod.GET);
        ordersTable.grantReadData(ordersFunction);
    }

    private ordersFunction() {
        return new Node10LambdaFunction(this, new Node10LambdaFunctionProperties(
            Code.fromAsset(&quot;../dist&quot;),
            &quot;handler.ordersHandler&quot;,
            &quot;order-service-function&quot;,
            {&quot;ExecutionEnvironment&quot;: &quot;dev&quot;})
        );
    }

    private ordersTable() {
        return new DynamoTable(this, new DynamoTableProperties(
            &quot;orders&quot;,
            new PrimaryKey(
                new PartitionKey(
                    &quot;orderId&quot;,
                    AttributeType.STRING)
            ))
        );
    }

    private lambdaBackedPublicRestApi(lambda: Node10LambdaFunction) {
        return new LambdaBackedPublicRestApi(this, new LambdaBackedPublicRestApiProperties(
            &quot;orders-api&quot;,
            &quot;dev&quot;,
            lambda
        ));
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Time to add our snapshot test, probably simpler than you might have thought of -&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;import {OrderServiceInfraStack} from &quot;../lib/OrderServiceInfraStack&quot;;
import {App} from &quot;@aws-cdk/core&quot;;
import &quot;@aws-cdk/assert/jest&quot;;

test(&quot;should create order service stack&quot;, () =&gt; {
    const app = new App();
    const stack = new OrderServiceInfraStack(app, &quot;OrderServiceStack&quot;);

    expect(stack).toMatchSnapshot();
});&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:heading {&quot;level&quot;:4} --&gt;&lt;/p&gt;
&lt;h4&gt;Step 8: Deploying our stack&lt;/h4&gt;
&lt;p&gt;&lt;!-- /wp:heading --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;We have worked hard to create all the resources that are needed in our stack. Now is the time to deploy our stack and
    see things in action.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Let's update &lt;code&gt;OrderServiceInfra&lt;/code&gt; to pass stack name as a part of stack properties. It is this file which
    acts as an entry point for the application and is referred in cdk.json.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;#!/usr/bin/env node
import &quot;source-map-support/register&quot;;
import {OrderServiceInfraStack} from &quot;../lib/OrderServiceInfraStack&quot;;
import {StackProps} from &quot;@aws-cdk/core&quot;;
import cdk = require(&quot;@aws-cdk/core&quot;);

const app = new cdk.App();
&lt;code style=&quot;color: darkorange&quot;&gt;//pass stack name&lt;/code&gt;
const stackProps:StackProps = {
    stackName: &quot;order-service-stack&quot;
};
new OrderServiceInfraStack(app, &quot;OrderServiceStack&quot;, stackProps);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;CDK also provides us with various commands - &lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:list --&gt;&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;code&gt;cdk list&lt;/code&gt; - lists the stacks&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;cdk deploy&lt;/code&gt; - deploys the stack in AWS environment&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;cdk destroy&lt;/code&gt; - destroys the stacks&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;cdk synthesize&lt;/code&gt; - synthesizes and prints the CloudFormation&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;cdk bootstrap&lt;/code&gt; - deploys the CDK toolkit stack into an AWS environment&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;!-- /wp:list --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;We need to execute &lt;code&gt;cdk bootrap&lt;/code&gt; and &lt;code&gt;cdk deploy&lt;/code&gt; from &lt;code&gt;infra&lt;/code&gt; directory to deploy
    stack in our AWS account.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;&gt; cd infra
&gt; cdk bootstrap
&gt; cdk deploy&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;These commands make a few assumptions -&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:list --&gt;&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;AWS credentials are already configured on host machine&lt;/li&gt;
    &lt;li&gt;AWS user has the right to create various AWS resources including IAM roles&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;dist/&lt;/code&gt; directory which will be deployed on an S3 bucket (bootstrap creates for us) when we execute
        &lt;code&gt;cdk bootstrap&lt;/code&gt;, already exists
    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;!-- /wp:list --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;It will take sometime for stack to be created which will consist of &lt;code&gt;lambda function, dynamo table, api gateway
    and all the necessary IAM roles&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Once our stack is created, make an entry in &lt;code&gt;orders&lt;/code&gt; table, hit the public api endpoint which will look
    like &lt;em&gt;&lt;code&gt;https://rest-api-id.execute-api.ap-south-1.amazonaws.com/dev/orders/OrderId&lt;/code&gt;&lt;/em&gt; and enjoy the
    output. &lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;That's it, our stack is deployed and our application is up and running 😁&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:heading {&quot;level&quot;:4} --&gt;&lt;/p&gt;
&lt;h4&gt;Conclusion &lt;/h4&gt;
&lt;p&gt;&lt;!-- /wp:heading --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Relationship between CDK and CloudFormation can be summarised as -&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;
    &lt;!-- wp:image {&quot;align&quot;:&quot;center&quot;,&quot;id&quot;:1043,&quot;width&quot;:511,&quot;height&quot;:252,&quot;sizeSlug&quot;:&quot;large&quot;,&quot;className&quot;:&quot;is-style-default&quot;} --&gt;&lt;/p&gt;
&lt;div class=&quot;wp-block-image is-style-default&quot;&gt;
    &lt;figure class=&quot;aligncenter size-large is-resized&quot;&gt;&lt;img src=&quot;/assets/img/pexels/cdk.png&quot;
                                                           class=&quot;wp-image-1043&quot;/&gt;&lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:image --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;In this article we were able to code our infra using CDK, write tests for our infra and deploy the same. Let's take a
    look at some of the advantages of using &lt;a href=&quot;https://docs.aws.amazon.com/cdk/latest/guide/home.html&quot;&gt;CDK&lt;/a&gt; -
&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:list --&gt;&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;Resources can be modeled in Object Oriented manner&lt;/li&gt;
    &lt;li&gt;High level abstractions can be defined and published within the team or company&lt;/li&gt;
    &lt;li&gt;Infrastructure can be built as library&lt;/li&gt;
    &lt;li&gt;Infrastructure code can be tested&lt;/li&gt;
    &lt;li&gt;IDE's code completion can be leveraged&lt;/li&gt;
    &lt;li&gt;Programming language constructs like if statements, for-loops, etc can be used when defining infrastructure&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;!-- /wp:list --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;We have finally come to end of our Serverless Journey series. Hope you enjoyed it.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;</content><author><name>Sarthak Makhija</name></author><category term="AWS Lambda" /><category term="Serverless" /><summary type="html">Let's deploy our Serverless application. We will be using AWS CDK to deploy our application that includes infra and the code. What would be interesting is to see if we can make our infra testable.</summary></entry><entry><title type="html">Testing Serverless Journey</title><link href="https://sarthakmakhija.github.io/testing-serverless-journey/" rel="alternate" type="text/html" title="Testing Serverless Journey" /><published>2020-03-14T00:00:00+05:30</published><updated>2020-03-14T00:00:00+05:30</updated><id>https://sarthakmakhija.github.io/testing-serverless-journey</id><content type="html" xml:base="https://sarthakmakhija.github.io/testing-serverless-journey/">&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;It is time to test our &lt;a href=&quot;/beginning-serverless-journey&quot;&gt;Serverless journey&lt;/a&gt; which started with a web application that involved AWS lambda, AWS API Gateway and AWS DynamoDB. &lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;We had some unit tests for our controller, service and request objects. But, these tests don't give us the kind of confidence we need to deploy our application. At this stage we don't even know if the query that is written in repository is going to work properly or not, forget about releasing the application.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;What we need is an ability to test the following - &lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:list --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Repository works as expected by connecting to DynamoDB&lt;/li&gt;
&lt;li&gt;Lambda handler is able to receive an event from API Gateway and get an order by its id&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;!-- /wp:list --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;In simple terms we need some form of integration testing. &lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:heading {&quot;level&quot;:4} --&gt;&lt;/p&gt;
&lt;h4&gt;Let's welcome LocalStack&lt;/h4&gt;
&lt;p&gt;&lt;!-- /wp:heading --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;LocalStack&lt;a href=&quot;https://github.com/localstack/localstack&quot;&gt; &lt;/a&gt;is a fully functional local AWS cloud stack. Its &lt;a href=&quot;https://github.com/localstack/localstack&quot;&gt;github&lt;/a&gt; page states the following - &lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:quote --&gt;&lt;/p&gt;
&lt;blockquote class=&quot;wp-block-quote&quot;&gt;&lt;p&gt;&lt;em&gt;LocalStack&lt;/em&gt;&amp;nbsp;provides an easy-to-use test/mocking framework for developing Cloud applications. Currently, the focus is primarily on supporting the AWS cloud stack.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;!-- /wp:quote --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;LocalStack spins up various Cloud APIs on local machine including S3, Lambda, DynamoDB and API Gateway. This is all we need to test our complete application. &lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Some of you might be having a question &quot;Why is S3 needed?&quot;. Well, we will get an answer to this by the end of this article. So, please hold on.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:heading {&quot;level&quot;:4} --&gt;&lt;/p&gt;
&lt;h4&gt;Understanding LocalStack&lt;/h4&gt;
&lt;p&gt;&lt;!-- /wp:heading --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;LocalStack can be made to run as a docker container on a host machine. It supports quite a number of AWS services which will run inside the docker container with different ports exposed on host machine. &lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Before moving on let's look at this conversation to understand how can LocalStack be leveraged for testing Serverless application. &lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:core-embed/youtube {&quot;url&quot;:&quot;https://youtu.be/Xed6C8vskUo&quot;,&quot;type&quot;:&quot;video&quot;,&quot;providerNameSlug&quot;:&quot;youtube&quot;,&quot;align&quot;:&quot;center&quot;,&quot;className&quot;:&quot;wp-embed-aspect-16-9 wp-has-aspect-ratio&quot;} --&gt;&lt;/p&gt;
&lt;figure class=&quot;wp-block-embed-youtube aligncenter wp-block-embed is-type-video is-provider-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio&quot;&gt;
&lt;div class=&quot;wp-block-embed__wrapper&quot;&gt;
    &lt;iframe width=&quot;800&quot; height=&quot;400&quot; src=&quot;https://www.youtube.com/embed/Xed6C8vskUo&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;!-- /wp:core-embed/youtube --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Let's take some small steps to test our application using LocalStack.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:heading {&quot;level&quot;:4} --&gt;&lt;/p&gt;
&lt;h4&gt;Writing Repository Test&lt;/h4&gt;
&lt;p&gt;&lt;!-- /wp:heading --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;In order to test repository layer we need to -&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:list {&quot;ordered&quot;:true} --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Build the project&lt;/li&gt;
&lt;li&gt;Have a docker container with a running DynamoDB service&lt;/li&gt;
&lt;li&gt;Facilitate creation of &quot;orders&quot; table in DynamoDB service&lt;/li&gt;
&lt;li&gt;Change the application to connect to local DynamoDB service&lt;/li&gt;
&lt;li&gt;Add integration tests for repository&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;!-- /wp:list --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Let's handle each of them one by one.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 1: Build the project&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Let's add a build task to our outer package.json which will execute &lt;code&gt;tsc&lt;/code&gt;. Let's also add a types definition for node by executing &lt;code&gt;npm i @types/node&lt;/code&gt;. Here, is how our build script looks like - &lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;&quot;scripts&quot;: {
  &quot;test&quot;: &quot;jest test/**&quot;,
  &quot;build&quot;: &quot;tsc&quot;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Before we execute our build command, let's &lt;code&gt;exclude infra and test&lt;/code&gt; folders from our outer tsconfig.json.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:preformatted --&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;wp-block-preformatted&quot;&gt;{
  &quot;compilerOptions&quot;: {
    &quot;noEmitOnError&quot;: true,
    &quot;moduleResolution&quot;: &quot;node&quot;,
    &quot;module&quot;: &quot;commonjs&quot;,
    &quot;target&quot;: &quot;es6&quot;,
    &quot;outDir&quot;: &quot;dist&quot;,
    &quot;inlineSourceMap&quot;: true
  },
  &quot;exclude&quot;: [&quot;infra&quot;, &quot;test&quot;]
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:preformatted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Now, we can execute &lt;code&gt;npm run build&lt;/code&gt; which should produce a &lt;code&gt;dist&lt;/code&gt; folder with compiled code.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note we are using tsc to transpile our typescript code to javascript. We do not have any external dependencies to be packed with our distribution, had there been any we would have gone ahead with webpack.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 2: Docker container with a running DynamoDB service&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Let's create a docker-compose file referring to LocalStack image and start the container as a pretest step in our package.json.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;version: &quot;2.1&quot;
services:
  localstack:
    image: localstack/localstack:0.10.7
    ports:
      - &quot;4567-4599:4567-4599&quot;
      - &quot;${PORT_WEB_UI-8080}:${PORT_WEB_UI-8080}&quot;
    environment:
      - SERVICES=${SERVICES- }
      - DEBUG=1
      - DATA_DIR=${DATA_DIR- }
      - PORT_WEB_UI=${PORT_WEB_UI- }
      - LAMBDA_EXECUTOR=${LAMBDA_EXECUTOR- }
    volumes:
      - &quot;/var/run/docker.sock:/var/run/docker.sock&quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;  &quot;scripts&quot;: {
    &quot;pretest&quot;: &quot;docker-compose -f test/docker-compose.yml up -d&quot;,
    &quot;test&quot;: &quot;jest test/**&quot;,
    &quot;build&quot;: &quot;tsc&quot;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Run the pretest command and see LocalStack running as docker container.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 3: Facilitate creation of &quot;orders&quot; table in DynamoDB service&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;With LocalStack container up and running, &quot;orders&quot; table needs to be created in DynamoDB service. In order to do this we will use CloudFormation template. So, let's write one -&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;AWSTemplateFormatVersion: &quot;2010-09-09&quot;
Resources:
  OrdersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: &quot;orders&quot;
      AttributeDefinitions:
        - AttributeName: &quot;orderId&quot;
          AttributeType: &quot;S&quot;
      KeySchema:
        - AttributeName: &quot;orderId&quot;
          KeyType: &quot;HASH&quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;We will also create a script to deploy CloudFormation template against LocalStack. This script will also be executed as a part of our pretest step.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;#!/bin/sh

aws cloudformation deploy \
--template-file template.yaml \
--stack-name order-service-stack \
--region us-east-1 \
--capabilities CAPABILITY_IAM  \
--endpoint-url http://localhost:4581

echo 'aws cloudformation deploy executed against localstack'&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Few Quick Observations - &lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:list --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;As a part of &quot;&lt;code&gt;aws cloudformation deploy&lt;/code&gt;&quot;, us-east-1 has been specified as the region. By default, LocalStack runs with us-east-1 and we are using the same region&lt;/li&gt;
&lt;li&gt;As a part of &quot;&lt;code&gt;aws cloudformation deploy&lt;/code&gt;&quot;, local CloudFormation service endpoint exposed by LocalStack has been specified by using &lt;code&gt;--endpoint-url&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;!-- /wp:list --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Let's update our package.json.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;  &quot;scripts&quot;: {
    &quot;localstack:up&quot;: &quot;docker-compose -f test/docker-compose.yml up -d&quot;,
    &quot;delay&quot;: &quot;sleep 20&quot;,
    &quot;localstack:create-infra&quot;: &quot;cd test/infra &amp;amp;&amp;amp; ./deploy.sh&quot;,
    &quot;pretest&quot;: &quot;npm run localstack:up &amp;amp;&amp;amp; npm run delay &amp;amp;&amp;amp; npm run localstack:create-infra&quot;,
    &quot;test&quot;: &quot;jest test/**&quot;,
    &quot;build&quot;: &quot;tsc&quot;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Following events happens as a part of pretest step -&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:list --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LocalStack docker container starts&lt;/li&gt;
&lt;li&gt;Some delay gets introduced&lt;/li&gt;
&lt;li&gt;CloudFormation template gets deployed against LocalStack&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;!-- /wp:list --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Before CloudFormation template can be deployed on LocalStack, a small delay has been specified to ensure LocalStack with its services is up and running.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How do I know if &quot;orders&quot; table was created?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;LocalStack &lt;em&gt;tries&lt;/em&gt; to replicate AWS services on local. By this theory, we should be able to run AWS commands by specifying the endpoint-url of the corresponding service.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;&gt; aws dynamodb scan --table-name orders --endpoint-url http://localhost:4569

&lt;code style=&quot;color: darkorange&quot;&gt;##Output##&lt;/code&gt;
{
    &quot;Count&quot;: 0,
    &quot;Items&quot;: [],
    &quot;ScannedCount&quot;: 0,
    &quot;ConsumedCapacity&quot;: null
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Now, the last step is making a change in the application to connect to local DynamoDB.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 4: Connecting the application to local DynamoDB service&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Let's change the repository layer to connect to local DynamoDB service.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;import {GetItemInput} from &quot;aws-sdk/clients/dynamodb&quot;;
import {Order} from &quot;../model/Order&quot;;
import {dynamoDbClient} from &quot;../DynamoDbConfiguration&quot;;

const dynamoDb = dynamoDbClient(); &lt;code style=&quot;color: darkorange&quot;&gt;//get dynamoDbClient from DynamoDbConfiguration&lt;/code&gt;

export class OrderRepository {

    async findAnOrderBy(id: string) {
        const getItemInputOptions: GetItemInput = {
            TableName: &quot;orders&quot;,
            Key: {
                &quot;orderId&quot;: {S: id}
            }
        };
        const response = await dynamoDb.getItem(getItemInputOptions).promise();
        return response.Item ? Order.from(response.Item) : null;
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;DynamoDbConfiguration looks like - &lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;import {DynamoDB} from &quot;aws-sdk&quot;

const executionEnvironment = () =&gt; {
    const defaultExecutionEnvironment = &quot;test&quot;;
    return process.env.ExecutionEnvironment || defaultExecutionEnvironment;
};

const isTestExecutionEnvironment = () =&gt; executionEnvironment() === &quot;test&quot;;

export const dynamoDbClient = () =&gt; {
    if (isTestExecutionEnvironment()) {
        return new DynamoDB({
            &quot;region&quot;: &quot;us-east-1&quot;,
            &quot;endpoint&quot;: &quot;http://localhost:4569&quot;
        });
    } else {
        return new DynamoDB({
            &quot;region&quot;: &quot;ap-south-1&quot;
        });
    }
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Few Quick Observations - &lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:list --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OrderRepository uses &lt;code&gt;dynamoDbClient&lt;/code&gt; exposed by DynamoDbConfiguration &lt;code&gt;globally&lt;/code&gt;. The reason being &quot;aws-sdk&quot; needs to be initialised during cold startup of lambda function&lt;/li&gt;
&lt;li&gt;DynamoDbConfiguration uses a lambda environment variable to determine if the execution environment is &quot;test&quot;. By default, execution environment is considered as &quot;test&quot;&lt;/li&gt;
&lt;li&gt;If execution environment is &quot;test&quot;, then an instance of DynamoDB connecting to local dynamo service is returned&lt;/li&gt;
&lt;li&gt;This also means ExecutionEnvironment needs to be passed during deployment as lambda environment variable&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;!-- /wp:list --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 5: Adding Integration Tests for Repository&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;import {DeleteItemInput, PutItemInput} from &quot;aws-sdk/clients/dynamodb&quot;;

import {OrderRepository} from &quot;../src/repository/OrderRepository&quot;;
import {Order}           from &quot;../src/model/Order&quot;;
import {dynamoDbClient}  from &quot;../src/DynamoDbConfiguration&quot;;

const dynamoDb = dynamoDbClient();

test(&quot;should return an order given there is AN order for the provided order id&quot;, async () =&gt; {
    const orderId = &quot;order-100&quot;;
    
    await OrderRepositoryFixture.deleteAnOrder(orderId);
    await OrderRepositoryFixture.createAn(new Order(orderId, 5000));
    
    const order = await new OrderRepository().findAnOrderBy(orderId);

    expect(order.orderId).toEqual(orderId);
    expect(order.amount).toEqual(5000);
});

test(&quot;should NOT return an order given there is NO order for the provided order id&quot;, async () =&gt; {
    const orderId = &quot;no-order-present-for-this-order-id&quot;;
    const order = await new OrderRepository().findAnOrderBy(orderId);

    expect(order).toBeNull();
});

class OrderRepositoryFixture {
    static async createAn(order: Order) {
        const item: PutItemInput = {
            TableName: &quot;orders&quot;,
            Item: {
                &quot;orderId&quot;: {
                    S: order.orderId
                },
                &quot;amount&quot;: {
                    N: order.amount.toString()
                }
            }
        };
        await dynamoDb.putItem(item).promise()
    }
    static async deleteAnOrder(orderId: string) {
        const item: DeleteItemInput = {
            TableName: &quot;orders&quot;,
            Key: {
                &quot;orderId&quot;: {
                    S: orderId
                }
            }
        };
        await dynamoDb.deleteItem(item).promise();
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;That's it run all the tests &lt;code&gt;npm t&lt;/code&gt; and see them pass 😁&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:heading {&quot;level&quot;:4} --&gt;&lt;/p&gt;
&lt;h4&gt;Connecting the dots&lt;/h4&gt;
&lt;p&gt;&lt;!-- /wp:heading --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;We have been able test our repository against DynamoDB service running in LocalStack. What we want to do next is - &lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:list {&quot;ordered&quot;:true} --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Deploy lambda function code against lambda function service in LocalStack&lt;/li&gt;
&lt;li&gt;Create Rest Api backed by lambda function in LocalStack&lt;/li&gt;
&lt;li&gt;Adding integration tests to send an http request against the Api Gateway&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;!-- /wp:list --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Let's start.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 6: Deploy lambda function code&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;In order to deploy the lambda function code, we need to build the code, archive it, upload the archive on S3 service running inside LocalStack and update CloudFormation template to create the lambda function by referring to the S3 bucket.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Let's archive the code, create an S3 bucket and upload the archive on S3 service.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;&quot;scripts&quot;: {
    &quot;localstack:down&quot;: &quot;docker-compose -f test/docker-compose.yml down&quot;,
    &quot;localstack:up&quot;: &quot;docker-compose -f test/docker-compose.yml up -d&quot;,
    &quot;delay&quot;: &quot;sleep 20&quot;,
    &quot;localstack:create-infra&quot;: &quot;cd test/infra &amp;amp;&amp;amp; ./init.sh&quot;,
    &quot;archive&quot;: &quot;cd dist/ &amp;amp;&amp;amp; zip -r ../serverless-order-service.zip .&quot;,
    &quot;pretest&quot;: &quot;npm run build &amp;amp;&amp;amp; npm run archive &amp;amp;&amp;amp; npm run localstack:down &amp;amp;&amp;amp; npm run localstack:up &amp;amp;&amp;amp; npm run delay &amp;amp;&amp;amp; npm run localstack:create-infra&quot;,
    &quot;test&quot;: &quot;jest test/**&quot;,
    &quot;build&quot;: &quot;tsc&quot;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Following events happens as a part of pretest step –&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:list --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Code gets built&lt;/li&gt;
&lt;li&gt;Distribution gets archived&lt;/li&gt;
&lt;li&gt;LocalStack docker container gets stopped&lt;/li&gt;
&lt;li&gt;LocalStack docker container starts&lt;/li&gt;
&lt;li&gt;Some delay gets introduced&lt;/li&gt;
&lt;li&gt;CloudFormation template gets deployed against LocalStack&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;!-- /wp:list --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;package.json now runs &lt;code&gt;build&lt;/code&gt; and &lt;code&gt;archive&lt;/code&gt; as a part of &lt;code&gt;pretest&lt;/code&gt; step. &lt;code&gt;archive&lt;/code&gt; simply creates a zip file which is ready to uploaded on an S3 bucket. localstack:create-infra now runs init.sh which delegates the job of creating a bucket, uploading the archive and deploying the infra to different scripts.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Let's see the commands to create an S3 bucket and upload the archive. These are the same commands which will be executed from one of our shell scripts -&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;&gt; aws s3 mb s3://serverless-order-service --endpoint-url http://localhost:4572

&gt; aws s3 cp ../../serverless-order-service.zip \
s3://serverless-order-service --endpoint-url http://localhost:4572&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Let's update CloudFormation template to create lambda resource.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;AWSTemplateFormatVersion: &quot;2010-09-09&quot;
Resources:
  OrdersFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: &quot;order-service-function&quot;
      Runtime: &quot;nodejs10.x&quot;
      Handler: &quot;handler.ordersHandler&quot;
      Code:
        S3Bucket: &quot;serverless-order-service&quot;   &lt;code style=&quot;color: darkorange&quot;&gt;//created earlier&lt;/code&gt;
        S3Key: &quot;serverless-order-service.zip&quot;  &lt;code style=&quot;color: darkorange&quot;&gt;//uploaded earlier&lt;/code&gt;
        Role: !GetAtt &quot;OrdersRole.Arn&quot;         &lt;code style=&quot;color: darkorange&quot;&gt;//refer to a dummy role created below&lt;/code&gt;

  OrdersRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: &quot;OrdersFunctionRole&quot;
      AssumeRolePolicyDocument:
        Version: &quot;2012-10-17&quot;
        Statement:
          - Effect: &quot;Allow&quot;
            Action:
              - &quot;sts:AssumeRole&quot;
            Principal:
              Service:
                - &quot;lambda.amazonaws.com&quot;

  OrdersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: &quot;orders&quot;
      AttributeDefinitions:
        - AttributeName: &quot;orderId&quot;
          AttributeType: &quot;S&quot;
      KeySchema:
        - AttributeName: &quot;orderId&quot;
          KeyType: &quot;HASH&quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Executing &lt;code&gt;npm t&lt;/code&gt; should now create AWS lambda function in LocalStack. We can verify the same -&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;&gt;  aws lambda list-functions --endpoint-url http://localhost:4574/

&lt;code style=&quot;color: darkorange&quot;&gt;##Output&lt;/code&gt;
{
    &quot;FunctionArn&quot;: &quot;arn:aws:lambda:us-east-1:000000000000:function:order-service-function&quot;, 
    &quot;Handler&quot;: &quot;handler.ordersHandler&quot;, 
    &quot;Role&quot;: &quot;test_role&quot;, 
    &quot;Timeout&quot;: 3, 
    &quot;Runtime&quot;: &quot;nodejs10.x&quot;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Let's move on to creating a Rest Api.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 7: Create Rest Api &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;This should be simple, let's update our CloudFormation template to have a Rest Api with &lt;code&gt;/orders/{instanceId}&lt;/code&gt; as the resource and a &lt;code&gt;GET&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;AWSTemplateFormatVersion: &quot;2010-09-09&quot;
Resources:
  &lt;code style=&quot;color: darkorange&quot;&gt;## Content Trimmed&lt;/code&gt;

  OrdersApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: &quot;orders-api&quot;

  OrdersResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt &quot;OrdersApiGateway.RootResourceId&quot;
      PathPart: &quot;orders&quot;
      RestApiId: !Ref &quot;OrdersApiGateway&quot;

  OrderIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref &quot;OrdersResource&quot;
      PathPart: &quot;{orderId}&quot;
      RestApiId: !Ref &quot;OrdersApiGateway&quot;

  OrdersGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: &quot;GET&quot;
      AuthorizationType: &quot;NONE&quot;
      RestApiId: !Ref &quot;OrdersApiGateway&quot;
      ResourceId: !Ref &quot;OrderIdResource&quot;
      Integration:
        IntegrationHttpMethod: &quot;POST&quot;
        Type: &quot;AWS_PROXY&quot;
        Uri:
          Fn::Join:
            - &quot;&quot;
            - - &quot;arn:&quot;
              - &quot;aws&quot;
              - &quot;:apigateway:&quot;
              - Ref: AWS::Region
              - :lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                  - OrdersFunction
                  - Arn
                  - /invocations&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Executing &lt;code&gt;npm t&lt;/code&gt; should now create Rest Api in LocalStack. We can verify the same -&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;&gt; aws apigateway get-rest-apis \
--query &quot;items[?name=='orders-api'].id&quot; \
--output text --region us-east-1 \
--endpoint-url=http://localhost:4567

&lt;code style=&quot;color: darkorange&quot;&gt;##Should print Api Id&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 8: Adding Integration Test for the application&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;In order to write this integration test we should be sending an http request to an endpoint exposed by Api Gateway inside LocalStack. This endpoint with LocalStack looks like -&lt;br /&gt;&lt;em&gt;http://localhost:4567/restapis/&amp;lt;&amp;lt;Rest Api Id&amp;gt;&amp;gt;/test/_user_request_/orders/&amp;lt;&amp;lt;Order Id&amp;gt;&amp;gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;This means we need a way to get the rest api id that was created as a part of deployment of CloudFormation template. We will add &lt;code&gt;aws apigateway get-rest-apis&lt;/code&gt; command as a part of a script which will be executed from &lt;code&gt;init.sh&lt;/code&gt;. This command will write the rest api id into a file which will be read by our integration test.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;#!/bin/sh

aws apigateway get-rest-apis \
--query &quot;items[?name=='orders-api'].id&quot; \
--output text --region us-east-1 \
--endpoint-url=http://localhost:4567 &gt; rest_api_id&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;This is how our init.sh looks now -&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;#!/bin/sh

./createBucket.sh
./package.sh
./deploy.sh
./outputRestApiId.sh&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Now, it is the time to add integration test.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;import {OrderRepositoryFixture} from &quot;./fixture/OrderRepositoryFixture&quot;;
import {Order} from &quot;../src/model/Order&quot;;

import * as fs from &quot;fs&quot;;
import * as path from &quot;path&quot;;
import Axios from &quot;axios&quot;; &lt;code style=&quot;color: darkorange&quot;&gt;//add axios as dev-dependency&lt;/code&gt;

let apiId = &quot;&quot;;

beforeEach(() =&gt; {
    &lt;code style=&quot;color: darkorange&quot;&gt;//read rest api id&lt;/code&gt;
    apiId = fs.readFileSync(path.resolve(&quot;test/infra/rest_api_id&quot;), &quot;utf8&quot;).trim();
});

test(&quot;should return an order given there is AN order for the provided order id&quot;, async () =&gt; {

    const orderId = &quot;order-500&quot;;

    await OrderRepositoryFixture.deleteAnOrder(orderId);
    await OrderRepositoryFixture.createAn(new Order(orderId, 4000));

    const apiUrl = `http://localhost:4567/restapis/${apiId}/test/_user_request_/orders/${orderId}`;
    const response = await Axios.get(apiUrl);

    expect(response.status).toEqual(200);
    expect(response.data).toEqual({
        &quot;orderId&quot;: orderId,
        &quot;amount&quot;: 4000
    });
}, 20000);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Before the test can be run, we will have to make one change in &lt;code&gt;DynamoDbConfiguration&lt;/code&gt;. It returns a &lt;em&gt;dynamoDbClient&lt;/em&gt; which connects to dynamodb running on &lt;code&gt;localhost:4569&lt;/code&gt;. This is not true anymore because lambda is running inside a docker container and for that lambda function &quot;localhost:4569&quot; will refer to the port 4569 on docker's IP. What we need is the port 4569 with the IP of host machine. So, let's make this change. This is how updated DynamoDbConfiguration will look like -&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;import {DynamoDB} from &quot;aws-sdk&quot;

const executionEnvironment = () =&gt; {
    const defaultExecutionEnvironment = &quot;local&quot;;
    return process.env.ExecutionEnvironment || defaultExecutionEnvironment;
};

const isExecutionEnvironmentLocal = () =&gt; executionEnvironment() === &quot;local&quot;;

export const dynamoDbClient = () =&gt; {
    if (isExecutionEnvironmentLocal()) {&lt;code style=&quot;color: darkorange&quot;&gt;
        /** LOCALSTACK_HOSTNAME:
        *     for accessing the hostname from inside the container
        *   localhost: 
        *     for running repository integration tests which run on host machine
        **/&lt;/code&gt;
        const dynamoHost = process.env.LOCALSTACK_HOSTNAME || &quot;localhost&quot;;
        return new DynamoDB({
            &quot;region&quot;: &quot;us-east-1&quot;,
            &quot;endpoint&quot;:`http://${dynamoHost}:4569`
        });
    } else {
        return new DynamoDB({
            &quot;region&quot;: &quot;ap-south-1&quot;
        });
    }
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;LocalStack exposes an environment variable LOCALSTACK_HOSTNAME which is available inside docker process that refers to the host machine.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;That's it run all the tests &lt;code&gt;npm t&lt;/code&gt; and see them pass 😁&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:heading {&quot;level&quot;:4} --&gt;&lt;/p&gt;
&lt;h4&gt;Summary&lt;/h4&gt;
&lt;p&gt;&lt;!-- /wp:heading --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;We used LocalStack to test our application. Everything is available &lt;a href=&quot;https://github.com/aws-articles/serverless-order-service.git&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Here is a quick glimpse of the sequence of events that happen when tests are executed.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:image {&quot;id&quot;:1030,&quot;sizeSlug&quot;:&quot;large&quot;,&quot;className&quot;:&quot;is-style-default&quot;} --&gt;&lt;/p&gt;
&lt;figure class=&quot;wp-block-image size-large is-style-default&quot;&gt;&lt;img src=&quot;/assets/img/pexels/serverless-localstack.png&quot; alt=&quot;&quot; class=&quot;wp-image-1030&quot; /&gt;&lt;/figure&gt;
&lt;p&gt;&lt;!-- /wp:image --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Let's move on to our last &lt;a href=&quot;/concluding-serverless-journey&quot;&gt;article&lt;/a&gt; and see everything in action on AWS account.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;</content><author><name>Sarthak Makhija</name></author><category term="AWS Lambda" /><category term="Serverless" /><summary type="html">It is time to test our Serverless journey which started with a web application that involved AWS lambda, AWS API Gateway and AWS DynamoDB. By the end of this article we should be confident that our application works as it is supposed to. Let's introduce LocalStack.</summary></entry><entry><title type="html">Beginning Serverless Journey</title><link href="https://sarthakmakhija.github.io/beginning-serverless-journey/" rel="alternate" type="text/html" title="Beginning Serverless Journey" /><published>2020-03-10T00:00:00+05:30</published><updated>2020-03-10T00:00:00+05:30</updated><id>https://sarthakmakhija.github.io/beginning-serverless-journey</id><content type="html" xml:base="https://sarthakmakhija.github.io/beginning-serverless-journey/">&lt;p&gt;&lt;!-- wp:quote --&gt;&lt;/p&gt;
&lt;blockquote class=&quot;wp-block-quote&quot;&gt;&lt;p&gt;Serverless is a paradigm which lays its foundations on the fact that &quot;We don't have to provision and manage servers&quot;. &lt;/p&gt;
&lt;p&gt;This article series explores various aspects involved in a serverless application lifecycle including - development, testing and deployment.&lt;/p&gt;
&lt;p&gt;Our serverless journey which starts from building to deploying an application will be using multiple serverless components including AWS Lambda, AWS API Gateway, AWS DynamoDB, LocalStack and AWS CDK.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;!-- /wp:quote --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Let's deep dive step by step into what it takes to build a Serverless application.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:heading {&quot;level&quot;:4} --&gt;&lt;/p&gt;
&lt;h4&gt;Building a Serverless application&lt;/h4&gt;
&lt;p&gt;&lt;!-- /wp:heading --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Let's assume a hypothetical &quot;&lt;em&gt;Order Service&lt;/em&gt;&quot; that allows creation of an order and its retrieval by id.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;As a part of this article we will be building just one part of this service which will expose a REST API to allow users to &quot;&lt;em&gt;find an order&lt;/em&gt;&quot; by &quot;&lt;em&gt;orderId&lt;/em&gt;&quot;.  Below diagram highlights different AWS components involved in finding an order by its id.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:image {&quot;align&quot;:&quot;center&quot;,&quot;id&quot;:1126,&quot;sizeSlug&quot;:&quot;large&quot;,&quot;className&quot;:&quot;is-style-default&quot;} --&gt;&lt;/p&gt;
&lt;div class=&quot;wp-block-image is-style-default&quot;&gt;
&lt;figure class=&quot;aligncenter size-large&quot;&gt;&lt;img src=&quot;/assets/img/pexels/serverless-application.png&quot; alt=&quot;&quot; class=&quot;wp-image-1126&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:image --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;We will be using TypeScript for writing our Serverless application. Why Typescript? For a few reasons - &lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:list --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Small cold start time&lt;/li&gt;
&lt;li&gt;Supports static typing and type inference&lt;/li&gt;
&lt;li&gt;Existing Javascript libraries can be used with Typescript&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;!-- /wp:list --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;So, let's start building our application. &lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:heading {&quot;level&quot;:4} --&gt;&lt;/p&gt;
&lt;h4&gt;Step 1: Setting up the project&lt;/h4&gt;
&lt;p&gt;&lt;!-- /wp:heading --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Let's quickly setup our project -&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:list --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Install typescript globally by executing &lt;code&gt;npm install typescript -g&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Create a directory named &lt;code&gt;serverless-order-service&lt;/code&gt; representing our project&lt;/li&gt;
&lt;li&gt;Execute &lt;code&gt;npm init -y&lt;/code&gt; inside our project directory (&lt;code&gt;serverless-order-service&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Add typescript as a dependency by executing &lt;code&gt;npm install typescript --save&lt;/code&gt; inside our project directory&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;!-- /wp:list --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;As a final step, add &lt;code&gt;tsconfig.json&lt;/code&gt; with a very simple configuration as mentioned below -&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:preformatted --&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;wp-block-preformatted&quot;&gt;{
  &quot;compilerOptions&quot;: {
    &quot;noEmitOnError&quot;: true,
    &quot;moduleResolution&quot;: &quot;node&quot;,
    &quot;module&quot;: &quot;commonjs&quot;,
    &quot;target&quot;: &quot;es6&quot;,
    &quot;outDir&quot;: &quot;dist&quot;,
    &quot;inlineSourceMap&quot;: true
  }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:preformatted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;That should be it. Our project set up is done and we are ready to make our first commit.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:heading {&quot;level&quot;:4} --&gt;&lt;/p&gt;
&lt;h4&gt;Before we start coding&lt;/h4&gt;
&lt;p&gt;&lt;!-- /wp:heading --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Let's take a moment to think about the overall design of the project. &lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;This application is a classic web application which involves a REST API, a database and an object representing the persistent state of order. With this very small context, I feel it would not be unfair to organise the project in &lt;em&gt;Model-View-Controller&lt;/em&gt; fashion which means execution of a user request will involve the following components - &lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:image {&quot;align&quot;:&quot;center&quot;,&quot;id&quot;:1041,&quot;sizeSlug&quot;:&quot;large&quot;} --&gt;&lt;/p&gt;
&lt;div class=&quot;wp-block-image&quot;&gt;
&lt;figure class=&quot;aligncenter size-large&quot;&gt;&lt;img src=&quot;/assets/img/pexels/lambda-flow.png&quot; alt=&quot;&quot; class=&quot;wp-image-1041&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:image --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:heading {&quot;level&quot;:4} --&gt;&lt;/p&gt;
&lt;h4&gt;Step 2: Let's start with lambda handler&lt;/h4&gt;
&lt;p&gt;&lt;!-- /wp:heading --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Lambda handler is a function which will be invoked by &lt;em&gt;AWS Lambda Service&lt;/em&gt; in response to an event. An event could be - an object uploaded on an S3 bucket, an event on SQS or an https request via API gateway and many more. In our example a request to an API Gateway will be an event.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Before we start our lambda function let's install type definition for aws-lambda by executing - &lt;code&gt;npm install @types/aws-lambda --save-dev&lt;/code&gt; and create a commit.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;After the dependency is installed we are ready to code our handler. Let's put this in a file named &lt;code&gt;handler.ts&lt;/code&gt; under &lt;code&gt;src&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;import {APIGatewayEvent} from &quot;aws-lambda&quot;;
export const ordersHandler = async (event: APIGatewayEvent): Promise&amp;lt;any&gt; =&gt; {
    &lt;code style=&quot;color: darkorange&quot;&gt;//your code goes here&lt;/code&gt;
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;This is the simplest handler function that could be created at this stage. One thing to note is we are using the type &lt;em&gt;APIGatewayEvent&lt;/em&gt; imported from &lt;em&gt;&quot;aws-lambda&quot;&lt;/em&gt; to get type-safe events as parameter to handler function.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;We want to keep our handler function as thin as possible so we will delegate the request to a controller class which instead of taking &lt;em&gt;APIGatewayEvent&lt;/em&gt; will take a domain object that wraps &lt;em&gt;APIGatewayEvent&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;In this example, &lt;em&gt;OrderRequest&lt;/em&gt; is that domain object, effectively a wrapper over &lt;em&gt;APIGatewayEvent&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;import {APIGatewayEvent} from &quot;aws-lambda&quot;;

export const ordersHandler = async (event: APIGatewayEvent): Promise&amp;lt;any&gt; =&gt; {
    return new OrderController().handle(new OrderRequest(event)); &lt;code style=&quot;color: darkorange&quot;&gt;//invoke controller&lt;/code&gt;
};

export class OrderController {
    handle(orderRequest: OrderRequest) {
    }
}

export class OrderRequest {
    constructor(private readonly event: APIGatewayEvent) {
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Let's move OrderController and OrderRequest classes to &lt;em&gt;controller&lt;/em&gt; and &lt;em&gt;model&lt;/em&gt; packages (or directories) respectively and invoke OrderController from handler. This is how the handler function will look like after the classes have been moved.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;import {APIGatewayEvent} from &quot;aws-lambda&quot;;
import {OrderRequest}    from &quot;./model/OrderRequest&quot;;
import {OrderController} from &quot;./controller/OrderController&quot;;

export const ordersHandler = async (event: APIGatewayEvent): Promise&amp;lt;any&gt; =&gt; {
    return new OrderController().handle(new OrderRequest(event));
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;I think we are ready to make our next commit. I know we haven't written any unit tests but as far as this article is concerned, we will write unit tests before we start the next one.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:heading {&quot;level&quot;:4} --&gt;&lt;/p&gt;
&lt;h4&gt;Step 3: Let's jump into controller&lt;/h4&gt;
&lt;p&gt;&lt;!-- /wp:heading --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Controller is a class which will handle the incoming request and return an appropriate response. By this definition, controller will be expected to accept an OrderRequest and find an order by its id.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;import {OrderRequest} from &quot;../model/OrderRequest&quot;;

export class OrderController {

    handle(orderRequest: OrderRequest) {
       if (orderRequest.isAGetOrder()) {
         return this.findAnOrderBy(orderRequest.orderId())
       }
       return null;
    }

    private findAnOrderBy(id: string): Order {
        return null;
    }
}

export class Order {
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Few quick observations - &lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:list --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OrderRequest is the domain object which encapsulates APIGatewayEvent and provides domain methods like orderId(), isAGetOrder() without exposing &lt;em&gt;APIGatewayEvent&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Currently orderId() and isAGetOrder() methods of OrderRequest return fixed (or fake) values&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;!-- /wp:list --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Let's make a few quick changes in OrderController -&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:list --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Move Order class into model package&lt;/li&gt;
&lt;li&gt;Invoke Service method to find an order by its id&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;!-- /wp:list --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;This is how different classes look at this stage.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;text-decoration: underline;&quot;&gt;OrderController.ts&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;import {OrderRequest} from &quot;../model/OrderRequest&quot;;
import {Order}        from &quot;../model/Order&quot;;
import {OrderService} from &quot;../service/OrderService&quot;;

export class OrderController {
    private orderService: OrderService;

    constructor() {
        this.orderService = new OrderService();
    }

    handle(orderRequest: OrderRequest) {
       if (orderRequest.isAGetOrder()) {
         return this.findAnOrderBy(orderRequest.orderId())
       }
       return null;
    }

    private findAnOrderBy(id: string): Order {
        return this.orderService.findAnOrderBy(id); &lt;code style=&quot;color: darkorange&quot;&gt;//invoke service&lt;/code&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;span style=&quot;text-decoration: underline;&quot;&gt;OrderRequest.ts&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;import {APIGatewayEvent} from &quot;aws-lambda&quot;;

export class OrderRequest {
    constructor(private readonly event: APIGatewayEvent) {
    }

    isAGetOrder(): boolean {
       return true;
    }
    orderId(): string {
        return &quot;&quot;;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;span style=&quot;text-decoration: underline;&quot;&gt;OrderService.ts&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;export class OrderService {

    findAnOrderBy(id: string) {
        return null;
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:heading {&quot;level&quot;:4} --&gt;&lt;/p&gt;
&lt;h4&gt;Step 4: Let's jump into service&lt;/h4&gt;
&lt;p&gt;&lt;!-- /wp:heading --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Service layer will interact with repository to find an order by id. It doesn't look like service layer is really needed for this example, but let's proceed with it -&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;export class OrderService {
    private repository: OrderRepository;

    constructor() {
        this.repository = new OrderRepository();
    }

    findAnOrderBy(id: string) {
        return this.repository.findAnOrderBy(id); &lt;code style=&quot;color: darkorange&quot;&gt;//invoke repository&lt;/code&gt;
    }
}

export class OrderRepository {
    findAnOrderBy(id: string) {
        return null;
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Let's move OrderRepository into repository package.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:heading {&quot;level&quot;:4} --&gt;&lt;/p&gt;
&lt;h4&gt;Step 5: Let's jump into repository&lt;/h4&gt;
&lt;p&gt;&lt;!-- /wp:heading --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Repository will interact with our database which in this example is a DynamoDB and fetch an order by its id. Let's assume a table named &quot;&lt;em&gt;orders&lt;/em&gt;&quot; with &quot;&lt;em&gt;orderId&lt;/em&gt;&quot; as the HASH key. &lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;We will be using &quot;&lt;em&gt;aws-sdk&lt;/em&gt;&quot; for querying DynamoDB. &quot;aws-sdk&quot; is a dependency which is available in the runtime environment of lambda which means this dependency can be added as a &quot;&lt;em&gt;devDependency&lt;/em&gt;&quot;.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;So, let's add it as a &quot;devDependency&quot; by executing &lt;code&gt;npm install aws-sdk --save-dev&lt;/code&gt;. Let's also add type definitions for aws-sdk by executing &lt;code&gt;npm install @types/aws-sdk --save-dev&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Now we are ready to query &quot;orders&quot; table.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;import {DynamoDB} from &quot;aws-sdk&quot;
import {GetItemInput} from &quot;aws-sdk/clients/dynamodb&quot;;
import {Order} from &quot;../model/Order&quot;;

const dynamoDb = new DynamoDB({
    &quot;region&quot;: &quot;ap-south-1&quot;
});

export class OrderRepository {

    async findAnOrderBy(id: string) {
        const getItemInputOptions: GetItemInput = {
            TableName: &quot;orders&quot;,
            Key: {
                &quot;orderId&quot;: {S: id}
            }
        };
        const response = await dynamoDb.getItem(getItemInputOptions).promise();
        return response.Item;
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Few quick observations - &lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:list --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We have hard-coded the region and table name, which we might want to fetch from configuration / properties for below mentioned reasons -
&lt;ul&gt;
&lt;li&gt;if &lt;em&gt;region&lt;/em&gt; is different for actual deployment and integration testing (using localstack)&lt;/li&gt;
&lt;li&gt; if there are multiple deployment environments and dynamo table name is different for each environment
&lt;ul&gt;
&lt;li&gt;With DynamoDB lowest level of abstraction is a table, hence, we might need different table name for each environment&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Method name and return type of the method do not go hand-in-hand. We expect this method to return an &quot;&lt;em&gt;order&lt;/em&gt;&quot; but this method seems to be returning some type specified by &lt;em&gt;&quot;response.Item&quot;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;!-- /wp:list --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Let's quickly make a change to return &lt;em&gt;Order instead of response.Item. &lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;import {DynamoDB} from &quot;aws-sdk&quot;
import {GetItemInput} from &quot;aws-sdk/clients/dynamodb&quot;;
import {Order} from &quot;../model/Order&quot;;

const dynamoDb = new DynamoDB({
    &quot;region&quot;: &quot;ap-south-1&quot;
});

export class OrderRepository {

    async findAnOrderBy(id: string) {
        const getItemInputOptions: GetItemInput = {
            TableName: &quot;orders&quot;,
            Key: {
                &quot;orderId&quot;: {S: id}
            }
        };
        &lt;code style=&quot;color: darkorange&quot;&gt;//get an item from dynamoDb&lt;/code&gt;
        const response = await dynamoDb.getItem(getItemInputOptions).promise(); 
        return response.Item ? Order.from(response.Item) : null;
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;and this is how Order.ts looks like - &lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;import {DocumentClient} from &quot;aws-sdk/clients/dynamodb&quot;;

export class Order {
    static from(item: DocumentClient.AttributeMap): Order {
        return null;
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;This completes our repository. We still have some open items. Let's take them one by one - &lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:list --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pending implementation of &lt;em&gt;from()&lt;/em&gt; in &lt;em&gt;Order&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Pending implementation of &lt;em&gt;orderId()&lt;/em&gt; in &lt;em&gt;OrderRequest&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Pending changes relating to async/await in controller, service and handler&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;!-- /wp:list --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:heading {&quot;level&quot;:4} --&gt;&lt;/p&gt;
&lt;h4&gt;Step 6: Finishing Order class&lt;/h4&gt;
&lt;p&gt;&lt;!-- /wp:heading --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Order class provides a static method which accepts and instance of DocumentClient.AttributeMap and returns an instance of Order. To keep things simple, we will assume that an order has orderId and amount.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;import {DocumentClient} from &quot;aws-sdk/clients/dynamodb&quot;;

export class Order {  

    static from(item: DocumentClient.AttributeMap): Order {
        return new Order(item.orderId.S, Number(item.amount.N));
    }
    private constructor(private readonly orderId: string,
                        private readonly amount: number) {
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;AttributeMap within aws-sdk &lt;/code&gt;is defined as -&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;export type AttributeMap = {[key: string]: AttributeValue};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;and AttributeValue is an interface which is defined as -&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;export interface AttributeValue {
    S?: StringAttributeValue;
    N?: NumberAttributeValue;
  .....
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Hence, &lt;code&gt;item.orderId&lt;/code&gt; gives us an instance of &lt;code&gt;AttributeValue&lt;/code&gt; and then we use &lt;code&gt;.S or .N&lt;/code&gt; to get the corresponding value&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:heading {&quot;level&quot;:4} --&gt;&lt;/p&gt;
&lt;h4&gt;Step 7: Finishing OrderRequest class&lt;/h4&gt;
&lt;p&gt;&lt;!-- /wp:heading --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:list --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;isAGetOrder() should return TRUE given a GET request beginning with /orders as the path part&lt;/li&gt;
&lt;li&gt;orderId() should return the value of pathParameter &quot;orderId&quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;!-- /wp:list --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;import {APIGatewayEvent} from &quot;aws-lambda&quot;;

export class OrderRequest {
    constructor(private readonly event: APIGatewayEvent) {
    }

    isAGetOrder(): boolean {
        return this.event.httpMethod === &quot;GET&quot; &amp;amp;&amp;amp;
               this.event.path.startsWith(&quot;/orders&quot;) &amp;amp;&amp;amp;
               this.event.pathParameters.orderId != null;
    }
    orderId(): string {
        return this.event.pathParameters.orderId;
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:heading {&quot;level&quot;:4} --&gt;&lt;/p&gt;
&lt;h4&gt;Step 8: Introducing async/await in service and controller&lt;/h4&gt;
&lt;p&gt;&lt;!-- /wp:heading --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Let's introduce async and await in handler, controller and service.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;&lt;code style=&quot;color: darkorange&quot;&gt;//handler.ts&lt;/code&gt;
export const ordersHandler = async (event: APIGatewayEvent): Promise&amp;lt;any&gt; =&gt; {
    return await new OrderController().handle(new OrderRequest(event));
};

&lt;code style=&quot;color: darkorange&quot;&gt;//OrderController.ts&lt;/code&gt;
async handle(orderRequest: OrderRequest) {
    if (orderRequest.isAGetOrder()) {
        return await this.findAnOrderBy(orderRequest.orderId())
    }
    return null;
}

private async findAnOrderBy(id: string) {
    return await this.orderService.findAnOrderBy(id);
}

&lt;code style=&quot;color: darkorange&quot;&gt;//OrderService.ts&lt;/code&gt;
async findAnOrderBy(id: string) {
    return await this.repository.findAnOrderBy(id);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:heading {&quot;level&quot;:4} --&gt;&lt;/p&gt;
&lt;h4&gt;Step 9: Lambda response with API gateway&lt;/h4&gt;
&lt;p&gt;&lt;!-- /wp:heading --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;When AWS lambda works behind an API gateway, it is expected to return a response in a specific format. This looks like -&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;{
   &quot;statusCode&quot;: Http Status Code,
   &quot;body&quot;: Response body,
   &quot;headers&quot;: Response headers
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;It would be great if controller knows the least about this structure. All it should do is return a response with Order object. Let's create an abstraction which takes an object T and knows about the final HTTP response. Let's name this as &lt;em&gt;Response&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;export class Response&amp;lt;T&gt; {
    private constructor(readonly status: HttpStatus, readonly body?: T) {
    }

    static ok&amp;lt;T&gt;(status: HttpStatus, body?: T) {
        return new Response(status, body);
    }
    static notFound() {
        return new Response(HttpStatus.NOT_FOUND);
    }
}

export class HttpStatus {
    static readonly OK = &quot;200&quot;;
    static readonly NOT_FOUND = &quot;404&quot;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;With the introduction of Response, following will be the view of some classes - &lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;import {OrderRequest} from &quot;../model/OrderRequest&quot;;
import {OrderService} from &quot;../service/OrderService&quot;;

export class OrderController {
    private orderService: OrderService;

    constructor() {
        this.orderService = new OrderService();
    }

    async handle(orderRequest: OrderRequest): Promise&amp;lt;Response&amp;lt;Order | unknown&gt;&gt; {
        if (orderRequest.isAGetOrder()) {
            const order = await this.findAnOrderBy(orderRequest.orderId());
            return Response.ok&amp;lt;Order&gt;(HttpStatus.OK, order); &lt;code style=&quot;color: darkorange&quot;&gt;//return Ok&lt;/code&gt;
        }
        return Response.notFound(); &lt;code style=&quot;color: darkorange&quot;&gt;//return NotFound&lt;/code&gt;
    }

    private async findAnOrderBy(id: string) {
        return await this.orderService.findAnOrderBy(id);
    }
}

export class Response&amp;lt;T&gt; {
    private constructor(readonly status: HttpStatus, readonly body?: T) {
    }

    static ok&amp;lt;T&gt;(status: HttpStatus, body?: T) {
        return new Response(status, body);
    }
    static notFound() {
        return new Response(HttpStatus.NOT_FOUND);
    }
    get() {
        &lt;code style=&quot;color: darkorange&quot;&gt;//return JSON response&lt;/code&gt;
        return this.body === null ? {&quot;statusCode&quot;: this.status} : {
            &quot;statusCode&quot;: this.status,
            &quot;body&quot;: JSON.stringify(this.body)
        }
    }
}

export class HttpStatus {
    static readonly OK = &quot;200&quot;;
    static readonly NOT_FOUND = &quot;404&quot;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;If controller returns an instance of Response, handler code can be changed to invoke get() on the returned instance.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;import {APIGatewayEvent} from &quot;aws-lambda&quot;;
import {OrderRequest}    from &quot;./model/OrderRequest&quot;;
import {OrderController} from &quot;./controller/OrderController&quot;;

export const ordersHandler = async (event: APIGatewayEvent): Promise&amp;lt;any&gt; =&gt; {
    const response = await new OrderController().handle(new OrderRequest(event));
    return response.get();
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;That's it. We have connected all the pieces, yes without any form of tests.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:heading {&quot;level&quot;:4} --&gt;&lt;/p&gt;
&lt;h4&gt;Step 10: Adding unit tests&lt;/h4&gt;
&lt;p&gt;&lt;!-- /wp:heading --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Let's add a couple of unit tests before we close the article. I will add all the necessary unit tests offline and commit the code. Before we can start with tests let's add following dependencies -&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:list --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;npm install &lt;code&gt;jest&lt;/code&gt; --save-dev&lt;/li&gt;
&lt;li&gt;npm install &lt;code&gt;@types/jest&lt;/code&gt; --save-dev&lt;/li&gt;
&lt;li&gt;npm install &lt;code&gt;ts-jest&lt;/code&gt; --save-dev&lt;/li&gt;
&lt;li&gt;npm install &lt;code&gt;sinon&lt;/code&gt; --save-dev&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;!-- /wp:list --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;jest configuration in &lt;code&gt;jest.config.js&lt;/code&gt; -&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;module.exports = {
    &quot;testMatch&quot;: [
        &quot;**/__tests__/**/*.+(ts|tsx|js)&quot;,
        &quot;**/?(*.)+(spec|test).+(ts|tsx|js)&quot;
    ],
    &quot;transform&quot;: {
        &quot;^.+\\.(ts|tsx)$&quot;: &quot;ts-jest&quot;
    },
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;test script in &lt;code&gt;package.json&lt;/code&gt; -&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:preformatted --&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;wp-block-preformatted&quot;&gt;&quot;scripts&quot;: {
  &quot;test&quot;: &quot;jest test/**&quot;
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:preformatted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:heading {&quot;level&quot;:4} --&gt;&lt;/p&gt;
&lt;h4&gt;Controller unit tests&lt;/h4&gt;
&lt;p&gt;&lt;!-- /wp:heading --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Let's add our first test which attempts to validate the status for finding an order by its id.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;import {OrderController} from &quot;../../src/controller/OrderController&quot;;
import {OrderRequest} from &quot;../../src/model/OrderRequest&quot;;
import {APIGatewayEvent} from &quot;aws-lambda&quot;;
import {HttpStatus} from &quot;../../src/model/ModelAndResponseStatus&quot;;
import {OrderService} from &quot;../../src/service/OrderService&quot;;
import {Order} from &quot;../../src/model/Order&quot;;

import * as sinon from &quot;sinon&quot;;

test(&quot;should return Ok as the response status given a request to find an order by id&quot;, async () =&gt;{
    sinon.stub(OrderService.prototype, &quot;findAnOrderBy&quot;)
         .callsFake(() =&gt; sinon.mock(Order));

    const response = await new OrderController().handle(orderRequest(&quot;id-100&quot;));

    expect(response.status).toEqual(HttpStatus.OK);
});

afterEach(() =&gt; {
    sinon.restore();
});

const orderRequest = (id: string) =&gt; {
    const apiGatewayEvent: APIGatewayEvent = {
        httpMethod: &quot;GET&quot;,
        path: `/orders/${id}`,
        pathParameters: {
            &quot;orderId&quot;: id
        },
        body: null,
        isBase64Encoded: false,
        headers: {},
        multiValueHeaders: {},
        queryStringParameters: {},
        multiValueQueryStringParameters: {},
        stageVariables: {},
        requestContext: null,
        resource: &quot;&quot;
    };
    return new OrderRequest(apiGatewayEvent);
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;One quick observation -&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:list --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;apiGatewayEvent had to be constructed with all the attributes even though we needed only pathParameters because &lt;em&gt;APIGatewayEvent&lt;/em&gt; type mandates all the attributes&lt;/li&gt;
&lt;li&gt;visibility of status and model (in the next test) had to be changed from private to public to assert on these fields&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;!-- /wp:list --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Another test could be to check the order returned from controller given an id.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:code --&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;test(&quot;should return an order given a request to find an order by id&quot;, async () =&gt; {
    sinon.stub(OrderService.prototype, &quot;findAnOrderBy&quot;)
         .callsFake(() =&gt; new Order(&quot;id-100&quot;, 1445));

    const response = await new OrderController().handle(orderRequest(&quot;id-100&quot;));

    expect(response.body!!).toEqual(new Order(&quot;id-100&quot;, 1445));
});&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:code --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;I guess we are ready to do TDD as well for Serverless.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:heading {&quot;level&quot;:4} --&gt;&lt;/p&gt;
&lt;h4&gt;Summary&lt;/h4&gt;
&lt;p&gt;&lt;!-- /wp:heading --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Finally we have come to an end of our first article where we made an attempt to design a small part of a serverless application which uses AWS Lambda, API Gateway and DynamoDB.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;As a part of this application we have tried to draw some parallels with MVC design pattern and bring the same to the serverless world.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Items that we have left -&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:list --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Exception handling is missing&lt;/li&gt;
&lt;li&gt;Controller checks if the request is for getting an order. This if/else ladder will grow given the same lambda handles creation and deletion of orders.&lt;/li&gt;
&lt;li&gt;Every component is unit testable in itself, except Repository layer which needs dynamo db&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;!-- /wp:list --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;There is a lot of work still left before we can deploy the code -&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:list --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We need to have integration test(s) which can give us confidence if this entire application is actually working or not&lt;/li&gt;
&lt;li&gt;We need to integrate CDK (Cloud Development Kit) for deploying our infrastructure&lt;/li&gt;
&lt;li&gt;We need to have unit tests and snapshot tests for our CDK based infra code&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;!-- /wp:list --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Code is available &lt;a href=&quot;https://github.com/aws-articles/serverless-order-service&quot;&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Let's move on to our &lt;a href=&quot;/testing-serverless-journey&quot;&gt;next&lt;/a&gt; article which explores integration testing using Localstack for our serverless application.&lt;/p&gt;</content><author><name>Sarthak Makhija</name></author><category term="AWS Lambda" /><category term="Serverless" /><summary type="html">Serverless is a paradigm which lays its foundations on the fact that &quot;We don't have to provision and manage servers&quot;. Let's begin our Serverless journey which starts with building a Serverless application. After we have built an application we will proceed with testing it using LocalStack and finally deploying it using AWS CDK.</summary></entry><entry><title type="html">Invest In Blogging</title><link href="https://sarthakmakhija.github.io/invest-in-blogging/" rel="alternate" type="text/html" title="Invest In Blogging" /><published>2019-06-07T05:57:10+05:30</published><updated>2019-06-07T05:57:10+05:30</updated><id>https://sarthakmakhija.github.io/invest-in-blogging</id><content type="html" xml:base="https://sarthakmakhija.github.io/invest-in-blogging/">&lt;p&gt;&lt;!-- wp:quote --&gt;&lt;/p&gt;
&lt;blockquote class=&quot;wp-block-quote&quot;&gt;&lt;p&gt;We often have a lot to share with people, this could be our learnings, our opinions and our experiences. There are times when we feel the need to get our ideas validated or get feedback from people. These are definitely some of the reasons to invest in blogging and connect with community.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;!-- /wp:quote --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph {&quot;align&quot;:&quot;left&quot;} --&gt;&lt;/p&gt;
&lt;p style=&quot;text-align:left&quot;&gt;Let's see some reasons for investing in writing blogs.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:image {&quot;id&quot;:338,&quot;align&quot;:&quot;center&quot;,&quot;width&quot;:394,&quot;height&quot;:262} --&gt;&lt;/p&gt;
&lt;div class=&quot;wp-block-image&quot;&gt;
&lt;figure class=&quot;aligncenter is-resized&quot;&gt;&lt;img src=&quot;/assets/img/pexels/invest-in-blogging.jpg&quot; alt=&quot;Invest in blogging&quot; class=&quot;wp-image-338&quot; /&gt;&lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;&lt;!-- /wp:image --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:heading {&quot;level&quot;:3,&quot;align&quot;:&quot;left&quot;} --&gt;&lt;/p&gt;
&lt;h3 style=&quot;text-align:left&quot;&gt;Help people learn from your learning journey&lt;/h3&gt;
&lt;p&gt;&lt;!-- /wp:heading --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;There are times when we often feel &quot;it would have been great if someone had written an article to explain a concept&quot;, start writing if you have had this feeling. &lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Learning is like climbing a rock. While climbing, we always look at the tip of the rock just to realize it is too far away. What is also important is to realize that there are people who might have just started this journey and your &quot;learning journey&quot; could go a long way in helping them.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:heading {&quot;level&quot;:3} --&gt;&lt;/p&gt;
&lt;h3 id=&quot;mce_14&quot;&gt;Help people learn from your mistakes&lt;/h3&gt;
&lt;p&gt;&lt;!-- /wp:heading --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Share your mistakes with the community. We as a community learn from each other's mistakes and experiences and these things are really valuable. &lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Your blog on &quot;&lt;em&gt;Failing with Microservices&lt;/em&gt;&quot; could help me in avoiding some mistakes or at least rethink my design if I am starting with microservices.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:heading {&quot;level&quot;:3} --&gt;&lt;/p&gt;
&lt;h3&gt;Get feedback from community&lt;/h3&gt;
&lt;p&gt;&lt;!-- /wp:heading --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;There are a lot of things which help us grow as an individual and one of them is feedback or I should say &quot;&lt;em&gt;Constructive Feedback&lt;/em&gt;&quot;. Write to get feedback from community, to get their thoughts, to hear their experiences and to learn from all of these. Let's see how this could work. &lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Say, I am very excited to use Coroutines to build reactive streams in my next project and I share an article &quot;&lt;em&gt;Being Reactive with Kotlin Coroutines&lt;/em&gt;&quot; which talks about the basics of Coroutines and abstractions like &quot;&lt;em&gt;Channel&lt;/em&gt;&quot; to implement reactive streams. &lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;This article receives a lot of feedback and one of the feedback says - &lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:quote --&gt;&lt;/p&gt;
&lt;blockquote class=&quot;wp-block-quote&quot;&gt;&lt;p&gt;Hey, nicely put. I would suggest you to check this &lt;a href=&quot;https://github.com/Kotlin/kotlinx.coroutines/blob/master/reactive/coroutines-guide-reactive.md&quot;&gt;link.&lt;/a&gt; It says -&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&quot;There is no way to receive the elements from a channel again. The channel is closed when the producer coroutine is over and the attempt to receive from it again cannot receive anything.&quot;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You might also want to take a look at &lt;a href=&quot;https://github.com/Kotlin/kotlinx.coroutines/blob/master/reactive/kotlinx-coroutines-rx2&quot;&gt;kotlinx-coroutines-rx2.&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;!-- /wp:quote --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Now, this is important as it helps me understand a lot of dimensions including backpressure, hot and cold observables which I had not considered. Thanks to the feedback, I got pointed in the right direction.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph {&quot;align&quot;:&quot;center&quot;} --&gt;&lt;/p&gt;
&lt;p style=&quot;text-align:center&quot;&gt;&lt;strong&gt;. . . &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Investment is tricky and one expects a return from every investment. Let's see the overall &quot;&lt;em&gt;return over investment&lt;/em&gt;&quot; in blogging.&lt;em&gt; &lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:heading {&quot;level&quot;:3} --&gt;&lt;/p&gt;
&lt;h3 id=&quot;mce_16&quot;&gt;Solidifies your understanding&lt;/h3&gt;
&lt;p&gt;&lt;!-- /wp:heading --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Like we learn when we teach people, we also learn when we share our ideas with people. Blogging helps in solidifying our understanding and the reason I say this is - &lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:quote --&gt;&lt;/p&gt;
&lt;blockquote class=&quot;wp-block-quote&quot;&gt;&lt;p&gt;We try to communicate our ideas in the simplest possible manner to our readers. In order to do this, we choose to take small steps and each of these steps is well thought of and analyzed. Each step in turn teaches us something which improves our understanding.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;!-- /wp:quote --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;We were talking about &lt;em&gt;DSLs in Kotlin &lt;/em&gt;in one of the workshops and I happened to like the way that topic was built - &lt;em&gt;from lambdas to extension function to lambdas with receiver to invoke function&lt;/em&gt;. &lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;I decided to share the same in an article &lt;a href=&quot;https://dzone.com/articles/kotlin-dsl-basics&quot;&gt;Kotlin DSLs: The Basics&lt;/a&gt; and if I look back, I realize these two things - a workshop and an article have really helped me understand Kotlin DSLs well.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:heading {&quot;level&quot;:3} --&gt;&lt;/p&gt;
&lt;h3&gt;Increases your confidence&lt;/h3&gt;
&lt;p&gt;&lt;!-- /wp:heading --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;You are not afraid of reaching out to people and you are not the same person you used to be who would think &quot;&lt;em&gt;should I share this, people would already know it&quot;&lt;/em&gt;, &quot;&lt;em&gt;this tech was released 5 years back and I am writing about it now, does it make sense?&lt;/em&gt;&quot;. You become someone who would share his/her ideas with confidence.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:heading {&quot;level&quot;:3} --&gt;&lt;/p&gt;
&lt;h3&gt;Challenges you to write better every time&lt;/h3&gt;
&lt;p&gt;&lt;!-- /wp:heading --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;You challenge yourself to write better every time. You tend to experiment with different styles of writing in an attempt to communicate your ideas clearly and connect with people better.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:heading {&quot;level&quot;:3} --&gt;&lt;/p&gt;
&lt;h3&gt; Makes you a better articulator of thoughts&lt;/h3&gt;
&lt;p&gt;&lt;!-- /wp:heading --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;You tend to wear a writer's hat every time you sit to share something. An attempt is made is to talk to the readers through your article which acts like a story. You read your article hundreds of times in an attempt to articulate better. All this does is make you a better articulator of thoughts.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:heading {&quot;level&quot;:3} --&gt;&lt;/p&gt;
&lt;h3&gt;Builds your network&lt;/h3&gt;
&lt;p&gt;&lt;!-- /wp:heading --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Investment in blogging is a great way to build network, you get to know people and people get to know you. &lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Networking is very powerful and truly magical, it can surprise you with a lot of opportunities which you might not imagine. You might get to speak at conferences, work with people that you follow and many more. &lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Investment in blogging is really a simple way to build network !!&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:heading {&quot;level&quot;:3} --&gt;&lt;/p&gt;
&lt;h3 id=&quot;mce_0&quot;&gt;Builds your brand&lt;/h3&gt;
&lt;p&gt;&lt;!-- /wp:heading --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Investment in blogging acts as a great tool to build your and your organization's brand.&lt;/p&gt;
&lt;p&gt;&lt;!-- /wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:quote --&gt;&lt;/p&gt;
&lt;blockquote class=&quot;wp-block-quote&quot;&gt;&lt;p&gt;&quot;&lt;em&gt;Return over investment in blogging&lt;/em&gt;&quot; looks promising but we need to be aware of the fact that a return might not be immediate for an investment. &lt;/p&gt;
&lt;p&gt;Making an investment is the first step and usually the most difficult step, rest is all about return ;-)&lt;/p&gt;
&lt;p&gt;Take your first step with blogging, share your ideas / opinions / thoughts with the community. It is a great tool which does a lot of magic, has got great return and more importantly &quot;&lt;em&gt;it is fun&lt;/em&gt;&quot;. &lt;/p&gt;
&lt;p&gt;Invest in blogging.&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;&lt;br /&gt;&lt;/cite&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;!-- /wp:quote --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- wp:image {&quot;id&quot;:462,&quot;align&quot;:&quot;center&quot;,&quot;width&quot;:537,&quot;height&quot;:272} --&gt;&lt;/p&gt;
&lt;h3&gt;Summary&lt;/h3&gt;
&lt;div class=&quot;wp-block-image&quot;&gt;
&lt;figure class=&quot;aligncenter is-resized&quot;&gt;&lt;img src=&quot;/assets/img/pexels/benefits-of-blogging.jpg&quot; alt=&quot;Benefits of Blogging&quot; class=&quot;wp-image-462&quot; /&gt;&lt;br /&gt;
&lt;/figure&gt;
&lt;/div&gt;</content><author><name>Sarthak Makhija</name></author><category term="Blogging" /><summary type="html">We often have a lot to share with people, this could be our learnings, our opinions and our experiences. There are times when we feel the need to get our ideas validated or get feedback from people. These are definitely some of the reasons to invest in blogging and connect with community.</summary></entry><entry><title type="html">Kotlin DSL</title><link href="https://sarthakmakhija.github.io/kotlin-dsl/" rel="alternate" type="text/html" title="Kotlin DSL" /><published>2018-05-27T17:29:36+05:30</published><updated>2018-05-27T17:29:36+05:30</updated><id>https://sarthakmakhija.github.io/kotlin-dsl</id><content type="html" xml:base="https://sarthakmakhija.github.io/kotlin-dsl/">&lt;p style=&quot;text-align: left;&quot;&gt;A domain-specific language (DSL) is a computer language specialized to a particular application domain. This is in contrast to a general-purpose language (GPL), which is broadly applicable across domains. There are a wide variety of DSLs, ranging from widely used languages for common domains, such as HTML for web pages, down to languages used by only one or a few pieces of software.&lt;/p&gt;
&lt;h3&gt;Kotlin DSL&lt;/h3&gt;
&lt;p style=&quot;text-align: left;&quot;&gt;Kotlin provides first class support for DSL which allows us to express domain-specific operations much more concisely than an equivalent piece of code in a general-purpose language.&lt;/p&gt;
&lt;p&gt;Let's try and build a simple DSL in Kotlin -&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;lang:java decode:true&quot; title=&quot;DSL&quot;&gt;dependencies {
   compile(&quot;io.arrow-kt:arrow-data:0.7.1&quot;)
   compile(&quot;io.arrow-kt:arrow-instances-core:0.7.1&quot;)
   testCompile(&quot;io.kotlintest:kotlintest-runner-junit5:3.1.0&quot;)
}&lt;/pre&gt;&lt;/div&gt;
&lt;p style=&quot;text-align: left;&quot;&gt;This should be familiar to people using &lt;em&gt;gradle&lt;/em&gt; as their build tool. Above DSL specifies compile and testCompile dependencies for a gradle project in very concise and expressive form.&lt;/p&gt;
&lt;h3&gt;How does Kotlin support DSL&lt;/h3&gt;
&lt;p&gt;Before we get in to Kotlin's support for DSL, let's look at lambdas in Kotlin.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;lang:java decode:true&quot; title=&quot;Lambda in Kotlin&quot;&gt;fun buildString(action: (StringBuilder) -&amp;gt; Unit): String {
   val sb = StringBuilder()
   action(sb)
   return sb.toString()
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;buildString() takes a lambda as a parameter (called action) and invokes it by passing an instance of StringBuilder. Any client code which invokes buildString() will look like the below code -&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;lang:java decode:true&quot; title=&quot;Invoking buildString&quot;&gt;val str = buildString {
    it.append(&quot;Hello&quot;)
    it.append(&quot; &quot;)
    it.append(&quot;World&quot;)
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A few things to note here -&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;buildString() takes lambda as the last parameter. If a function takes lambda as the last parameter, Kotlin allows you to invoke the function using braces { .. }, no need of using parentheses&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;it &lt;/strong&gt;is the implicit parameter available in lambda body which is an instance of StringBuilder in this example&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This information is good enough to write a &lt;em&gt;gradle dependencies DSL.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;First Attempt at DSL&lt;/h3&gt;
&lt;p&gt;In order to build a gradle dependencies DSL we &lt;em&gt;need a function called dependencies&lt;/em&gt; which should take a lambda of type T as a parameter where T provides compile and testCompile functions.&lt;/p&gt;
&lt;p&gt;Let's try -&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;lang:java decode:true&quot;&gt;fun dependencies(action: (DependencyHandler) -&amp;gt; Unit): DependencyHandler {
    val dependencies = DependencyHandler()
    action(dependencies)
    return dependencies
}

class DependencyHandler {
    fun compile(coordinate: String){
        &lt;code style=&quot;color: darkorange&quot;&gt;//add coordinate to some collection&lt;/code&gt;
    }
    fun testCompile(coordinate: String){
        &lt;code style=&quot;color: darkorange&quot;&gt;//add coordinate to some collection&lt;/code&gt;
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;dependencies is a simple function which takes a lambda accepting an instance of DependencyHandler as an parameter and returning Unit. DependencyHandler is the type T which has compile and testCompile functions.&lt;/p&gt;
&lt;p&gt;Client code for the above concept will look like -&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;lang:java decode:true&quot;&gt;dependencies {
    it.compile(&quot;&quot;) &lt;code style=&quot;color: darkorange&quot;&gt;//it is an instance of DependencyHandler&lt;/code&gt;
    it.testCompile(&quot;&quot;)
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Are we done? Not really. The problem is the implicit parameter &lt;strong&gt;it &lt;/strong&gt;used in the client code. Can we remove &lt;strong&gt;it&lt;/strong&gt;? In order to remove implicit parameter, we need to look at &quot;Lambda With Receiver&quot;.&lt;/p&gt;
&lt;h3&gt;Lambda With Receiver&lt;/h3&gt;
&lt;p&gt;Receiver is a simple type in Kotlin which is extended.&lt;/p&gt;
&lt;p&gt;Let's see this with an example -&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;lang:default decode:true&quot;&gt;fun String.lastChar() : Char =
                   this.toCharArray().get(this.length - 1)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We have extended String to have lastChar() as a function which means we can always invoke it as -&lt;/p&gt;
&lt;pre class=&quot;lang:default decode:true &quot;&gt;&quot;Kotlin&quot;.lastChar()&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Here, &lt;span style=&quot;text-decoration: underline;&quot;&gt;String is the receiver type&lt;/span&gt; and &lt;span style=&quot;text-decoration: underline;&quot;&gt;this&lt;/span&gt; used in the body of lastChar() is the receiver object. &lt;/em&gt;Can we combine these 2 concepts - lambda and receiver?&lt;/p&gt;
&lt;p&gt;Let's rewrite our buildString function using lambda with receiver -&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;lang:java decode:true &quot;&gt;fun buildString(action: StringBuilder.() -&amp;gt; Unit): String {
    val sb = StringBuilder()
    sb.action()
    return sb.toString()
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A few things to note here -&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;buildString() takes a lambda with receiver as an parameter&lt;/li&gt;
&lt;li&gt;StringBuilder is the receiver type in the lambda&lt;/li&gt;
&lt;li&gt;the way we invoke action function is different this time. Because &lt;strong&gt;action&lt;/strong&gt; is an extension function on StringBuilder we invoke it using &lt;strong&gt;sb.action()&lt;/strong&gt;, where sb is an instance of StringBuilder&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let's create a client of buildString function -&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;lang:java decode:true&quot;&gt;val str = buildString {
    this.append(&quot;Hello&quot;) &lt;code style=&quot;color: darkorange&quot;&gt;//this here is an instance of StringBuilder&lt;/code&gt;
    append(&quot; &quot;)
    append(&quot;World&quot;)
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Isn't this brilliant? Client code will always have access to &lt;strong&gt;this&lt;/strong&gt; while invoking a function which takes &lt;em&gt;lambda with receiver&lt;/em&gt; as a parameter.&lt;/p&gt;
&lt;p&gt;Shall we rewrite our &lt;em&gt;gradle&lt;/em&gt; &lt;em&gt;dependencies DSL&lt;/em&gt; code?&lt;/p&gt;
&lt;h3&gt;Another Attempt at DSL&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;lang:java decode:true&quot;&gt;fun dependencies(action: DependencyHandler.() -&amp;gt; Unit): DependencyHandler {
    val dependencies = DependencyHandler()
    dependencies.action()
    return dependencies
}

class DependencyHandler {
    fun compile(coordinate: String){
        &lt;code style=&quot;color: darkorange&quot;&gt;//add coordinate to some collection&lt;/code&gt;
    }
    fun testCompile(coordinate: String){
        &lt;code style=&quot;color: darkorange&quot;&gt;//add coordinate to some collection&lt;/code&gt;
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The only change we have done here is in &lt;em&gt;dependencies&lt;/em&gt; function which &lt;em&gt;takes a lambda with receiver as the parameter&lt;/em&gt;. &lt;em&gt;DependencyHandler is the receiver type&lt;/em&gt; in &lt;em&gt;action&lt;/em&gt; parameter which means the &lt;em&gt;client code will always have access to the instance of DependencyHandler.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Let's see the client code -&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;lang:java decode:true&quot;&gt;dependencies {
    compile(&quot;&quot;) &lt;code style=&quot;color: darkorange&quot;&gt;//same as this.compile(&quot;&quot;)&lt;/code&gt;
    testCompile(&quot;&quot;)
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We are  able to create a DSL using &lt;em&gt;Lambda with Receiver&lt;/em&gt; as a parameter to a function.&lt;/p&gt;
&lt;h3&gt;Operator Function invoke()&lt;/h3&gt;
&lt;p&gt;Kotlin provides an interesting function called &lt;strong&gt;invoke&lt;/strong&gt; which is an operator function. Specifying invoke operator on a class allows it to be called on &lt;strong&gt;any instances of the class without a method name&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Let's see this in action -&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;lang:java decode:true &quot;&gt;class Greeter(val greeting: String) {
    operator fun invoke(name: String) {
        println(&quot;$greeting $name&quot;)
    }
}

fun main(args: Array&amp;lt;String&amp;gt;) {
    val greeter = Greeter(greeting = &quot;Welcome&quot;)
    greeter(name = &quot;Kotlin&quot;)  &lt;code style=&quot;color: darkorange&quot;&gt;//this calls the invoke function which takes String as a parameter&lt;/code&gt;
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A few things to note about &lt;strong&gt;invoke()&lt;/strong&gt; here -&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;is an operator function&lt;/li&gt;
&lt;li&gt;takes parameter&lt;/li&gt;
&lt;li&gt;can be overloaded&lt;/li&gt;
&lt;li&gt;is being called on the instance of Greeter class without method name&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let's use &lt;strong&gt;invoke&lt;/strong&gt; in building DSL -&lt;/p&gt;
&lt;h3&gt;Building DSL using invoke function&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;lang:java decode:true&quot;&gt;class DependencyHandler {
    fun compile(coordinate: String){
        &lt;code style=&quot;color: darkorange&quot;&gt;//add coordinate to some collection&lt;/code&gt;
    }
    fun testCompile(coordinate: String){
        &lt;code style=&quot;color: darkorange&quot;&gt;//add coordinate to some collection&lt;/code&gt;
    }
    operator fun invoke(action: DependencyHandler.() -&amp;gt; Unit): DependencyHandler {
        this.action()
        return this
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We have defined an &lt;em&gt;operator function in DependencyHandler which takes a lambda with receiver as a parameter&lt;/em&gt;. This means &lt;strong&gt;invoke&lt;/strong&gt; will automatically be called on instance(s) of DependencyHandler and client code will have access to instance of DependencyHandler.&lt;/p&gt;
&lt;p&gt;Let's write the client code -&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;lang:java decode:true&quot;&gt;val dependencies = DependencyHandler()
dependencies { //as good as dependencies.invoke(..)
   compile(&quot;&quot;)
   testCompile(&quot;&quot;)
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;invoke() can come in handy while building DSL.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Kotlin provides a first class support for DSL which is type safe&lt;/li&gt;
&lt;li&gt;One can create a DSL in Kotlin using -
&lt;ul&gt;
&lt;li&gt;Lambda as function parameters&lt;/li&gt;
&lt;li&gt;Lambda With Receiver as function parameter&lt;/li&gt;
&lt;li&gt;operator function invoke along with Lambda With Receiver as function parameter&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;References&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Kotlin In Action&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Sarthak Makhija</name></author><category term="Domain Specific Language" /><category term="DSL" /><category term="Kotlin" /><summary type="html">A domain-specific language (DSL) is a computer language specialized to a particular application domain. This is in contrast to a general-purpose language (GPL), which is broadly applicable across domains. There are a wide variety of DSLs, ranging from widely used languages for common domains, such as HTML for web pages, down to languages used by only one or a few pieces of software. Let's explore DSL in Kotlin together.</summary></entry><entry><title type="html">Kotlin Wishlist for Java</title><link href="https://sarthakmakhija.github.io/kotlin-wishlist-for-java/" rel="alternate" type="text/html" title="Kotlin Wishlist for Java" /><published>2018-04-20T10:50:36+05:30</published><updated>2018-04-20T10:50:36+05:30</updated><id>https://sarthakmakhija.github.io/kotlin-wishlist-for-java</id><content type="html" xml:base="https://sarthakmakhija.github.io/kotlin-wishlist-for-java/">&lt;p&gt;There is no doubt that Java has enjoyed a superior position when it comes to programming languages and is considered as one of the most important languages for development. However, there have been a number of languages developed on top of the JVM, like &lt;a href=&quot;https://kotlinlang.org/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Kotlin&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Kotlin is a statically typed programming language for modern multi-platform applications. While I have been a Java developer for quite a long while, working on a project &lt;a href=&quot;https://github.com/dataanon/data-anon&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;data-anonymization&lt;/a&gt; made me feel that there are things that Java should consider importing from Kotlin.&lt;/p&gt;
&lt;p&gt;These are some of the Kotlin features that I would love to see making a place in Java.&lt;/p&gt;
&lt;h3&gt;Promote Immutability&lt;/h3&gt;
&lt;p&gt;Java 9 promotes immutability by introducing factory methods to create collections. It would be great to see immutable collections embedded in the language, rather than relying on wrappers to generate immutable collections. &lt;em&gt;existingDepartments()&lt;/em&gt; is a function that returns an immutable list of Strings in Kotlin.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;lang:default decode:true &quot;&gt;&lt;code style=&quot;color: darkorange&quot;&gt;//Kotlin&lt;/code&gt;
fun existingDepartments(): List =
    listOf(&quot;Human Assets&quot;, &quot;Learning &amp; Development&quot;, &quot;Research&quot;)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Java 9 comes closest to returning an immutable list by throwing an UnsupportedOperationException when an attempt is made to add or remove an element from the list. It would be great to have a separate hierarchy of mutable and immutable collections and avoid exposing add/remove or any other mutating methods from immutable collections.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;lang:java decode:true &quot;&gt;&lt;code style=&quot;color: darkorange&quot;&gt;//pre Java 8&lt;/code&gt;
public List existingDepartments() {
    return new ArrayList();
}
&lt;code style=&quot;color: darkorange&quot;&gt;//Java 8&lt;/code&gt;
public List existingDepartments() {
    return Stream.of(&quot;Human Assets&quot;, &quot;Learning &amp; Development&quot;, &quot;Research&quot;)
                 .collect(Collectors.toList());
}
&lt;code style=&quot;color: darkorange&quot;&gt;//Java 9&lt;/code&gt;
public List existingDepartments() {
    return List.of(&quot;Human Assets&quot;, 
                   &quot;Learning &amp; Development&quot;,
                   &quot;Research&quot;);
}&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;&lt;p&gt;Being more explicit about immutable collections and letting immutable collections speak out loud for themselves should be given preference over exposing methods and throwing UnsupportedOperationExceptions&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3&gt;Method Parameters Should Be Final by Default&lt;/h3&gt;
&lt;p&gt;With an intent to promote immutability and avoid errors because of mutation, it might be worth to at least giving a thought to making method parameters final by default.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;lang:default decode:true &quot;&gt;&lt;code style=&quot;color: darkorange&quot;&gt;//Kotlin&lt;/code&gt;
fun add (augend: Int, addend: Int) = augend + addend&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Parameters for the &lt;em&gt;add() &lt;/em&gt;function are val by default cannot be changed, which means as a client of any function, I can rest assured that the function is not changing the arguments (&lt;em&gt;not to be confused with object mutation&lt;/em&gt;) that are passed to it.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Making method parameters final by default might and will most likely break existing code bases on Java upgrades but is worth giving a thought&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3&gt;Handle NULL at Compile Time&lt;/h3&gt;
&lt;p&gt;Every Java developer is bound to know the infamous NullPointerException. Kotlin took a major step by handling NULLs at compile time. Everything is non-null be default until it is explicitly stated.&lt;/p&gt;
&lt;p&gt;Did Java 8 not introduce Optional for the very same reason ? Let's see with an example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;lang:default decode:true &quot;&gt;&lt;code style=&quot;color: darkorange&quot;&gt;//Kotlin&lt;/code&gt;
class Employee(private val id: Int, private val department: Department?) {
    fun departmentName() = department?.name ?: &quot;Unassigned&quot;
}
class Department(val name: String)
&lt;code style=&quot;color: darkorange&quot;&gt;
/**
    Employee needs a non-nullable &quot;id&quot; and an optional department to be constructed.
    val employee = Employee(null, null); &amp;lt;b&amp;gt; Compile Time Error &amp;lt;/b&amp;gt;
**/&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The&lt;em&gt; Employee&lt;/em&gt; class has a primary constructor with a &lt;em&gt;non-nullable id and an optional (nullable) department&lt;/em&gt;. Passing null for the id will result in a compile time error.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;departmentName() &lt;/em&gt;function accesses the name property of Department using the optional operator &lt;strong&gt;?&lt;/strong&gt; on the nullable field. If department is null, name will not be accessed and the expression on the left-hand side &lt;em&gt;[department?.name]&lt;/em&gt; will return null. The &lt;em&gt;Elvis operator &lt;/em&gt;&lt;strong&gt;?:&lt;/strong&gt; will return the right hand side (&lt;em&gt;&quot;Unassigned&quot;&lt;/em&gt;) if the left-hand side of the expression is null.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;lang:default decode:true &quot;&gt;&lt;code style=&quot;color: darkorange&quot;&gt;//Java 8&lt;/code&gt;
class Employee {
    private Integer id;
    private Optional department

    Employee(Integer id, Optional department){
       this.id = id;
       this.department = department;
    }
    public String departmentName() {
       return department.orElse(&quot;Unassigned&quot;);
    }
}
&lt;code style=&quot;color: darkorange&quot;&gt;
/**
    Employee needs a non-nullable &quot;id&quot; and an optional department to be constructed.
    Employee employee = new Employee(null, null); &amp;lt;b&amp;gt;NPE !!!&amp;lt;/b&amp;gt;
**&lt;/code&gt;/&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Optional will not protect the code from NPE, but Optional has its advantages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It makes the domain model clear. The &lt;em&gt;Employee&lt;/em&gt; class has an optional department, which is good enough to conclude that every employee may not be assigned a department&lt;/li&gt;
&lt;li&gt;It promotes composability as in the &lt;em&gt;departmentName()&lt;/em&gt; method&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;&lt;p&gt;Handling NULLs at compile time should result in cleaner code by removing unnecessary NULL checks in the form of an if statement, Objects.requireNonNull, Preconditions.checkNotNull, any other form&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;To keep things simple, department was passed in to the constructor even though this is an optional attribute.&lt;/p&gt;
&lt;h3&gt;Improve Lambdas&lt;/h3&gt;
&lt;p&gt;Java 8 introduced lambdas, which are built on top of a functional interface and a functional descriptor, meaning every lambda expression will map to the signature of an abstract method defined in that functional interface. This effectively means it is a mandate to have an interface (Functional Interface) with only one abstract method (Functional Descriptor) to create a lambda expression.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;lang:default decode:true &quot;&gt;&lt;code style=&quot;color: darkorange&quot;&gt;//Kotlin&lt;/code&gt;
val isPositive: (Int) -&amp;gt; Boolean = { it &amp;gt; 0 }
OR,
val isPositive: (Int) -&amp;gt; Boolean = { num &amp;gt; 0 }
OR,
val isPositive: (Int) -&amp;gt; Boolean = { num: Int &amp;gt; 0 }

&lt;code style=&quot;color: darkorange&quot;&gt;//Usage&lt;/code&gt;
isPositive(10) returns true
isPositive(-1) returns false&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Above, the variable&lt;em&gt; isPositive &lt;/em&gt;is &lt;em&gt;a function&lt;/em&gt; that takes an Int as an argument and returns a Boolean. The value of this variable is a function definition or a lambda defined in braces, which checks that the passed argument is greater than zero.&lt;/p&gt;
&lt;p&gt;Whereas, as seen in Java below, &lt;em&gt;Predicate&lt;/em&gt; is a functional interface containing an abstract method &lt;em&gt;test()&lt;/em&gt; — which takes an argument of type T and returns a boolean.&lt;/p&gt;
&lt;p&gt;So, &lt;em&gt;isPositive&lt;/em&gt; takes an argument of type Integer and checks that it is greater than zero. In order to use it, we need to invoke the &lt;em&gt;test()&lt;/em&gt; method on &lt;em&gt;isPositive&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;lang:default decode:true &quot;&gt;&lt;code style=&quot;color: darkorange&quot;&gt;//Java 8&lt;/code&gt;
private Predicate&amp;lt;Integer&amp;gt; isPositive = (Integer arg) -&amp;gt; arg &amp;gt; 0;

&lt;code style=&quot;color: darkorange&quot;&gt;//Usage&lt;/code&gt;
isPositive.test(10) returns true
isPositive.test(-1) returns false

@FunctionalInterface
public interface Predicate&amp;lt;T&amp;gt; {
    boolean test(T t);
}&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;&lt;p&gt;Lambdas should be independent of functional interfaces and their functional descriptors&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3&gt;Support Extension Functions&lt;/h3&gt;
&lt;p&gt;Kotlin supports extension functions, which provide the ability to extend a class with new functionality without having to inherit from the class or use any type of design pattern, such as Decorator.&lt;/p&gt;
&lt;p&gt;Let's write an extension function to return the last character of a String, meaning &lt;em&gt;&quot;Kotin&quot;.lastChar() will return 'n'.&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;lang:default decode:true &quot;&gt;&lt;code style=&quot;color: darkorange&quot;&gt;//Kotlin&lt;/code&gt;
fun String.lastChar() = this.toCharArray()[this.length - 1]
&lt;code style=&quot;color: darkorange&quot;&gt;
/**
    Extension functions are of the form -
    fun &amp;lt;ReceiverObject&amp;gt;.function_name() = body
    OR,
    fun &amp;lt;ReceiverObject&amp;gt;.function_name(arg1: Type1, ... argN: TypeN) = body
**/&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, &lt;em&gt;lastChar()&lt;/em&gt; is an extension function defined on String, which is called a receiver object. This function can now be invoked as &lt;em&gt;&quot;Kotlin&quot;.lastChar().&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Extension functions provide an ability to extend a class with new functionalities without inheritance or any other design pattern&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3&gt;Tail Recursion&lt;/h3&gt;
&lt;p&gt;Kotlin provides support for &lt;a href=&quot;https://kotlinlang.org/docs/reference/functions.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Tail-recursion&lt;/a&gt;. Tail-recursion is a form of recursion in which the recursive calls are the last instructions in the function (tail). In this way, we don't care about previous values, and one stack frame suffices for all of the recursive calls; tail-recursion is one way of optimizing recursive algorithms.&lt;/p&gt;
&lt;p&gt;The other advantage/optimization is that there is an easy way to transform a tail-recursive algorithm to an equivalent one that uses iteration instead of recursion.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;lang:default decode:true &quot;&gt;&lt;code style=&quot;color: darkorange&quot;&gt;//Kotlin&lt;/code&gt;
fun factorialTco(val: Int): Int {
    tailrec fun factorial(n: Int, acc: Int): Int = if ( n == 1 ) acc else factorial(n - 1, acc * n)
  return  factorial(val, acc = 1)
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When a function is marked with the &lt;em&gt;tailrec&lt;/em&gt; modifier and meets the required form, the compiler optimizes out the recursion, leaving behind a fast and efficient loop-based version instead.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Effectively, a tail-recursive function can execute in constant stack space, so it's really just another formulation of an iterative process&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Java does not directly support tail-call optimization at the compiler level, but one can use &lt;em&gt;&lt;a href=&quot;http://blog.agiledeveloper.com/2013/01/functional-programming-in-java-is-quite.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;lambda expressions&lt;/a&gt;&lt;/em&gt; to implement it. It would be nice to see TCO at the compiler level.&lt;/p&gt;
&lt;h2&gt;Miscellaneous&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Remove inherent duplication [new, return, semicolon]: &lt;/strong&gt;Kotlin does not require &lt;strong&gt;new&lt;/strong&gt; to create an instance. It still needs a &lt;strong&gt;return &lt;/strong&gt;if a function is treated as a statement instead of an expression.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;lang:default decode:true &quot;&gt;&lt;code style=&quot;color: darkorange&quot;&gt;//Kotlin&lt;/code&gt;
class Employee(private val id: Int, private val department: Department?) {
    &lt;code style=&quot;color: darkorange&quot;&gt;//no return&lt;/code&gt;
    fun departmentNameWithoutReturn() = department?.name ?: &quot;Unassigned&quot;
    &lt;code style=&quot;color: darkorange&quot;&gt;//return is needed if a function is treated as a statmentrather than an expression&lt;/code&gt;
    fun departmentNameWithoutReturn() {
        val departmentName = department?.name ?: &quot;Unassigned&quot;
        return departmentName
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Singleton Classes&lt;/strong&gt;: It would be great to see an easier way to create singleton classes in Java. An equivalent syntax in Kotlin is seen below.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;lang:default decode:true &quot;&gt;//Kotlin
object DataProviderManager {
    fun registerDataProvider(provider: DataProvider) {
        &lt;code style=&quot;color: darkorange&quot;&gt;// ...&lt;/code&gt;
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Immutable Classes&lt;/strong&gt;: It would be good to see something like the &lt;strong&gt;readonly&lt;/strong&gt;/&lt;strong&gt;immutable &lt;/strong&gt;modifier to create an immutable class. The below mentioned code snippet is simply a thought (not available in Kotlin or Java).&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;lang:default decode:true &quot;&gt;&lt;code style=&quot;color: darkorange&quot;&gt;//Hypothetical [Not available so far]&lt;/code&gt;
immutable class User(private val name: String, private val id: Int)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;In conclusion&lt;/strong&gt;, as developers, we will always make mistakes (skipping NULL checks, mutating a collection, etc.), but providing such features at the language level will make our lives easier and prevent mistakes.&lt;/p&gt;</content><author><name>Sarthak Makhija</name></author><category term="Kotlin" /><summary type="html">There is no doubt that Java has enjoyed a superior position when it comes to programming languages and is considered as one of the most important languages for development. However, there have been a number of languages developed on top of the JVM like Kotlin. After working on a project named &quot;data-anonymization&quot; I realized that there are things that Java should consider importing from Kotlin.</summary></entry><entry><title type="html">Let’s deal with Legacy Code</title><link href="https://sarthakmakhija.github.io/lets-deal-with-legacy-code/" rel="alternate" type="text/html" title="Let’s deal with Legacy Code" /><published>2018-04-12T19:58:25+05:30</published><updated>2018-04-12T19:58:25+05:30</updated><id>https://sarthakmakhija.github.io/lets-deal-with-legacy-code</id><content type="html" xml:base="https://sarthakmakhija.github.io/lets-deal-with-legacy-code/">&lt;p id=&quot;d8ad&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;This article is in continuation with the &lt;a href=&quot;/lets-define-legacy-code/&quot;&gt;previous article&lt;/a&gt; where we defined some of the key aspects of Legacy Code. In this article we will take a Legacy code and add a new feature to it.&lt;/p&gt;
&lt;p id=&quot;bec2&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Before we begin with an example, let’s take a moment to understand &lt;em class=&quot;markup--em markup--p-em&quot;&gt;Broken Window Theory.&lt;/em&gt;&lt;/p&gt;
&lt;p class=&quot;align-center&quot;&gt;&lt;img class=&quot;aligncenter wp-image-88 size-medium&quot; title=&quot;Broken Window Theory&quot; src=&quot;/assets/img/pexels/broken-window.jpeg&quot; alt=&quot;Broken Window Theory&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;0735&quot; class=&quot;graf graf--h4 graf-after--figure&quot;&gt;Broken Window Theory&lt;/h4&gt;
&lt;p id=&quot;533a&quot; class=&quot;graf graf--p graf-after--h4&quot;&gt;An&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt; &lt;/strong&gt;academic theory proposed by James Q. Wilson and George Kelling in 1982 that used broken windows as a metaphor for disorder within neighbourhoods.&lt;/p&gt;
&lt;blockquote id=&quot;e670&quot; class=&quot;graf graf--pullquote graf-after--p&quot;&gt;&lt;p&gt;One broken window, if left unrepaired for a substantial amount of time, instills a sense of abandonment. So another window gets broken. People start littering. Graffiti appears. Serious structural damage begins. In a relatively short time, the building becomes damaged beyond the owner’s desire to fix it, and the sense of abandonment becomes reality.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p id=&quot;4401&quot; class=&quot;graf graf--p graf-after--pullquote&quot;&gt;Let’s not abandon our code, let’s repair the code as soon as we get an opportunity to repair it and let’s not get ourselves into a situation where damage is beyond our capacity to fix. Let’s see our theory in action.&lt;/p&gt;
&lt;h4 id=&quot;1575&quot; class=&quot;graf graf--h4 graf-after--p&quot;&gt;Problem Definition Overview&lt;/h4&gt;
&lt;p id=&quot;1f4e&quot; class=&quot;graf graf--p graf-after--h4&quot;&gt;The below code belongs to a hypothetical application “Movie Rental” which allows its customers to rent either a Regular or a Children’s movies for fixed number of days. The application also allows generation of a statement which the business calls as “Text Statement”. This application has been running in Production for a long time without issues and has become very popular. Now business wants to generate an HTML statement with exact same logic for amount computation.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre&gt;public class Customer {
    private String name;
    private List&amp;lt;Rental&amp;gt; rentals = new ArrayList&lt;&gt;();

    public Customer(String name) {
        this.name = name;
    }
    public void addRental(Rental arg) {
        rentals.add(arg);
    }
    public String getName() {
        return name;
    }
    public String statement() {
        double totalAmount = 0;
        String result = &quot;Rental Record for &quot; + getName() + &quot;\n&quot;;
        for (Rental each : rentals) {
            double thisAmount = 0;
            &lt;code style=&quot;color: darkorange&quot;&gt;//determine amounts for each line&lt;/code&gt;
            switch (each.getMovie().getPriceCode()) {
                case Movie.REGULAR:
                    thisAmount += 2;
                    if (each.getDaysRented() &lt; 2)
                        thisAmount += (each.getDaysRented() - 2) * 1.5;
                    break;
                case Movie.CHILDRENS:
                    thisAmount += 1.5;
                    if (each.getDaysRented() &lt; 3)
                        thisAmount += (each.getDaysRented() - 3) * 1.5;
                    break;
            }
            &lt;code style=&quot;color: darkorange&quot;&gt;//show figures for this Rental&lt;/code&gt;
            result += &quot;\t&quot; + each.getMovie().getTitle() + &quot;\t&quot; +
                    String.valueOf(thisAmount) + &quot;\n&quot;;
            totalAmount += thisAmount;
        }
        &lt;code style=&quot;color: darkorange&quot;&gt;//add footer lines result&lt;/code&gt;
        result += &quot;Amount owed is &quot; + String.valueOf(totalAmount) + &quot;\n&quot;;
        return result;
    }
}

public class Movie {
    public static final int CHILDRENS = 2;
    public static final int REGULAR = 0;

    private String title;
    private int priceCode;

    public Movie(String title, int priceCode) {
        this.title = title;
        this.priceCode = priceCode;
    }
    &lt;code style=&quot;color: darkorange&quot;&gt;//getters ignored&lt;/code&gt;
}

public class Rental {
    private int daysRented;
    private Movie movie;

    public Rental(Movie movie, int daysRented){
        this.movie = movie;
        this.daysRented = daysRented;
    }
    &lt;code style=&quot;color: darkorange&quot;&gt;//getters ignored&lt;/code&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The team decides to discuss different ways to handle this new requirement in legacy code.&lt;/p&gt;
&lt;p&gt;
    &lt;iframe width=&quot;800&quot; height=&quot;400&quot; src=&quot;https://www.youtube.com/embed/aGGoW8YENKo&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/p&gt;
&lt;p id=&quot;a254&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;And the team agrees to improve the code before implementing the new functionality. Scott and Jessica will be pairing on this. But, where do they start from? As mentioned in their discussion, they need to understand the code first so they decide to write Characterization Test(s).&lt;/p&gt;
&lt;h4 id=&quot;706f&quot; class=&quot;graf graf--h4 graf-after--p&quot;&gt;First Characterization Test&lt;/h4&gt;
&lt;p id=&quot;0928&quot; class=&quot;graf graf--p graf-after--h4&quot;&gt;Scott&amp;gt; How many tests should we write?&lt;/p&gt;
&lt;p id=&quot;927f&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Jessica&amp;gt; Let’s look at the code. It should give us some hints.&lt;/p&gt;
&lt;p id=&quot;6d15&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Scott&amp;gt; I get it. We need a few rentals consisting of Regular and Children’s movie and the number of days rented for which these movies can be greater than 2 or 3. So, one test should cover a &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;decent&lt;/strong&gt; functionality.&lt;/p&gt;
&lt;p id=&quot;00b8&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Jessica&amp;gt; I can’t agree more. So let’s write it then.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre&gt;public class CustomerUnitTest {
    @Test
    public void shouldGenerateStatement(){
        Customer john      = new Customer(&quot;John&quot;);
        Movie    regular   = new Movie(&quot;Black Panther&quot;, REGULAR);
        Movie    children  = new Movie(&quot;Lion King&quot;,     CHILDRENS);
        Rental rental1     = new Rental(regular, 3);  
        Rental rental2     = new Rental(children, 4);
        john.addRental(rental1);
        john.addRental(rental2);
        
        String statement = john.statement();
        assertEquals(&quot;&quot;, statement);
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Scott&amp;gt; Let’s run this and see it fail.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre id=&quot;7bb8&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;org.junit.ComparisonFailure:
Expected: &quot;&quot;
Actual:
Rental Record for John
 Black Panther 3.5
 Lion King 3.0
Amount owed is 6.5
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Jessica&amp;gt; Great. We have made some progress. Let’s correct our test.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre&gt;public class CustomerUnitTest {
    @Test
    public void shouldGenerateStatement(){
        String expected = &quot;Rental Record for John\n&quot; +
                &quot;\tBlack Panther\t3.5\n&quot; +
                &quot;\tLion King\t3.0\n&quot; +
                &quot;Amount owed is 6.5\n&quot;;
        
        Customer john      = new Customer(&quot;John&quot;);
        Movie    regular   = new Movie(&quot;Black Panther&quot;, REGULAR);
        Movie    children  = new Movie(&quot;Lion King&quot;,     CHILDRENS);
        Rental rental1     = new Rental(regular, 3);
        Rental rental2     = new Rental(children, 4);
        john.addRental(rental1);
        john.addRental(rental2);
        
        String statement = john.statement();
        assertEquals(expected, statement);
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Jessica and Scott agree to write one test case covering a decent portion of the code. If this gives us confidence, we can live with one test for now else we can write a few more or include movies with daysRented &amp;lt; 2.&lt;/em&gt;&lt;/p&gt;
&lt;p id=&quot;8a8b&quot; class=&quot;graf graf--p graf-after--blockquote&quot;&gt;Scott&amp;gt; Jessica, what type of test should a Characterization test be? Unit, Functional, Integration?&lt;/p&gt;
&lt;p id=&quot;03f9&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Jessica&amp;gt; Scott, it is not always possible to write unit or functional tests for legacy code. You might end up writing an &lt;em class=&quot;markup--em markup--p-em&quot;&gt;integration test&lt;/em&gt; to begin with because you just want to know what system does. But, as soon as you get an opportunity, get your tests closer to the code.&lt;/p&gt;
&lt;p id=&quot;b979&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Scott&amp;gt; Sure Jessica, let’s start the fun part. Let’s fix a broken window.&lt;/p&gt;
&lt;h4 id=&quot;9ff0&quot; class=&quot;graf graf--h4 graf-after--p&quot;&gt;Refactoring&lt;/h4&gt;
&lt;p id=&quot;3257&quot; class=&quot;graf graf--p graf-after--h4&quot;&gt;Scott&amp;gt; Where do we start from?&lt;/p&gt;
&lt;p id=&quot;935c&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Jessica&amp;gt; I believe statement() method is a long method. We should try and make it a little shorter.&lt;/p&gt;
&lt;p id=&quot;5a47&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Scott&amp;gt; Agreed.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Jessica and Scott agreed that statement() method is a long method. But, this agreement was not based on the number of lines in the method. It was based on how easy it is to comprehend the method or is a method doing more than one thing at a time or it can be decomposed further.&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre&gt;public String statement() {
    double totalAmount = 0;
    String result = &quot;Rental Record for &quot; + getName() + &quot;\n&quot;;
    for (Rental each : Rentals) {
        &lt;code style=&quot;color: darkorange&quot;&gt;//determine amounts for each line&lt;/code&gt;
        double thisAmount = amount(each);
        &lt;code style=&quot;color: darkorange&quot;&gt;//show figures for this Rental&lt;/code&gt;
        result += &quot;\t&quot; + each.getMovie().getTitle() + &quot;\t&quot; + String.valueOf(thisAmount) + &quot;\n&quot;;
        totalAmount += thisAmount;
    }
    &lt;code style=&quot;color: darkorange&quot;&gt;//add footer lines result&lt;/code&gt;
    result += &quot;Amount owed is &quot; + String.valueOf(totalAmount) + &quot;\n&quot;;
    return result;
}

private double amount(Rental each) {
    double thisAmount = 0.0;
    switch (each.getMovie().getPriceCode()) {
        case Movie.REGULAR:
            thisAmount += 2;
            if (each.getDaysRented() &lt; 2)
                thisAmount += (each.getDaysRented() - 2) * 1.5;
            break;
        case Movie.CHILDRENS:
            thisAmount += 1.5;
            if (each.getDaysRented() &lt; 3)
                thisAmount += (each.getDaysRented() - 3) * 1.5;
            break;
    }
    return thisAmount;
}&lt;/pre&gt;&lt;/div&gt;
&lt;p id=&quot;4d36&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Jessica&amp;gt; Switch statement has gone out and the extracted amount() method does one thing which is getting amount for a given rental.&lt;/p&gt;
&lt;p id=&quot;8b87&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Scott&amp;gt; Let’s continue refactoring. I am in a mood to clean up everything.&lt;/p&gt;
&lt;p id=&quot;0ac2&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Jessica&amp;gt; Hold on Scott, we need to run tests before we move on.&lt;/p&gt;
&lt;p id=&quot;356e&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;And the test ran successfully.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;While working with Legacy Code it is important to take smaller steps and follow refactoring cycle. Refactor -&amp;gt; Run Tests -&amp;gt; Refactor&lt;/em&gt;&lt;/p&gt;
&lt;p id=&quot;f267&quot; class=&quot;graf graf--p graf-after--blockquote&quot;&gt;Scott&amp;gt; Sure. Jessica, are we in a position to remove the comment &lt;em class=&quot;markup--em markup--p-em&quot;&gt;“determine amounts for each line” from previous code?&lt;/em&gt;&lt;/p&gt;
&lt;p id=&quot;9609&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Jessica&amp;gt; Yes, we can remove it.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre&gt;public String statement() {
    double totalAmount = 0;
    String result = &quot;Rental Record for &quot; + getName() + &quot;\n&quot;;
    for (Rental rental : Rentals) {
        double thisAmount = amount(rental);
        &lt;code style=&quot;color: darkorange&quot;&gt;//show figures for this Rental&lt;/code&gt;
        result += &quot;\t&quot; + rental.getMovie().getTitle() + &quot;\t&quot; + String.valueOf(thisAmount) + &quot;\n&quot;;
        totalAmount += thisAmount;
    }
    &lt;code style=&quot;color: darkorange&quot;&gt;//add footer lines result&lt;/code&gt;
    result += &quot;Amount owed is &quot; + String.valueOf(totalAmount) + &quot;\n&quot;;
    return result;
}

private double amount(Rental rental) {
    double thisAmount = 0.0;
    switch (rental.getMovie().getPriceCode()) {
        case Movie.REGULAR:
            thisAmount += 2;
            if (rental.getDaysRented() &lt; 2)
                thisAmount += (rental.getDaysRented() - 2) * 1.5;
            break;
        case Movie.CHILDRENS:
            thisAmount += 1.5;
            if (rental.getDaysRented() &lt; 3)
                thisAmount += (rental.getDaysRented() - 3) * 1.5;
            break;
    }
    return thisAmount;
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Remove comments from legacy code when you have captured their complete essence . Though I did take some liberty to rename variable along with removing comment, it is always ideal to take smaller steps when you are beginning to understand legacy code. As you grow in confidence, you might want to take bigger steps but one test failure and the reality reveals itself.&lt;/em&gt;&lt;/p&gt;
&lt;p id=&quot;49cd&quot; class=&quot;graf graf--p graf-after--blockquote&quot;&gt;Scott&amp;gt; Let’s look at amount() method. It depends on priceCode from movie but is placed in Customer. We should move this method to the place where it belongs.&lt;/p&gt;
&lt;p id=&quot;e000&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Jessica&amp;gt; Yes, let’s do a few method movements (in the interest of this article).&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre&gt;&lt;code style=&quot;color: darkorange&quot;&gt;//Customer&lt;/code&gt;
public String statement() {
    double totalAmount = 0;
    String result = &quot;Rental Record for &quot; + getName() + &quot;\n&quot;;
    for (Rental rental : Rentals) {
        double thisAmount = rental.amount();
        &lt;code style=&quot;color: darkorange&quot;&gt;//show figures for this Rental&lt;/code&gt;
        result += &quot;\t&quot; + rental.movieTitle() + &quot;\t&quot; + String.valueOf(thisAmount) + &quot;\n&quot;;
        totalAmount += thisAmount;
    }
    &lt;code style=&quot;color: darkorange&quot;&gt;//add footer lines result&lt;/code&gt;
    result += &quot;Amount owed is &quot; + String.valueOf(totalAmount) + &quot;\n&quot;;
    return result;
}

&lt;code style=&quot;color: darkorange&quot;&gt;//Rental&lt;/code&gt;
double amount() {
  return movie.amount(this.daysRented);
}

&lt;code style=&quot;color: darkorange&quot;&gt;//Movie&lt;/code&gt;
double amount(int daysRented) {
    double thisAmount = 0.0;
    switch (this.getPriceCode()) {
        case Movie.REGULAR:
            thisAmount += 2;
            if (daysRented &lt; 2)
                thisAmount += (daysRented - 2) * 1.5;
            break;
        case Movie.CHILDRENS:
            thisAmount += 1.5;
            if (daysRented &lt; 3)
                thisAmount += (daysRented - 3) * 1.5;
            break;
    }
    return thisAmount;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;I did a few movements. Moved amount() method to Rental and then to Movie and ran the tests. It should be noted that this is our first opportunity to write unit tests for Rental and Movie. I won’t, for this article, but I assume you will.&lt;/em&gt;&lt;/p&gt;
&lt;p id=&quot;7db7&quot; class=&quot;graf graf--p graf-after--blockquote&quot;&gt;Scott&amp;gt; Jessica, I have a question. Movie has a switch statement based on different types of movies. Shall we introduce some polymorphism here?&lt;/p&gt;
&lt;p id=&quot;98cd&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Jessica&amp;gt; I don’t think it is coming in our way of implementing HTML statement functionality.&lt;/p&gt;
&lt;blockquote id=&quot;8392&quot; class=&quot;graf graf--blockquote graf-after--p&quot;&gt;&lt;p&gt;Scott has raised a valid point but we need to remember one thing, “we refactor the code which comes in our way”. At this point in time, we need to implement HTML statement and switch code does not come in the way of our new feature, neither do the magic numbers 2 or 1.5. If you want to continue with small refactorings which are not coming in your way, say changing Magic Numbers to Constants, go ahead and do it but do not move away from your actual task: implementing HTML statement.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p id=&quot;9c99&quot; class=&quot;graf graf--p graf-after--blockquote&quot;&gt;Scott&amp;gt; I get that. Thank you. The statement() method in Customer is short enough. Shall we pause our refactoring here?&lt;/p&gt;
&lt;p id=&quot;4221&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Jessica&amp;gt; We could, but one thing that is bothering me is this method seems to be generating 3 parts of the statement and I can see it clearly — header, body and footer. &lt;em class=&quot;markup--em markup--p-em&quot;&gt;If the effort is not huge&lt;/em&gt; we should try and extract this code into different methods.&lt;/p&gt;
&lt;p id=&quot;19cb&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Scott&amp;gt; You clearly have an eye for refactoring. Let’s do it.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre&gt;public String textStatement() {
    return textHeader() + textBody() + textFooter();
}
private String textHeader() {
    return &quot;Rental Record for &quot; + getName() + &quot;\n&quot;;
}
private String textBody() {
    String result = &quot;&quot;;
    for (Rental rental : Rentals) {
        result += &quot;\t&quot; + rental.movieTitle() + &quot;\t&quot; + String.valueOf(rental.amount()) + &quot;\n&quot;;
    }
    return result;
}
private String textFooter() {
    return &quot;Amount owed is &quot; + String.valueOf(totalAmount()) + &quot;\n&quot;;
}
private double totalAmount() {
    double totalAmount = 0.0;
    for (Rental rental : Rentals) {
        totalAmount += rental.amount();
    }
    return totalAmount;
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;I cheated again. Did lot more than what I should have done,renamed methods to be &lt;strong class=&quot;markup--strong markup--blockquote-strong&quot;&gt;text*,&lt;/strong&gt; duplicated for loops (over rentals) to calculate totalAmount(), repeated the same in textBody().&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Is that justified? Well, how many rentals do we expect to have for a customer? What is the cost of iterating over them twice? If it is not significant, go ahead and use it. What does it give me? Look at the statement() (renamed as textStatement()) method now.&lt;/em&gt;&lt;/p&gt;
&lt;p id=&quot;5e8c&quot; class=&quot;graf graf--p graf-after--blockquote&quot;&gt;Jessica&amp;gt; Now, we are done with refactoring. We can introduce HTML statement functionality now.&lt;/p&gt;
&lt;h4 id=&quot;76b1&quot; class=&quot;graf graf--h4 graf-after--p&quot;&gt;Conclusion&lt;/h4&gt;
&lt;p id=&quot;9010&quot; class=&quot;graf graf--p graf-after--h4&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;Jessica and Scott went on to implement HTML functionality (with tests) and they did a lot to clean up the existing code. This is much more understandable that it used to be.&lt;/em&gt;&lt;/p&gt;
&lt;p id=&quot;7e4d&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;They might not have cleaned up everything but they clearly have left a great deal of understanding trace for others to follow.&lt;/em&gt;&lt;/p&gt;
&lt;p id=&quot;1251&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;They followed Cover and Modify, Boy Scout rule, Refactoring Cycle and refactored enough to finish the new functionality, in-short dealt with Legacy Code professionally.&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&quot;d3d3&quot; class=&quot;graf graf--h4 graf-after--p&quot;&gt;References&lt;/h4&gt;
&lt;ul class=&quot;postList&quot;&gt;
&lt;li id=&quot;0493&quot; class=&quot;graf graf--li graf-after--h4&quot;&gt;Refactoring — Improving The Design Of Existing Code&lt;/li&gt;
&lt;li id=&quot;98d5&quot; class=&quot;graf graf--li graf-after--li graf--trailing&quot;&gt;&lt;a class=&quot;markup--anchor markup--li-anchor&quot; href=&quot;https://refactoring.com/catalog/&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot; data-href=&quot;https://refactoring.com/catalog/&quot;&gt;Refactoring Catalog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Sarthak Makhija</name></author><category term="Broken Window Theory" /><category term="Legacy Code" /><category term="Refactoring" /><summary type="html">This article is in continuation with the previous article &quot;Let’s Define Legacy Code&quot; where we defined Legacy Code. Let's understand Broken Window Theory and add a new feature to Legacy Code.</summary></entry><entry><title type="html">Let’s define Legacy Code</title><link href="https://sarthakmakhija.github.io/lets-define-legacy-code/" rel="alternate" type="text/html" title="Let’s define Legacy Code" /><published>2018-04-10T19:15:53+05:30</published><updated>2018-04-10T19:15:53+05:30</updated><id>https://sarthakmakhija.github.io/lets-define-legacy-code</id><content type="html" xml:base="https://sarthakmakhija.github.io/lets-define-legacy-code/">&lt;p id=&quot;dd4e&quot; class=&quot;graf graf--p graf--startsWithDoubleQuote graf-after--h3&quot;&gt;“I have been having sleepless nights trying to add features in the code we acquired from other company. I am dealing with purest form of &lt;em class=&quot;markup--em markup--p-em&quot;&gt;Legacy Code&lt;/em&gt;”&lt;/p&gt;
&lt;p id=&quot;c4f4&quot; class=&quot;graf graf--p graf--startsWithDoubleQuote graf-after--p&quot;&gt;“I am having a real hard time dealing with tangled, unstructured code that I have to work with but I don’t understand a bit. &lt;em class=&quot;markup--em markup--p-em&quot;&gt;Legacy Code !&lt;/em&gt;”&lt;/p&gt;
&lt;p id=&quot;d601&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;Legacy code&lt;/em&gt; is a term which probably has a lot of different definitions like -code acquired from someone else, code written by someone else, code that is hard to understand or code written in outdated technologies. Whatever be the definition, most of us believe &lt;em class=&quot;markup--em markup--p-em&quot;&gt;Legacy Code is Scary.&lt;/em&gt;&lt;/p&gt;
&lt;p id=&quot;972b&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;Q&lt;/em&gt;&lt;/strong&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;uestion&amp;gt; How would &lt;/em&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;you&lt;/em&gt;&lt;/strong&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt; define legacy code?&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&quot;23fb&quot; class=&quot;graf graf--h4 graf-after--p&quot;&gt;Defining Legacy Code&lt;/h4&gt;
&lt;p&gt;Michael Feathers in his book “Working Effectively with Legacy Code” defines legacy code as, code without tests.&lt;/p&gt;
&lt;p&gt;Code without tests is a bad code. It doesn’t matter how well written it is; how well structured it is; how well encapsulated it is.Without tests there is no way to tell if our code is getting better or worse.&lt;/p&gt;
&lt;p id=&quot;1a83&quot; class=&quot;graf graf--p graf-after--blockquote&quot;&gt;Well, a slightly modified version of this definition is “&lt;em class=&quot;markup--em markup--p-em&quot;&gt;code without unit tests is called legacy code&lt;/em&gt;”. It is always better to have tests as close to the code as possible (&lt;em class=&quot;markup--em markup--p-em&quot;&gt;unit tests &amp;gt; integration tests &amp;gt; UI tests&lt;/em&gt;). So, it would not be unfair to call a code without unit tests a &lt;em class=&quot;markup--em markup--p-em&quot;&gt;legacy code&lt;/em&gt;.&lt;/p&gt;
&lt;h4 id=&quot;b275&quot; class=&quot;graf graf--h4 graf-after--p&quot;&gt;Working with Legacy Code&lt;/h4&gt;
&lt;p id=&quot;d37b&quot; class=&quot;graf graf--p graf-after--h4&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;Q&lt;/em&gt;&lt;/strong&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;uestion&amp;gt; What approach will you take if you were to make a change in legacy code?&lt;/em&gt;&lt;/p&gt;
&lt;p id=&quot;f09e&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Most of us might say, “&lt;em class=&quot;markup--em markup--p-em&quot;&gt;I will make the change and call it a day, why bother about improving the code&lt;/em&gt;”. Rationale behind this thought process could be -&lt;/p&gt;
&lt;ul class=&quot;postList&quot;&gt;
&lt;li id=&quot;a530&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;I don’t have enough time to refactor the code, I would prefer making a change and completing my story&lt;/li&gt;
&lt;li id=&quot;079f&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Why risk changing the structure of the code that has been running in production for a long time&lt;/li&gt;
&lt;li id=&quot;0af9&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;What is the overall benefit of refactoring legacy code&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Michael Feathers calls this style of making a change as Edit and Pray. You plan and make your changes and when you are done, you pray and pray harder to get your changes right.&lt;/p&gt;
&lt;p id=&quot;9a39&quot; class=&quot;graf graf--p graf-after--blockquote&quot;&gt;With this style, one can only contribute to increasing Legacy code.&lt;/p&gt;
&lt;p class=&quot;align-center&quot;&gt;&lt;img class=&quot;aligncenter wp-image-81 size-medium&quot; title=&quot;Legacy Code&quot; src=&quot;/assets/img/pexels/legacy-code.jpeg&quot; alt=&quot;Legacy Code&quot; /&gt;&lt;/p&gt;
&lt;p&gt;There is a different style of making changes which is Cover and Modify&lt;em class=&quot;markup--em markup--blockquote-em&quot;&gt;. &lt;/em&gt;Build a Safety Net, make changes in the system, let Safety Net provide feedback and work on those feedbacks.&lt;/p&gt;
&lt;p id=&quot;f1da&quot; class=&quot;graf graf--p graf-after--blockquote&quot;&gt;It can be safely assumed that &lt;em class=&quot;markup--em markup--p-em&quot;&gt;Cover and Modify&lt;/em&gt; is a way to go to deal with Legacy code.&lt;/p&gt;
&lt;p id=&quot;3898&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;Q&lt;/em&gt;&lt;/strong&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;uestion&amp;gt; But, should you even spend time writing tests in legacy code or even thinking about refactoring a legacy code?&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&quot;e6a7&quot; class=&quot;graf graf--h4 graf-after--figure&quot;&gt;The Boy Scout Rule&lt;/h4&gt;
&lt;blockquote id=&quot;b30b&quot; class=&quot;graf graf--pullquote graf-after--h4&quot;&gt;&lt;p&gt;The idea behind the Boy Scout Rule, as stated by Uncle Bob, is fairly simple: Leave the code cleaner than you found it! Whenever you touch an old code, you should clean it properly. Do not just apply a shortcut solution that will make the code more difficult to understand but instead treat it with care. It’s not enough to write code well, the code has to be kept clean over time.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p id=&quot;58e5&quot; class=&quot;graf graf--p graf-after--pullquote&quot;&gt;We get a very strong message when Boy Scout rule is applied to legacy code “&lt;em class=&quot;markup--em markup--p-em&quot;&gt;leave a trace of understanding behind you for others to follow&lt;/em&gt;”, which means we will refactor the code to make it more understandable. And in order to refactor, we will build Safety Net around it.&lt;/p&gt;
&lt;p id=&quot;6ea8&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Now that we understand &lt;em class=&quot;markup--em markup--p-em&quot;&gt;we can not take shortcuts&lt;/em&gt; the only option that is left with us is to write some tests, refactor code and proceed with the development.&lt;/p&gt;
&lt;p class=&quot;graf graf--p graf-after--p&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;Q&lt;/em&gt;&lt;/strong&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;uestions&amp;gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul class=&quot;postList&quot;&gt;
&lt;li id=&quot;58a6&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;Which tests should we write?&lt;/li&gt;
&lt;li id=&quot;8206&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;How much should we refactor?&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;3a87&quot; class=&quot;graf graf--h4 graf-after--li&quot;&gt;Which Tests To Write&lt;/h4&gt;
&lt;p id=&quot;6234&quot; class=&quot;graf graf--p graf-after--h4&quot;&gt;In nearly every legacy system, what the system does is more important than what it is supposed to do.&lt;/p&gt;
&lt;blockquote id=&quot;d49c&quot; class=&quot;graf graf--pullquote graf-after--p&quot;&gt;&lt;p&gt;Characterization Tests, the tests that we need when we want to preserve behavior are called as characterization tests. A characterization test is a test that characterizes the actual behavior of a piece of code. There’s no “Well, it should do this” or “I think it does that”. The tests document the actual current behavior of the system.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h4 id=&quot;708c&quot; class=&quot;graf graf--h4 graf-after--pullquote&quot;&gt;Writing Characterization Test&lt;/h4&gt;
&lt;p id=&quot;fb12&quot; class=&quot;graf graf--p graf-after--h4&quot;&gt;A &lt;em class=&quot;markup--em markup--p-em&quot;&gt;Characterization Test &lt;/em&gt;by definition documents the actual current behavior of the system the exact same way it is running on Production environment.&lt;/p&gt;
&lt;p id=&quot;20c2&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Let’s write a &lt;em class=&quot;markup--em markup--p-em&quot;&gt;Characterization test &lt;/em&gt;for a Customer object which generates text statement for some movies rented by a customer.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre id=&quot;1fe4&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;import static com.code.legacy.movie.MovieType.CHILDREN;
import static org.junit.Assert.assertEquals;

public void shouldGenerateTextStatement(){
   Customer john          = new Customer(&quot;John&quot;);
   Movie    childrenMovie = new Movie(&quot;Toy Story&quot;, CHILDREN);   
   int      daysRented    = 3;
   Rental   rental        = new Rental(childrenMovie, daysRented);
   john.addRental(rental);
   
   String statement = john.generateTextStatement();
   assertEquals(&quot;&quot;, statement);
}&lt;/pre&gt;&lt;/div&gt;
&lt;p id=&quot;c242&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;This test attempts to understand (or characterize) the “Text Statement” generation for a customer given a children’s movie rented for 3 days. Because we do not understand the system (at least as of now), &lt;em class=&quot;markup--em markup--p-em&quot;&gt;we expect the statement to be blank or containing any dummy value.&lt;/em&gt;&lt;/p&gt;
&lt;p id=&quot;b267&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Let’s run the test and let it fail. When it does, &lt;em class=&quot;markup--em markup--p-em&quot;&gt;we have found out what the code actually does under that condition.&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre id=&quot;f0cd&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;java.lang.AssertionError:
Expected :&quot;&quot;
Actual   :Rental Record for John, Total amount owed = 12.5. You earned 4 frequent renter points.&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, that we know the behavior of the code, we can go ahead and change the test.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre id=&quot;059c&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;import static com.code.legacy.movie.MovieType.CHILDREN;
import static org.junit.Assert.assertEquals;

public void shouldGenerateTextStatement(){
   String expectedStatement = &quot;Rental Record for John, Total amount  owed = 12.5. You earned 4 frequent renter points&quot;;
   Customer john          = new Customer(&quot;John&quot;);
   Movie    childrenMovie = new Movie(&quot;Toy Story&quot;, CHILDREN);   
   int      daysRented    = 3;
   Rental   rental        = new Rental(childrenMovie, daysRented);
   john.addRental(rental);
   
   Sting statement = john.generateTextStatement();
   assertEquals(expectedStatement, statement);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p id=&quot;cd73&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;Hold on&lt;/em&gt;, did we just copy the output generated by the code and placed into our test. &lt;em class=&quot;markup--em markup--p-em&quot;&gt;Yes, that is exactly what we did.&lt;/em&gt;&lt;/p&gt;
&lt;p id=&quot;e4a5&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;We aren’t trying to find bugs right now. We are trying to put in a mechanism to find bugs later, bugs that show up as differences from the system’s current behavior. When we adopt this perspective, our view of tests is different: They don’t have any moral authority; they just sit there &lt;em class=&quot;markup--em markup--p-em&quot;&gt;documenting what system really does&lt;/em&gt;. At this stage, it’s very important to have that knowledge of what the system actually does someplace.&lt;/p&gt;
&lt;p id=&quot;4451&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;Q&lt;/em&gt;&lt;/strong&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;uestion&amp;gt;&lt;/em&gt; What is the total number of tests that we write to characterize a system?&lt;/p&gt;
&lt;p id=&quot;e7c4&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;A&lt;/em&gt;&lt;/strong&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;nswer&amp;gt;&lt;/em&gt; It’s infinite. We could dedicate a good portion of our lives to writing case after case for any class in a legacy code.&lt;/p&gt;
&lt;p id=&quot;8b1c&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;Q&lt;/em&gt;&lt;/strong&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;uestion&amp;gt;&lt;/em&gt; When do we stop then? Is there any way of knowing which cases are more important than others?&lt;/p&gt;
&lt;p id=&quot;998c&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;A&lt;/em&gt;&lt;/strong&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;nswer&amp;gt;&lt;/em&gt; Look at the code we are characterizing. The code itself can give us ideas about what it does, and if we have questions, tests are an ideal way of asking them. At that point, write a test or tests that cover good enough portion of the code.&lt;/p&gt;
&lt;p id=&quot;0d6a&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;Q&lt;/em&gt;&lt;/strong&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;uestion&amp;gt; &lt;/em&gt;Does that cover everything in the code?&lt;/p&gt;
&lt;p id=&quot;e2b6&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;A&lt;/em&gt;&lt;/strong&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;nswer&amp;gt; &lt;/em&gt;It might not. But then we do the next step. We think about the changes that we want to make in the code and try to figure out whether the tests that we have will sense any problems that we can cause. If they won’t, we add more tests until we feel confident that they will.&lt;/p&gt;
&lt;h4 id=&quot;acc6&quot; class=&quot;graf graf--h4 graf-after--p&quot;&gt;How Much To Refactor?&lt;/h4&gt;
&lt;p id=&quot;428a&quot; class=&quot;graf graf--p graf-after--h4&quot;&gt;There is so much to refactor in legacy code and we can not refactor everything. In order to answer this we need to go back to understanding our purpose of refactoring the legacy code.&lt;/p&gt;
&lt;p id=&quot;4485&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;We want to refactor legacy code to leave it cleaner than what it was when it came to us and to make it understandable for others.&lt;/p&gt;
&lt;p id=&quot;b532&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;With that said, we want to make the system better keeping the focus on the task. We don’t want go crazy with refactoring trying to rewrite the whole system in a few days. What we want to do is “&lt;em class=&quot;markup--em markup--p-em&quot;&gt;refactor the code that comes in our way of implementing any new change&lt;/em&gt;”. We will try and understand this better with an example in the next article.&lt;/p&gt;
&lt;p&gt;
   &lt;iframe width=&quot;800&quot; height=&quot;400&quot; src=&quot;https://www.youtube.com/embed/0U83rST3ang&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/p&gt;
&lt;h4&gt;&lt;/h4&gt;
&lt;h4 id=&quot;cc17&quot; class=&quot;graf graf--h4 graf-after--figure&quot;&gt;References&lt;/h4&gt;
&lt;ul class=&quot;postList&quot;&gt;
&lt;li id=&quot;1d0c&quot; class=&quot;graf graf--li graf-after--h4&quot;&gt;Working Effectively with Legacy Code&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Sarthak Makhija</name></author><category term="Boy Scout Rule" /><category term="Legacy Code" /><summary type="html">I have been having sleepless nights trying to add features in the code we acquired from other company. I am dealing with purest form of Legacy Code. I am having a real hard time dealing with tangled, unstructured code that I have to work with but I don’t understand a bit. Legacy Code !. Let's understand what is Legacy code and Boy Scout Rule.</summary></entry><entry><title type="html">Flips: Feature Flipping for Java</title><link href="https://sarthakmakhija.github.io/flips-feature-flipping-for-java/" rel="alternate" type="text/html" title="Flips: Feature Flipping for Java" /><published>2017-10-07T17:48:54+05:30</published><updated>2017-10-07T17:48:54+05:30</updated><id>https://sarthakmakhija.github.io/flips-feature-flipping-for-java</id><content type="html" xml:base="https://sarthakmakhija.github.io/flips-feature-flipping-for-java/">&lt;p&gt;&lt;div class=&quot;align-center&quot;&gt;&lt;img class=&quot;alignright wp-image-53 size-medium&quot; title=&quot;Flips&quot; src=&quot;/assets/img/pexels/flips.jpg&quot; width=&quot;800&quot; height=&quot;400&quot; alt=&quot;Flips&quot; /&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p id=&quot;182d&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;&lt;a href=&quot;https://github.com/Feature-Flip/flips&quot;&gt;&lt;strong&gt;Flips&lt;/strong&gt;&lt;/a&gt; is an implementation of the Feature Toggles pattern for Java and Spring (Spring Core / Spring MVC/ Spring Boot) based application.&lt;/p&gt;
&lt;p id=&quot;f611&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;&lt;strong&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;a href=&quot;https://martinfowler.com/articles/feature-toggles.html&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;Feature Toggle&lt;/a&gt; &lt;/span&gt;&lt;/strong&gt;is a powerful technique that allows teams to modify system behavior and deliver new functionality to users rapidly but safely.&lt;/p&gt;
&lt;h3 id=&quot;5714&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Why Another Library for Feature Toggles?&lt;/h3&gt;
&lt;p id=&quot;5986&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;The idea behind &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;Flips&lt;/strong&gt; is to let the clients implement toggles with &lt;em class=&quot;markup--em markup--p-em&quot;&gt;minimum configuration and coding&lt;/em&gt;.&lt;/p&gt;
&lt;p id=&quot;6563&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The main motivations behind implementing this library were -&lt;/p&gt;
&lt;ul class=&quot;postList&quot;&gt;
&lt;li id=&quot;0da3&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;Should be simple to use&lt;/li&gt;
&lt;li id=&quot;c57f&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Should require minimal configuration and code&lt;/li&gt;
&lt;li id=&quot;a758&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Should be able to flip a feature based on various conditions&lt;/li&gt;
&lt;li id=&quot;194c&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Should be able to flip a feature based on a combination of different conditions&lt;/li&gt;
&lt;li id=&quot;24e2&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Should be possible for the clients to create custom conditions to suit their requirements&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Flips works with Java 8 and Spring Core/Spring MVC/Spring Boot, and is available for web and non-web applications.&lt;/p&gt;
&lt;h3 id=&quot;b2ad&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;What Does Flips Offer?&lt;/h3&gt;
&lt;p&gt;Flips provides various conditions to flip a feature. The image below summarizes the features:&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;size-medium wp-image-54 aligncenter&quot; src=&quot;/assets/img/pexels/flips-features.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Any feature can be flipped ON or OFF based on different conditions which can be value of a property, current active profiles, days of the week, or a combination of these, etc.&lt;/p&gt;
&lt;p id=&quot;4643&quot; class=&quot;graf graf--p graf-after--blockquote&quot;&gt;Let’s get started with in-depth understanding of these features.&lt;/p&gt;
&lt;h3 id=&quot;b84c&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Getting Started&lt;/h3&gt;
&lt;p id=&quot;8695&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Include the necessary dependency:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;lang:default decode:true &quot;&gt;&amp;lt;dependency&amp;gt;
   &amp;lt;groupId&amp;gt;com.github.feature-flip&amp;lt;/groupId&amp;gt;
   &amp;lt;artifactId&amp;gt;flips-web&amp;lt;/artifactId&amp;gt;
   &amp;lt;version&amp;gt;1.0.1&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p id=&quot;5f28&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;Or:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;lang:default decode:true &quot;&gt;&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;com.github.feature-flip&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;flips-core&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;1.0.1&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;5b8f&quot; class=&quot;graf graf--h3 graf-after--pre&quot;&gt;Detailed Description of All Annotations&lt;/h3&gt;
&lt;p id=&quot;6fda&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Flips provides various annotations to flip a feature. Let’s have a detailed walk-through of all the annotations:&lt;/p&gt;
&lt;h3 id=&quot;8c53&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;@FlipOnEnvironmentProperty&lt;/h3&gt;
&lt;p id=&quot;81ce&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;@FlipOnEnvironmentProperty &lt;/strong&gt;is used to flip a feature based on the value of an environment property.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;graf graf--pre graf-after--p&quot;&gt;@Component
class EmailSender {
    @FlipOnEnvironmentProperty(property = &quot;feature.send.email&quot;, 
                               expectedValue = &quot;true&quot;)
    public void sendEmail(EmailMessage emailMessage) {
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;ebde&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;@FlipOnProfiles&lt;/h3&gt;
&lt;p id=&quot;d955&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;@FlipOnProfiles&lt;/strong&gt; is used to flip a feature based on the environment in which the application is running&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre id=&quot;a052&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;@Component
class EmailSender {
    @FlipOnProfiles(activeProfiles = {&quot;dev&quot;, &quot;qa&quot;})
    public void sendEmail(EmailMessage emailMessage) {
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p id=&quot;fccf&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;Feature sendEmail is enabled if the current profile (or environment) is either &lt;strong&gt;dev or qa.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;7e8a&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;@FlipOnDaysOfWeek&lt;/h3&gt;
&lt;p id=&quot;b04e&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;@FlipOnDaysOfWeek&lt;/strong&gt; is used to flip a feature based on the day of the week.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre id=&quot;7af4&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;@Component
class EmailSender {
    @FlipOnDaysOfWeek(daysOfWeek = {DayOfWeek.MONDAY})
    public void sendEmail(EmailMessage emailMessage) {
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p id=&quot;fbed&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;Feature sendEmail is enabled if the current day is &lt;strong&gt;MONDAY&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&quot;0827&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;@FlipOnDateTime&lt;/h3&gt;
&lt;p id=&quot;6a6d&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;@FlipOnDateTime&lt;/strong&gt; is used to flip a feature based on date and time.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre id=&quot;3f0e&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;@Component
class EmailSender {
    @FlipOnDateTime(cutoffDateTimeProperty = &quot;default.date.enabled&quot;)
    public void sendEmail(EmailMessage emailMessage) {
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Feature sendEmail is enabled if the current datetime is equal to or greater than the value (in ISO-8601 format) defined by the &lt;strong&gt;default.date.enabled&lt;/strong&gt; property.&lt;/p&gt;
&lt;h3 id=&quot;f5bf&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;@FlipOnSpringExpression&lt;/h3&gt;
&lt;p id=&quot;a1d8&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;@FlipOnSpringExpression&lt;/strong&gt; is used to flip a feature based on the evaluation of a Spring expression.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre id=&quot;fc81&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;@Component
class EmailSender {
    @FlipOnSpringExpression(expression = &quot;T(java.lang.Math).sqrt(4) * 100.0 
                                          &amp;lt; T(java.lang.Math).sqrt(4) * 10.0&quot;)
    public void sendEmail(EmailMessage emailMessage) {
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Feature sendEmail is enabled if the expression evaluates to TRUE. This annotation happens to be one of the most powerful annotations in Flips library. Why so ?&lt;/p&gt;
&lt;p class=&quot;graf graf--p graf-after--pre&quot;&gt;One could always write a custom spring component and use the same in @FlipOnSpringExpression to flip a feature.&lt;/p&gt;
&lt;h3 id=&quot;5d44&quot; class=&quot;graf graf--h3 graf-after--blockquote&quot;&gt;@FlipBean&lt;/h3&gt;
&lt;p id=&quot;1200&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;@FlipBean&lt;/strong&gt; is used to flip the invocation of a method with another method &lt;em class=&quot;markup--em markup--p-em&quot;&gt;defined in a different bean&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre id=&quot;aa3e&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;@Component
class EmailSender {
    @FlipBean(with = SendGridEmailSender.class)
    @FlipOnProfiles(activeProfiles = &quot;DEV&quot;)
    public void sendEmail(EmailMessage emailMessage) {
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will flip the invocation of the sendEmail method with a method (having same signature) defined in SendGridEmailSender Spring component if the current profile is &lt;strong&gt;DEV&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&quot;eab3&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;@FlipOff&lt;/h3&gt;
&lt;p id=&quot;42de&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;@FlipOff&lt;/strong&gt; is used to flip a feature off.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;graf graf--pre graf-after--p&quot;&gt;@Component
class EmailSender {
    @FlipOff
    public void sendEmail(EmailMessage emailMessage) {
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p id=&quot;a3bb&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;Feature sendEmail is always DISABLED.&lt;/p&gt;
&lt;h3 id=&quot;831b&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Combining annotations&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre id=&quot;7b21&quot; class=&quot;graf graf--pre graf-after--h3&quot;&gt;@Component
class EmailSender {
    @FlipOnProfiles(activeProfiles = &quot;dev&quot;)
    @FlipOnDaysOfWeek(daysOfWeek={DayOfWeek.MONDAY})
    public void sendEmail(EmailMessage emailMessage) {
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p id=&quot;7937&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;Feature sendEmail is enabled if the current profile is &quot;&lt;strong&gt;dev&lt;/strong&gt;&quot; AND the current day of the week is &lt;strong&gt;MONDAY&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 class=&quot;graf graf--p graf-after--pre&quot;&gt;Import Flip Context Configuration&lt;/h3&gt;
&lt;p id=&quot;65cb&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;In order to bring all Flips-related annotations into effect, you need to import FlipContextConfiguration or FlipWebContextConfiguration and you are ready to go.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;lang:java decode:true &quot;&gt;@SpringBootApplication
@Import(FlipWebContextConfiguration.class)
class ApplicationConfig {
    public static void main(String[] args) {
        SpringApplication.run(ApplicationConfig.class, args);
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p id=&quot;1e18&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;Please refer to this &lt;a class=&quot;markup--anchor markup--p-anchor&quot; href=&quot;https://github.com/SarthakMakhija/flips-samples/blob/master/flips-sample-spring-boot/src/main/java/com/finder/article/ApplicationConfig.java&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot; data-href=&quot;https://github.com/SarthakMakhija/flips-samples/blob/master/flips-sample-spring-boot/src/main/java/com/finder/article/ApplicationConfig.java&quot;&gt;sample project&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;6eed&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Creating Custom Annotations&lt;/h3&gt;
&lt;p id=&quot;03ee&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;All the annotations provided by the library are of type &lt;em class=&quot;markup--em markup--p-em&quot;&gt;@FlipOnOff&lt;/em&gt;, which is essentially a meta-annotation. So, create a custom annotation annotated with @FlipOnOff at the method level:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre id=&quot;860e&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;@Target({ElementType.METHOD})
@Retention(RetentionPolicy.RUNTIME) 
@FlipOnOff(value = MyCustomCondition.class) !!Important
public @interface MyCustomAnnotation {
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As a part of this annotation, specify the condition that will evaluate this annotation.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre id=&quot;29c6&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;@Component
public class MyCustomCondition implements FlipCondition {
    @Override
    public boolean evaluateCondition(FeatureContext fContext,
                                     FlipAnnotationAttributes attr){
        
        &lt;code style=&quot;color: darkorange&quot;&gt;//Code to evaluate flip condition&lt;/code&gt;
        return false;
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This Condition class needs to implement &lt;strong&gt;FlipCondition&lt;/strong&gt; and MUST be a Spring Component.&lt;/p&gt;
&lt;p id=&quot;e279&quot; class=&quot;graf graf--p graf-after--blockquote&quot;&gt;That is it! You can use your custom annotation to any method to flip it ON or OFF based on your condition.&lt;/p&gt;
&lt;h3 class=&quot;graf graf--pre graf-after--p&quot;&gt;What Does It Mean “Feature Is DISABLED”?&lt;/h3&gt;
&lt;p id=&quot;683b&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;FeatureNotEnabledException&lt;/strong&gt; is thrown if a disabled feature is invoked. In case of a web application, one could use &lt;a class=&quot;markup--anchor markup--p-anchor&quot; href=&quot;https://mvnrepository.com/artifact/com.github.feature-flip/flips-web/1.0.1&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot; data-href=&quot;https://mvnrepository.com/artifact/com.github.feature-flip/flips-web/1.0.1&quot;&gt;flips-web&lt;/a&gt; dependency, which also provides a &lt;em class=&quot;markup--em markup--p-em&quot;&gt;ControllerAdvice&lt;/em&gt; meant to handle this exception.&lt;/p&gt;
&lt;p id=&quot;e8ac&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;It returns a default response and a status code of 501, which can be overridden. Please refer to the &lt;a class=&quot;markup--anchor markup--p-anchor&quot; href=&quot;https://github.com/SarthakMakhija/flips-samples/tree/master/flips-sample-spring-boot/src/main/java/com/finder/article/advice&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot; data-href=&quot;https://github.com/SarthakMakhija/flips-samples/tree/master/flips-sample-spring-boot/src/main/java/com/finder/article/advice&quot;&gt;sample project&lt;/a&gt; for more information.&lt;/p&gt;
&lt;h3 id=&quot;94a9&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Wrap Up&lt;/h3&gt;
&lt;p id=&quot;9413&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;We believe the MVP is done and features like flipping at runtime and supporting database-driven feature flips are in the pipeline.&lt;/p&gt;
&lt;p id=&quot;50de&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;For any custom flip condition, one could go ahead and use @FlipOnSpringExpression with your custom spring bean to determine flip condition.&lt;/p&gt;
&lt;p id=&quot;35ec&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;If you want to have a look at the code or even want to contribute, you can check out &lt;a class=&quot;markup--anchor markup--p-anchor&quot; href=&quot;https://github.com/Feature-Flip/flips&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot; data-href=&quot;https://github.com/Feature-Flip/flips&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;Flips&lt;/strong&gt;&lt;/a&gt;. Feel free to give any feedback.&lt;/p&gt;</content><author><name>Sarthak Makhija</name></author><category term="Feature Toggles" /><category term="Flips" /><category term="Spring Boot" /><category term="Spring MVC" /><summary type="html">Flips is an implementation of the Feature Toggles pattern for Java and Spring (Spring Core / Spring MVC/ Spring Boot) based application. Feature Toggle is a powerful technique that allows teams to modify system behavior and deliver new functionality to users rapidly but safely. Let's understand what Flips is all about.</summary></entry></feed>