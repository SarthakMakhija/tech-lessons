<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://tech-lessons.in/feed.xml" rel="self" type="application/atom+xml" /><link href="https://tech-lessons.in/" rel="alternate" type="text/html" /><updated>2023-02-27T20:09:14+05:30</updated><id>https://tech-lessons.in/feed.xml</id><title type="html">tech-lessons.in</title><subtitle>learnings by a developer</subtitle><entry><title type="html">Bloom filter</title><link href="https://tech-lessons.in/bloom-filter/" rel="alternate" type="text/html" title="Bloom filter" /><published>2023-02-25T00:00:00+05:30</published><updated>2023-02-25T00:00:00+05:30</updated><id>https://tech-lessons.in/bloom-filter</id><content type="html" xml:base="https://tech-lessons.in/bloom-filter/"><![CDATA[<p>A Bloom filter is a probabilistic data structure<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup> used to test whether an element is a set member. A bloom filter can query against large amounts of data and return either “possibly in the set” or “definitely not in the set”.</p>

<p>A bloom filter can have false positives, but false negatives are impossible.</p>

<p>Elements can only be added to the set, <em>but not removed</em> (though this can be addressed with the counting bloom filter variant).</p>

<p>Burton Howard Bloom conceived the Bloom filter in 1970.</p>

<h3 id="a-basic-filter">A basic filter</h3>

<p>Let’s build a basic filter for a giant persistent dictionary of lowercase English words. Here are some requirements for this filter:</p>

<ol>
  <li>It should not take more than 26 bytes of memory</li>
  <li>It should return either <strong>possibly in the set</strong> or <strong>definitely not in the set</strong></li>
  <li>Our application will query the filter first, and only if the filter returns “possibly in the set” will the application query the persistent dictionary</li>
</ol>

<p>One idea to design such a filter would be to maintain a <code class="language-plaintext highlighter-rouge">boolean</code> array of size 26 (26 lowercase English letters) to <strong>indicate the presence</strong> of a word beginning with a character.</p>

<p>The filter does not store the actual word; it only indicates the presence of a word. The word gets added to the persistent dictionary after adding it to the basic filter. To do that, we set the value at the <em>array index corresponding to the first letter</em> to <code class="language-plaintext highlighter-rouge">true</code>.</p>

<p>To check if the dictionary contains a word, the application queries the filter first. The filter checks the value at the <em>index corresponding to the first letter</em> [<code class="language-plaintext highlighter-rouge">firstLetterOfTheWord-asciiCodeOf('a')</code>] and returns <code class="language-plaintext highlighter-rouge">true</code> if the value at the index is set, <code class="language-plaintext highlighter-rouge">false</code> otherwise.</p>

<p>Let’s understand the returned values from the filter:</p>
<ul>
  <li>If the returned value is <code class="language-plaintext highlighter-rouge">false</code>, we can conclude that the word is not present in the persistent dictionary</li>
  <li>If the returned value is <code class="language-plaintext highlighter-rouge">true</code>, we can not be sure if the word is present because there may be multiple words starting with the same letter</li>
</ul>

<p>The idea behind the basic filter is presented in the image below.</p>

<div class="align-center">
    <img style="padding-left: 0; max-width: 90%" src="/assets/img/pexels/basicfilter.png" class="wp-image-878" />
</div>

<p>The image above also highlights a false positive case for the word “fact”.</p>

<h3 id="understanding-bloom-filter">Understanding bloom filter</h3>

<p>We should extend the idea of the basic filter to build a bloom filter. There are two main issues with our basic filter:</p>
<ol>
  <li>The <code class="language-plaintext highlighter-rouge">boolean</code> array of size 26 is too small. There are billions of words in English, and an array of size 26 will cause too many false positives</li>
  <li>We use a single hash function to determine the array position to set or read. This hash function is <code class="language-plaintext highlighter-rouge">firstLetterOfTheWord-asciiCodeOf('a')</code></li>
</ol>

<p>The solution to both these problems takes us closer to the bloom filter. The bloom filter uses two main concepts:</p>
<ol>
  <li>M-sized bit vector</li>
  <li>K hash functions</li>
</ol>

<p>The bloom filter maintains a bit array of size <code class="language-plaintext highlighter-rouge">M</code>; every key goes through <code class="language-plaintext highlighter-rouge">K</code> hash functions to determine the bit position to set.</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">M</code> and <code class="language-plaintext highlighter-rouge">K</code> need to be computed.</p>
</blockquote>

<p>Bloom filter supports two operations:</p>
<ol>
  <li><code class="language-plaintext highlighter-rouge">put</code> that puts a key in the bloom filter</li>
  <li><code class="language-plaintext highlighter-rouge">has</code> that returns either <strong>possibly in the bloom filter</strong> or <strong>definitely not in the bloom filter</strong></li>
</ol>

<p>Let’s summarize the working of the <code class="language-plaintext highlighter-rouge">put</code> operation. To put a key in the bloom filter, the following steps are performed:</p>

<ol>
  <li>The input key goes through K hash functions.</li>
  <li>The output of every hash function is reduced to a value between <code class="language-plaintext highlighter-rouge">0 and M-1</code> to set the appropriate bit in the bit vector.</li>
  <li>The corresponding bit is set in the bit vector.</li>
</ol>

<p>Every input goes through <code class="language-plaintext highlighter-rouge">K</code> hash functions, setting at most <code class="language-plaintext highlighter-rouge">K</code> bits in the bit vector.</p>

<p>The idea behind the <code class="language-plaintext highlighter-rouge">put</code> operation is presented in the image below. In the below image, we have K=2 (total hash functions) and M=8 (bit vector size).</p>

<div class="align-center">
    <img style="padding-left: 0; max-width: 90%" src="/assets/img/pexels/bloomfilterput.png" class="wp-image-878" />
</div>

<blockquote>
  <p>Remember, a bloom filter does not store the actual key; it only indicates the presence of a key by using at most K bits in an M-sized bit vector.</p>
</blockquote>

<p>Let’s summarize the working of the <code class="language-plaintext highlighter-rouge">has</code> operation. To determine if a key <strong>maybe</strong> present in the bloom filter, the following steps need to be performed:</p>

<ol>
  <li>The input key goes through K hash functions.</li>
  <li>The output of every hash function is reduced to a value between <code class="language-plaintext highlighter-rouge">0 and M-1</code> to get the appropriate bit in the bit vector.</li>
  <li>The corresponding bit is checked to see if it is set. If the bit is not set, we return <code class="language-plaintext highlighter-rouge">false</code>.</li>
  <li>We return <code class="language-plaintext highlighter-rouge">true</code> if all the bits determined from steps 1 and 2 are set.</li>
</ol>

<p>The idea behind the <code class="language-plaintext highlighter-rouge">has</code> operation is presented in the image below. We are using the same bit vector that was generated after the <code class="language-plaintext highlighter-rouge">put</code> operations were done. In the below image, we have K=2 (total hash functions) and M=8 (bit vector size).</p>

<div class="align-center">
    <img style="padding-left: 0; max-width: 90%" src="/assets/img/pexels/bloomfilterhas.png" class="wp-image-878" />
</div>

<p>Bloom filters can have false positives. The image above represents a false positive for the input <code class="language-plaintext highlighter-rouge">Z</code>.</p>

<h3 id="adding-tests-for-put-and-has">Adding tests for put and has</h3>

<p>Let’s add a couple of tests for <code class="language-plaintext highlighter-rouge">put</code> and <code class="language-plaintext highlighter-rouge">has</code> and understand them.</p>

<div class="language-golang highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">TestAddsAKeyAndChecksForItsPositiveExistence</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">bloomFilter</span> <span class="o">:=</span> <span class="n">newBloomFilter</span><span class="p">(</span><span class="m">20</span><span class="p">,</span> <span class="m">0.001</span><span class="p">)</span> <span class="c">//takes capacity and false positive rate</span>
    
    <span class="n">key</span> <span class="o">:=</span> <span class="n">model</span><span class="o">.</span><span class="n">NewSlice</span><span class="p">([]</span><span class="kt">byte</span><span class="p">(</span><span class="s">"Company"</span><span class="p">))</span>
    <span class="n">bloomFilter</span><span class="o">.</span><span class="n">Put</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
    
    <span class="k">if</span> <span class="n">bloomFilter</span><span class="o">.</span><span class="n">Has</span><span class="p">(</span><span class="n">key</span><span class="p">)</span> <span class="o">==</span> <span class="no">false</span> <span class="p">{</span>
        <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"Expected %v key to be present but was not"</span><span class="p">,</span> <span class="n">key</span><span class="o">.</span><span class="n">AsString</span><span class="p">())</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>As a part of this test, we do the following:</p>
<ol>
  <li>Create a new bloom filter with <code class="language-plaintext highlighter-rouge">capacity=20</code> and <code class="language-plaintext highlighter-rouge">falsePositiveRate=0.001</code></li>
  <li>Create a new key of type <code class="language-plaintext highlighter-rouge">model.Slice</code>. Keys are represented by <code class="language-plaintext highlighter-rouge">Slice</code> abstraction, which is a wrapper over a byte slice.</li>
  <li>Put the key in.</li>
  <li>Assert that the key is present in the bloom filter</li>
</ol>

<blockquote>
  <p>A bloom filter can never have false negatives. So, we can be sure that the above assertion will always succeed.</p>
</blockquote>

<div class="language-golang highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">TestAddsAKeyAndChecksForTheExistenceOfANonExistingKey</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">bloomFilter</span> <span class="o">:=</span> <span class="n">newBloomFilter</span><span class="p">(</span><span class="m">20</span><span class="p">,</span> <span class="m">0.001</span><span class="p">)</span> <span class="c">//takes capacity and false positive rate</span>
    
    <span class="n">key</span> <span class="o">:=</span> <span class="n">model</span><span class="o">.</span><span class="n">NewSlice</span><span class="p">([]</span><span class="kt">byte</span><span class="p">(</span><span class="s">"Company"</span><span class="p">))</span>
    <span class="n">bloomFilter</span><span class="o">.</span><span class="n">Put</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
    
    <span class="k">if</span> <span class="n">bloomFilter</span><span class="o">.</span><span class="n">Has</span><span class="p">(</span><span class="n">model</span><span class="o">.</span><span class="n">NewSlice</span><span class="p">([]</span><span class="kt">byte</span><span class="p">(</span><span class="s">"Missing"</span><span class="p">)))</span> <span class="o">==</span> <span class="no">true</span> <span class="p">{</span>
        <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"Expected %v key to be missing but was present"</span><span class="p">,</span> <span class="n">model</span><span class="o">.</span><span class="n">NewSlice</span><span class="p">([]</span><span class="kt">byte</span><span class="p">(</span><span class="s">"Missing"</span><span class="p">))</span><span class="o">.</span><span class="n">AsString</span><span class="p">())</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This test is very much similar to the previous one. As a part of this test, we want to assert that the given key should not be present in the bloom filter.</p>

<blockquote>
  <p>A test of this nature can fail in the case of a false positive.</p>
</blockquote>

<p>Now is the right time to build a bloom filter.</p>

<h3 id="building-bloom-filter">Building bloom filter</h3>

<p>Let’s understand the structure of  <code class="language-plaintext highlighter-rouge">BloomFilter</code> before we get into the functions.</p>

<div class="language-golang highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">BloomFilter</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">capacity</span>              <span class="kt">int</span>
    <span class="n">numberOfHashFunctions</span> <span class="kt">int</span>
    <span class="n">falsePositiveRate</span>     <span class="kt">float64</span>
    <span class="n">bitVector</span>             <span class="o">*</span><span class="n">bitset</span><span class="o">.</span><span class="n">BitSet</span>
    <span class="n">bitVectorSize</span>         <span class="kt">uint</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">newBloomFilter</span><span class="p">(</span><span class="n">capacity</span> <span class="kt">int</span><span class="p">,</span> <span class="n">falsePositiveRate</span> <span class="kt">float64</span><span class="p">)</span> <span class="o">*</span><span class="n">BloomFilter</span> <span class="p">{</span>
   
    <span class="c">//determine the number of hash functions</span>
    <span class="n">numberOfHashFunctions</span> <span class="o">:=</span> <span class="n">numberOfHashFunctions</span><span class="p">(</span><span class="n">falsePositiveRate</span><span class="p">)</span>
    
    <span class="c">//determine the bit vector size</span>
    <span class="n">bitVectorSize</span> <span class="o">:=</span> <span class="n">bitVectorSize</span><span class="p">(</span><span class="n">capacity</span><span class="p">,</span> <span class="n">falsePositiveRate</span><span class="p">)</span>
    
    <span class="c">//create a new instance of BloomFilter with a bit vector of determined size</span>
    <span class="k">return</span> <span class="o">&amp;</span><span class="n">BloomFilter</span><span class="p">{</span>
        <span class="n">capacity</span><span class="o">:</span>              <span class="n">capacity</span><span class="p">,</span>
        <span class="n">numberOfHashFunctions</span><span class="o">:</span> <span class="n">numberOfHashFunctions</span><span class="p">,</span>
        <span class="n">falsePositiveRate</span><span class="o">:</span>     <span class="n">falsePositiveRate</span><span class="p">,</span>
        <span class="n">bitVector</span><span class="o">:</span>             <span class="n">bitset</span><span class="o">.</span><span class="n">New</span><span class="p">(</span><span class="kt">uint</span><span class="p">(</span><span class="n">bitVectorSize</span><span class="p">)),</span>
        <span class="n">bitVectorSize</span><span class="o">:</span>         <span class="kt">uint</span><span class="p">(</span><span class="n">bitVectorSize</span><span class="p">),</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The idea behind <code class="language-plaintext highlighter-rouge">newBloomFilter</code> function can be summarized as:</p>
<ol>
  <li>Determine the number of hash functions (K)</li>
  <li>Determine the bit vector size (M)</li>
  <li>Create a new instance of <code class="language-plaintext highlighter-rouge">BitSet</code> using <code class="language-plaintext highlighter-rouge">bitset.New(...).</code></li>
  <li>Return a new instance of <code class="language-plaintext highlighter-rouge">BloomFilter</code></li>
</ol>

<blockquote>
  <p>The field <code class="language-plaintext highlighter-rouge">bitVector</code> inside the <code class="language-plaintext highlighter-rouge">BloomFilter</code> struct is a pointer to <code class="language-plaintext highlighter-rouge">bitset.BitSet</code>. We use the bitset package offered by the library <a href="https://github.com/bits-and-blooms/">bits-and-blooms</a>.</p>
</blockquote>

<p>The values of K and M are calculated using the below functions.</p>

<div class="language-golang highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//calculate numberOfHashFunctions(K)</span>
<span class="k">func</span> <span class="n">numberOfHashFunctions</span><span class="p">(</span><span class="n">falsePositiveRate</span> <span class="kt">float64</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
    <span class="k">return</span> <span class="kt">int</span><span class="p">(</span><span class="n">math</span><span class="o">.</span><span class="n">Ceil</span><span class="p">(</span><span class="n">math</span><span class="o">.</span><span class="n">Log2</span><span class="p">(</span><span class="m">1.0</span> <span class="o">/</span> <span class="n">falsePositiveRate</span><span class="p">)))</span>
<span class="p">}</span>

<span class="c">//calculate bitVectorSize(M)</span>
<span class="k">func</span> <span class="n">bitVectorSize</span><span class="p">(</span><span class="n">capacity</span> <span class="kt">int</span><span class="p">,</span> <span class="n">falsePositiveRate</span> <span class="kt">float64</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
    <span class="c">//ln22 = ln2^2</span>
    <span class="n">ln22</span> <span class="o">:=</span> <span class="n">math</span><span class="o">.</span><span class="n">Pow</span><span class="p">(</span><span class="n">math</span><span class="o">.</span><span class="n">Ln2</span><span class="p">,</span> <span class="m">2</span><span class="p">)</span>
    <span class="k">return</span> <span class="kt">int</span><span class="p">(</span><span class="kt">float64</span><span class="p">(</span><span class="n">capacity</span><span class="p">)</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">Abs</span><span class="p">(</span><span class="n">math</span><span class="o">.</span><span class="n">Log</span><span class="p">(</span><span class="n">falsePositiveRate</span><span class="p">))</span> <span class="o">/</span> <span class="n">ln22</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Now that we have determined the <code class="language-plaintext highlighter-rouge">K</code> and <code class="language-plaintext highlighter-rouge">M</code> values let’s implement <code class="language-plaintext highlighter-rouge">Put</code>. The idea can be summarized as follows:</p>
<ol>
  <li>Run <code class="language-plaintext highlighter-rouge">K</code> hash functions or a single hash function with different seed values, <code class="language-plaintext highlighter-rouge">K</code> times over an input.</li>
  <li>Reduce the hashed value between <code class="language-plaintext highlighter-rouge">0 and M-1</code> to set the appropriate bit in the bit vector.</li>
  <li>Set the bit in the bit vector at the identified position.</li>
</ol>

<p>This is how the above approach can be implemented:</p>

<div class="language-golang highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">bloomFilter</span> <span class="o">*</span><span class="n">BloomFilter</span><span class="p">)</span> <span class="n">Put</span><span class="p">(</span><span class="n">key</span> <span class="n">model</span><span class="o">.</span><span class="n">Slice</span><span class="p">)</span> <span class="p">{</span>
    <span class="c">//get the bit vector indices to set</span>
    <span class="n">indices</span> <span class="o">:=</span> <span class="n">bloomFilter</span><span class="o">.</span><span class="n">keyIndices</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">index</span> <span class="o">:=</span> <span class="m">0</span><span class="p">;</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">indices</span><span class="p">);</span> <span class="n">index</span><span class="o">++</span> <span class="p">{</span>
        <span class="n">position</span> <span class="o">:=</span> <span class="n">indices</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>
        <span class="c">//set the bit at the identified position</span>
        <span class="n">bloomFilter</span><span class="o">.</span><span class="n">bitVector</span><span class="o">.</span><span class="n">Set</span><span class="p">(</span><span class="kt">uint</span><span class="p">(</span><span class="n">position</span><span class="p">))</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="c">// Use the hash function to get all keyIndices of the given key</span>
<span class="k">func</span> <span class="p">(</span><span class="n">bloomFilter</span> <span class="o">*</span><span class="n">BloomFilter</span><span class="p">)</span> <span class="n">keyIndices</span><span class="p">(</span><span class="n">key</span> <span class="n">model</span><span class="o">.</span><span class="n">Slice</span><span class="p">)</span> <span class="p">[]</span><span class="kt">uint64</span> <span class="p">{</span>
    <span class="n">indices</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">uint64</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="n">bloomFilter</span><span class="o">.</span><span class="n">numberOfHashFunctions</span><span class="p">)</span>
    <span class="n">runHash</span> <span class="o">:=</span> <span class="k">func</span><span class="p">(</span><span class="n">key</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">,</span> <span class="n">seed</span> <span class="kt">uint32</span><span class="p">)</span> <span class="kt">uint64</span> <span class="p">{</span>
        <span class="n">hash</span><span class="p">,</span> <span class="n">_</span> <span class="o">:=</span> <span class="n">murmur3</span><span class="o">.</span><span class="n">Sum128WithSeed</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">seed</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">hash</span>
    <span class="p">}</span>
    <span class="n">indexForHash</span> <span class="o">:=</span> <span class="k">func</span><span class="p">(</span><span class="n">hash</span> <span class="kt">uint64</span><span class="p">)</span> <span class="kt">uint64</span> <span class="p">{</span>
        <span class="c">//index = hash % M</span>
        <span class="k">return</span> <span class="n">hash</span> <span class="o">%</span> <span class="kt">uint64</span><span class="p">(</span><span class="n">bloomFilter</span><span class="o">.</span><span class="n">bitVectorSize</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">for</span> <span class="n">index</span> <span class="o">:=</span> <span class="m">0</span><span class="p">;</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="n">bloomFilter</span><span class="o">.</span><span class="n">numberOfHashFunctions</span><span class="p">;</span> <span class="n">index</span><span class="o">++</span> <span class="p">{</span>
        <span class="c">//run murmur3 hash for the given key with index as the seed</span>
        <span class="n">hash</span> <span class="o">:=</span> <span class="n">runHash</span><span class="p">(</span><span class="n">key</span><span class="o">.</span><span class="n">GetRawContent</span><span class="p">(),</span> <span class="kt">uint32</span><span class="p">(</span><span class="n">index</span><span class="p">))</span>
        <span class="c">//identify the index between 0 and M-1 and return the indices</span>
        <span class="n">indices</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">indices</span><span class="p">,</span> <span class="n">indexForHash</span><span class="p">(</span><span class="n">hash</span><span class="p">))</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">indices</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Let’s implement <code class="language-plaintext highlighter-rouge">Has</code>. The idea can be summarized as follows:</p>
<ol>
  <li>Run <code class="language-plaintext highlighter-rouge">K</code> hash functions or a single hash function with different seed values, <code class="language-plaintext highlighter-rouge">K</code> times over an input.</li>
  <li>Reduce the hashed value between <code class="language-plaintext highlighter-rouge">0 and M-1</code> to get the appropriate bit in the bit vector.</li>
  <li>Check the bit in the bit vector at the identified position. If the bit is not set, return <code class="language-plaintext highlighter-rouge">false</code> to indicate that the input is absent.</li>
  <li>If the bits at all the identified positions are set, return <code class="language-plaintext highlighter-rouge">true</code> to indicate that the input <strong>may be present</strong>.</li>
</ol>

<p>This is how the above approach can be implemented:</p>

<div class="language-golang highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">bloomFilter</span> <span class="o">*</span><span class="n">BloomFilter</span><span class="p">)</span> <span class="n">Has</span><span class="p">(</span><span class="n">key</span> <span class="n">model</span><span class="o">.</span><span class="n">Slice</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
    <span class="c">//get the bit vector indices</span>
    <span class="n">indices</span> <span class="o">:=</span> <span class="n">bloomFilter</span><span class="o">.</span><span class="n">keyIndices</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">index</span> <span class="o">:=</span> <span class="m">0</span><span class="p">;</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">indices</span><span class="p">);</span> <span class="n">index</span><span class="o">++</span> <span class="p">{</span>
        <span class="n">position</span> <span class="o">:=</span> <span class="n">indices</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>
        <span class="c">//test the bit at the identified position, return false if the bit is not set</span>
        <span class="k">if</span> <span class="o">!</span><span class="n">bloomFilter</span><span class="o">.</span><span class="n">bitVector</span><span class="o">.</span><span class="n">Test</span><span class="p">(</span><span class="kt">uint</span><span class="p">(</span><span class="n">position</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">return</span> <span class="no">false</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="no">true</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="space-optimized-data-structure">Space-optimized data structure</h3>

<p>Bloom filter is a space-optimized data structure that does not store the keys. Let’s see the total space we need to hold <code class="language-plaintext highlighter-rouge">half a million keys</code> in the bloom filter.</p>

<p>The values of K and M were calculated using the following functions.</p>

<div class="language-golang highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//calculate numberOfHashFunctions(K)</span>
<span class="k">func</span> <span class="n">numberOfHashFunctions</span><span class="p">(</span><span class="n">falsePositiveRate</span> <span class="kt">float64</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
    <span class="k">return</span> <span class="kt">int</span><span class="p">(</span><span class="n">math</span><span class="o">.</span><span class="n">Ceil</span><span class="p">(</span><span class="n">math</span><span class="o">.</span><span class="n">Log2</span><span class="p">(</span><span class="m">1.0</span> <span class="o">/</span> <span class="n">falsePositiveRate</span><span class="p">)))</span>
<span class="p">}</span>

<span class="c">//calculate bitVectorSize(M)</span>
<span class="k">func</span> <span class="n">bitVectorSize</span><span class="p">(</span><span class="n">capacity</span> <span class="kt">int</span><span class="p">,</span> <span class="n">falsePositiveRate</span> <span class="kt">float64</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
    <span class="c">//ln22 = ln2^2</span>
    <span class="n">ln22</span> <span class="o">:=</span> <span class="n">math</span><span class="o">.</span><span class="n">Pow</span><span class="p">(</span><span class="n">math</span><span class="o">.</span><span class="n">Ln2</span><span class="p">,</span> <span class="m">2</span><span class="p">)</span>
    <span class="k">return</span> <span class="kt">int</span><span class="p">(</span><span class="kt">float64</span><span class="p">(</span><span class="n">capacity</span><span class="p">)</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">Abs</span><span class="p">(</span><span class="n">math</span><span class="o">.</span><span class="n">Log</span><span class="p">(</span><span class="n">falsePositiveRate</span><span class="p">))</span> <span class="o">/</span> <span class="n">ln22</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Let’s run these functions for the <code class="language-plaintext highlighter-rouge">500000</code> keys and <code class="language-plaintext highlighter-rouge">0.001</code> as the false positive rate.</p>

<div class="language-golang highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
   <span class="n">numberOfHashFunctions</span> <span class="o">:=</span> <span class="n">numberOfHashFunctions</span><span class="p">(</span><span class="m">0.001</span><span class="p">)</span>
   <span class="n">bitVectorSize</span> <span class="o">:=</span> <span class="n">bitVectorSize</span><span class="p">(</span><span class="m">500000</span><span class="p">,</span> <span class="m">0.001</span><span class="p">)</span>
   
   <span class="nb">println</span><span class="p">(</span><span class="s">"numberOfHashFunctions::"</span><span class="p">,</span> <span class="n">numberOfHashFunctions</span><span class="p">)</span>
   <span class="nb">println</span><span class="p">(</span><span class="s">"bitVectorSize::"</span><span class="p">,</span> <span class="n">bitVectorSize</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The above code prints <code class="language-plaintext highlighter-rouge">numberOfHashFunctions:: 10 bitVectorSize:: 7188793</code>. This means a total space of 878KB <code class="language-plaintext highlighter-rouge">((7188793/8)/1024)</code> for storing <code class="language-plaintext highlighter-rouge">500000</code> keys.</p>

<p>Now is the right time to understand how BadgerDB uses bloom filters.</p>

<h3 id="badgerdb">BadgerDB</h3>

<p>Bloom filter is used in a lot of projects, including <a href="https://github.com/dgraph-io/badger">BadgerDB</a> and <a href="https://github.com/apache/spark">Apache Spark</a>. This article explains the way the bloom filter is used in BadgerDB.</p>

<blockquote>
  <p>BadgerDB is an embeddable, persistent, fast key-value (KV) database written in pure Go. Badger’s design is a combination of an LSM tree<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup> with a value log and is based on a paper titled <a href="https://www.usenix.org/system/files/conference/fast16/fast16-papers-lu.pdf">WiscKey: Separating Keys from Values in SSD-conscious Storage</a></p>
</blockquote>

<p>A log-structured merge tree (LSM tree) is a storage engine data structure typically used when dealing with write-heavy workloads. The write path is optimized by performing sequential writes on the disk. To perform sequential writes on disk, the LSM tree buffers the data in memory and then flushes to disk once the in-memory buffer is full. To ensure the durability of the data, every write is first added to a WAL (write-ahead log) file before updating the in-memory buffer. The in-memory buffer is called the memtable. After the memtable is full, it is converted to SSTable (sorted string table) and flushed to disk.</p>

<p>Every <code class="language-plaintext highlighter-rouge">get(key)</code> operation first queries the in-memory memtable(s) to see if the value for the given key exists in memory. If not, the <code class="language-plaintext highlighter-rouge">get(key)</code> operation retrieves the value from SSTables (disk-based structures).</p>

<p>SSTables are organized into levels. Below is the organization of SSTables in <a href="https://github.com/google/leveldb">LevelDB</a></p>

<div class="align-center">
    <img style="padding-left: 0; max-width: 90%" src="/assets/img/pexels/sstable.png" class="wp-image-878" />
</div>

<p>The size of the SSTables (or the files) increases as we go down the levels.</p>

<p>One way to perform a <code class="language-plaintext highlighter-rouge">get(key)</code> operation on SSTables is to scan all the SSTables starting from <code class="language-plaintext highlighter-rouge">level=0 to level=N</code> and return the value as soon as it is found. This approach is brute-force, and it means a lot of IO costs.</p>

<p>This approach can be optimized by using a bloom filter. Let’s see how:</p>
<ol>
  <li>Every SSTable can be associated with its filter.</li>
  <li>All the keys of an SSTable will be added to its bloom filter.</li>
</ol>

<blockquote>
  <p>SSTable (sorted string table) contains all the key-value pairs sorted by key. SSTable file is organized into multiple sections (or blocks), including index block, bloom filter block, data block and footer block etc. BadgerDB puts the bloom filter (the byte array of the bloom filter) inside the SSTable.</p>
</blockquote>

<p>To perform a <code class="language-plaintext highlighter-rouge">get(key)</code> operation on an SSTable, the application will query the bloom filter associated with it.</p>

<blockquote>
  <p>To query the bloom filter associated with an SSTable, the bloom filter block (byte array) needs to be read in memory. The information about the begin and the end offsets of the bloom filter is encoded in the footer block of the SSTable.</p>
</blockquote>

<p>If the bloom filter returns <code class="language-plaintext highlighter-rouge">true</code>, the application will scan the data block of the SSTable to get the value of the given key. This also means that the bloom filter will check an SSTable even in the case of false positives.</p>

<p>Let’s now look at BadgerDB’s code to understand the use of the bloom filter.</p>

<div class="language-golang highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//some fields omitted</span>
<span class="k">type</span> <span class="n">levelsController</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">levels</span> <span class="p">[]</span><span class="o">*</span><span class="n">levelHandler</span>
<span class="p">}</span>

<span class="c">//get searches for a given key in all the levels of the LSM tree starting with startLevel</span>
<span class="c">//code omitted</span>
<span class="k">func</span> <span class="p">(</span><span class="n">s</span> <span class="o">*</span><span class="n">levelsController</span><span class="p">)</span> <span class="n">get</span><span class="p">(</span><span class="n">key</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">,</span> <span class="n">maxVs</span> <span class="n">y</span><span class="o">.</span><span class="n">ValueStruct</span><span class="p">,</span> <span class="n">startLevel</span> <span class="kt">int</span><span class="p">)</span> <span class="p">(</span><span class="n">y</span><span class="o">.</span><span class="n">ValueStruct</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>   
    <span class="n">version</span> <span class="o">:=</span> <span class="n">y</span><span class="o">.</span><span class="n">ParseTs</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">level</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">s</span><span class="o">.</span><span class="n">levels</span> <span class="p">{</span>
        <span class="c">// Ignore all levels below startLevel. This is useful for GC when L0 is kept in memory.</span>
        <span class="k">if</span> <span class="n">level</span><span class="o">.</span><span class="n">level</span> <span class="o">&lt;</span> <span class="n">startLevel</span> <span class="p">{</span>
            <span class="k">continue</span>
        <span class="p">}</span>
        <span class="c">//invoke levelHandler to get the value for the given key</span>
        <span class="n">valueStruct</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">level</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>        
        <span class="k">if</span> <span class="n">valueStruct</span><span class="o">.</span><span class="n">Version</span> <span class="o">==</span> <span class="n">version</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">valueStruct</span><span class="p">,</span> <span class="no">nil</span>
        <span class="p">}</span>     
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">maxVs</span><span class="p">,</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>

<p>SSTables are organized into multiple levels and <code class="language-plaintext highlighter-rouge">levelsController</code> is an abstraction to represent these levels. Each level is represented by another abstraction called <code class="language-plaintext highlighter-rouge">levelHandler</code>. <code class="language-plaintext highlighter-rouge">levelsController</code> maintains an array of levels or <code class="language-plaintext highlighter-rouge">levelHandler</code>. The <code class="language-plaintext highlighter-rouge">get</code> method does the following:</p>
<ol>
  <li>Scan through all the levels greater than or equal to the <code class="language-plaintext highlighter-rouge">startLevel</code>.</li>
  <li>For each level, ask the <code class="language-plaintext highlighter-rouge">levelHandler</code> to get the value for the key by invoking <code class="language-plaintext highlighter-rouge">level.get(key)</code>.</li>
  <li>Match the key version and return the received value if it matches.</li>
</ol>

<p><code class="language-plaintext highlighter-rouge">levelHandler</code> represents a level and maintains an array of all the SSTables for that level. <code class="language-plaintext highlighter-rouge">get</code> method attempts to return the value with the latest version:</p>

<div class="language-golang highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//some fields omitted</span>
<span class="k">type</span> <span class="n">levelHandler</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">tables</span>   <span class="p">[]</span><span class="o">*</span><span class="n">table</span><span class="o">.</span><span class="n">Table</span>
    <span class="n">level</span>    <span class="kt">int</span>
<span class="p">}</span>

<span class="c">// get returns value for a given key or the key after that. If not found, return nil.</span>
<span class="k">func</span> <span class="p">(</span><span class="n">lHandler</span> <span class="o">*</span><span class="n">levelHandler</span><span class="p">)</span> <span class="n">get</span><span class="p">(</span><span class="n">key</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">(</span><span class="n">y</span><span class="o">.</span><span class="n">ValueStruct</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">tables</span><span class="p">,</span> <span class="n">decr</span> <span class="o">:=</span> <span class="n">lHandler</span><span class="o">.</span><span class="n">getTableForKey</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
    
    <span class="c">//get the key without a timestamp</span>
    <span class="n">keyNoTs</span> <span class="o">:=</span> <span class="n">y</span><span class="o">.</span><span class="n">ParseKey</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
    
    <span class="c">//get the hash of the key</span>
    <span class="n">hash</span>    <span class="o">:=</span> <span class="n">y</span><span class="o">.</span><span class="n">Hash</span><span class="p">(</span><span class="n">keyNoTs</span><span class="p">)</span>
    
    <span class="k">var</span> <span class="n">maxVs</span> <span class="n">y</span><span class="o">.</span><span class="n">ValueStruct</span>
    <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">table</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">tables</span> <span class="p">{</span>
        <span class="c">//if the table does not have the hash of the key, there is no point in scanning the table</span>
        <span class="c">//(*) bloom filter lookup</span>
        <span class="k">if</span> <span class="n">table</span><span class="o">.</span><span class="n">DoesNotHave</span><span class="p">(</span><span class="n">hash</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">continue</span>
        <span class="p">}</span>
    
        <span class="c">//create an iterator over the table</span>
        <span class="n">iterator</span> <span class="o">:=</span> <span class="n">table</span><span class="o">.</span><span class="n">NewIterator</span><span class="p">(</span><span class="m">0</span><span class="p">)</span>
        <span class="k">defer</span> <span class="n">iterator</span><span class="o">.</span><span class="n">Close</span><span class="p">()</span>
    
        <span class="c">//seek to the key in SSTable</span>
        <span class="n">iterator</span><span class="o">.</span><span class="n">Seek</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
        <span class="k">if</span> <span class="o">!</span><span class="n">iterator</span><span class="o">.</span><span class="n">Valid</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">continue</span>
        <span class="p">}</span>
    
        <span class="c">//store the value with the maximum version</span>
        <span class="k">if</span> <span class="n">y</span><span class="o">.</span><span class="n">SameKey</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">iterator</span><span class="o">.</span><span class="n">Key</span><span class="p">())</span> <span class="p">{</span>
            <span class="k">if</span> <span class="n">version</span> <span class="o">:=</span> <span class="n">y</span><span class="o">.</span><span class="n">ParseTs</span><span class="p">(</span><span class="n">iterator</span><span class="o">.</span><span class="n">Key</span><span class="p">());</span> <span class="n">maxVs</span><span class="o">.</span><span class="n">Version</span> <span class="o">&lt;</span> <span class="n">version</span> <span class="p">{</span>
                <span class="n">maxVs</span>       <span class="o">=</span> <span class="n">iterator</span><span class="o">.</span><span class="n">ValueCopy</span><span class="p">()</span>
                <span class="n">maxVs</span><span class="o">.</span><span class="n">Version</span> <span class="o">=</span> <span class="n">version</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">maxVs</span><span class="p">,</span> <span class="n">decr</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>
<p>The working of the <code class="language-plaintext highlighter-rouge">get</code> method of <code class="language-plaintext highlighter-rouge">levelHandler</code> can be summarized as:</p>
<ol>
  <li>Get the hash of the key without a timestamp.</li>
  <li>Iterate through the tables (SSTables) and if the current table does not contain the given key, skip it and move to the following table.</li>
  <li>If the table <strong>can contain</strong> the given key, create an iterator over the table.</li>
  <li>Use <code class="language-plaintext highlighter-rouge">iterator.Seek</code> to seek to the given key.</li>
  <li>Store the value of the matching key only if its version is greater than the existing version.</li>
  <li>Return the value (value is represented by <code class="language-plaintext highlighter-rouge">ValueStruct</code>).</li>
</ol>

<p><code class="language-plaintext highlighter-rouge">table.DoesNotHave(hash)</code> does a bloom filter lookup. <code class="language-plaintext highlighter-rouge">DoesNotHave</code> returns true if the table does not have the key.</p>

<h3 id="code">Code</h3>

<p>The code for this article is available <a href="https://github.com/SarthakMakhija/probabilistic-data-structures/tree/main/membership">here</a>.</p>

<h3 id="references">References</h3>

<ul>
  <li><a href="https://en.wikipedia.org/wiki/Bloom_filter">Bloom filter</a></li>
  <li><a href="https://freecontent.manning.com/all-about-bloom-filters/">Bloom filter</a></li>
  <li><a href="https://github.com/dgraph-io/badger">BadgerDB</a></li>
  <li><a href="https://segmentfault.com/a/1190000041198407/en">LSM tree</a></li>
</ul>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><a href="https://www.geeksforgeeks.org/introduction-to-the-probabilistic-data-structure/">Probabilistic data structures</a> provide approximate answers to queries about a large dataset rather than exact answers. These data structures are designed to handle large amounts of data in real-time by making trade-offs between accuracy and time and space efficiency. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p><a href="https://yetanotherdevblog.com/lsm/">LSM Tree</a> A log-structured merge tree (LSM tree) is a data structure typically used when dealing with write-heavy workloads. The write path is optimized by performing sequential writes. <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Sarthak Makhija</name></author><category term="Probabilistic data structures" /><category term="Probabilistic data structures" /><category term="Bloom filter" /><category term="Storage engine" /><summary type="html"><![CDATA[A Bloom filter is a probabilistic data structure used to test whether an element is a set member. A bloom filter can query against large amounts of data and return either "possibly in the set" or "definitely not in the set".]]></summary></entry><entry><title type="html">Count-min sketch</title><link href="https://tech-lessons.in/count-min-sketch/" rel="alternate" type="text/html" title="Count-min sketch" /><published>2023-02-24T00:00:00+05:30</published><updated>2023-02-24T00:00:00+05:30</updated><id>https://tech-lessons.in/count-min-sketch</id><content type="html" xml:base="https://tech-lessons.in/count-min-sketch/"><![CDATA[<p>Count-min sketch (CM sketch) is a probabilistic data structure<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup> used to estimate the frequency of events in a data stream.</p>

<p>It relies on hash functions to map events to frequencies, but unlike a hash table, it uses only sublinear space at the expense of over-counting some events due to hash collisions. The count–min sketch was invented in 2003 by Graham Cormode and S. Muthu Muthukrishnan.</p>

<h3 id="understanding-count-min-sketch">Understanding Count-min Sketch</h3>

<p>Let’s say we want to build a solution to count the frequency of elements in a data stream. One idea would be to use a <code class="language-plaintext highlighter-rouge">hashmap</code> with the data element as the key and count as the value. The approach works but does not scale with a data stream comprising billions of elements, the most unique.</p>

<p>We will have two challenges with <code class="language-plaintext highlighter-rouge">hashmap</code> in this case:</p>
<ol>
  <li>The number of elements in the hashmap will tend towards a billion. The overall space complexity would be O(N)<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup></li>
  <li>Rehashing can place significant CPU pressure</li>
</ol>

<p>This is where the Count-min sketch comes into the picture. The count-min sketch is a probabilistic data structure that can <strong>estimate</strong> the frequency of elements by using sublinear space at the expense of over-counting some elements due to hash collisions.</p>

<div class="align-center">
    <img style="padding-left: 0; max-width: 90%" src="/assets/img/pexels/countminsketch.png" class="wp-image-878" />
</div>

<p>Count-min sketch is represented as a D*W matrix, where D is the total number of hash functions (or depth) and W is the width or the number of counters per hash function. The matrix is initialized with zero at the beginning. A count-min sketch can be represented with the following structure:</p>

<div class="language-golang highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">const</span> <span class="n">depth</span> <span class="o">=</span> <span class="m">4</span>

<span class="k">type</span> <span class="n">CountMinSketch</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">matrix</span>        <span class="p">[</span><span class="n">depth</span><span class="p">]</span><span class="n">row</span>
    <span class="n">seeds</span>         <span class="p">[</span><span class="n">depth</span><span class="p">]</span><span class="kt">uint64</span>
    <span class="n">totalCounters</span> <span class="kt">uint64</span>
<span class="p">}</span>

<span class="k">type</span> <span class="n">row</span> <span class="p">[]</span><span class="kt">byte</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">CountMinSketch</code> contains the following:</p>
<ol>
  <li>A matrix of a byte array to store the counters. Each row will have <code class="language-plaintext highlighter-rouge">W</code> cells, and each cell will contain a byte.</li>
  <li>The total number of rows (or the total number of hash functions) is limited to four in the above code. So, D here is 4.</li>
  <li>An array of seed values of type <code class="language-plaintext highlighter-rouge">uint64</code> will be used to generate the hash of the data element.</li>
  <li>Total number of counters</li>
</ol>

<blockquote>
  <p>We plan to use a “four-bit counter” approach, with the lower four bits of a byte to store the counter for a key <em>K1</em> and the upper four bits to hold the counter for another key <em>K2</em>. That means a byte will store the counts for two keys.</p>
</blockquote>

<p><em>From now on, we will use the term “key” over “data element”</em>. Count-min sketch supports two operations - <code class="language-plaintext highlighter-rouge">increment(key)</code> and <code class="language-plaintext highlighter-rouge">estimate(key)</code>. Let’s understand the working of these operations.</p>

<p>The idea behind the <code class="language-plaintext highlighter-rouge">increment</code> operation can be summarized as follows:</p>

<ol>
  <li>Run D hash functions on the given key (hash0, hash1 and hash2 in the image above).</li>
  <li>Find a column index in the matrix by performing <code class="language-plaintext highlighter-rouge">hashValue % totalCounters</code>.</li>
  <li>Increment the value at the identified matrix cell using <a href="#4-bit-counter">four-bit counter approach</a>.</li>
</ol>

<p>The idea behind the <code class="language-plaintext highlighter-rouge">estimate</code> operation is similar to the <code class="language-plaintext highlighter-rouge">increment</code> operation.</p>

<ol>
  <li>Run D hash functions on the given key (hash0, hash1 and hash2 in the above image).</li>
  <li>Find a column index in the matrix by performing <code class="language-plaintext highlighter-rouge">hashValue % totalCounters</code>.</li>
  <li>Return the <strong>minimum value</strong> from all the identified matrix cells.</li>
</ol>

<blockquote>
  <p>We return the <strong>minimum value</strong> from all the identified matrix cells to account for hash conflicts between keys. 2 keys might get the same column index (<code class="language-plaintext highlighter-rouge">hashValue % totalCounters</code>) for the 0th row, but they might get different column indices for the 1st row. So, we take the minimum counter value from all the identified matrix cells to reduce the impact of hash conflicts between keys.</p>
</blockquote>

<h3 id="adding-tests-for-increment-and-estimate">Adding tests for increment and estimate</h3>

<p>Let’s add a test for <code class="language-plaintext highlighter-rouge">increment</code> and <code class="language-plaintext highlighter-rouge">estimate</code> operations.</p>

<div class="language-golang highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">TestGetsTheEstimateForKeysInAStream</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">stream</span> <span class="o">:=</span> <span class="p">[]</span><span class="n">model</span><span class="o">.</span><span class="n">Slice</span><span class="p">{</span>
        <span class="n">model</span><span class="o">.</span><span class="n">NewSlice</span><span class="p">([]</span><span class="kt">byte</span><span class="p">(</span><span class="s">"A"</span><span class="p">)),</span> 
        <span class="n">model</span><span class="o">.</span><span class="n">NewSlice</span><span class="p">([]</span><span class="kt">byte</span><span class="p">(</span><span class="s">"B"</span><span class="p">)),</span>
        <span class="n">model</span><span class="o">.</span><span class="n">NewSlice</span><span class="p">([]</span><span class="kt">byte</span><span class="p">(</span><span class="s">"A"</span><span class="p">)),</span> 
        <span class="n">model</span><span class="o">.</span><span class="n">NewSlice</span><span class="p">([]</span><span class="kt">byte</span><span class="p">(</span><span class="s">"C"</span><span class="p">)),</span>
        <span class="n">model</span><span class="o">.</span><span class="n">NewSlice</span><span class="p">([]</span><span class="kt">byte</span><span class="p">(</span><span class="s">"B"</span><span class="p">)),</span> 
        <span class="n">model</span><span class="o">.</span><span class="n">NewSlice</span><span class="p">([]</span><span class="kt">byte</span><span class="p">(</span><span class="s">"A"</span><span class="p">)),</span>
        <span class="n">model</span><span class="o">.</span><span class="n">NewSlice</span><span class="p">([]</span><span class="kt">byte</span><span class="p">(</span><span class="s">"B"</span><span class="p">)),</span> 
        <span class="n">model</span><span class="o">.</span><span class="n">NewSlice</span><span class="p">([]</span><span class="kt">byte</span><span class="p">(</span><span class="s">"C"</span><span class="p">)),</span>
    <span class="p">}</span>
    <span class="n">expectedCounts</span> <span class="o">:=</span> <span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">byte</span><span class="p">{</span>
        <span class="s">"A"</span><span class="o">:</span> <span class="m">3</span><span class="p">,</span>
        <span class="s">"B"</span><span class="o">:</span> <span class="m">3</span><span class="p">,</span>
        <span class="s">"C"</span><span class="o">:</span> <span class="m">2</span><span class="p">,</span>
    <span class="p">}</span>

    <span class="c">//instantiate countMinSketch with ten counters</span>
    <span class="n">countMinSketch</span> <span class="o">:=</span> <span class="n">newCountMinSketch</span><span class="p">(</span><span class="m">10</span><span class="p">)</span>

    <span class="c">//increment</span>
    <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">key</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">stream</span> <span class="p">{</span>
        <span class="n">countMinSketch</span><span class="o">.</span><span class="n">Increment</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="c">//estimate the count</span>
    <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">key</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">stream</span> <span class="p">{</span>
        <span class="n">count</span> <span class="o">:=</span> <span class="n">countMinSketch</span><span class="o">.</span><span class="n">Estimate</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
       <span class="k">if</span> <span class="n">count</span> <span class="o">&lt;</span> <span class="n">expectedCounts</span><span class="p">[</span><span class="n">key</span><span class="o">.</span><span class="n">AsString</span><span class="p">()]</span> <span class="p">{</span>
                <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span>
                    <span class="s">"Expected at least the count %v for key %v, received %v"</span><span class="p">,</span> 
                    <span class="n">expectedCounts</span><span class="p">[</span><span class="n">key</span><span class="o">.</span><span class="n">AsString</span><span class="p">()],</span> 
                    <span class="n">key</span><span class="o">.</span><span class="n">AsString</span><span class="p">(),</span> 
                    <span class="n">count</span>
                <span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Let’s quickly understand the test:</p>
<ol>
  <li>Create a <code class="language-plaintext highlighter-rouge">stream</code> of keys. Keys are represented by the <code class="language-plaintext highlighter-rouge">Slice</code> abstraction, which is a wrapper over a byte slice.</li>
  <li>Create a count-min sketch with ten counters (width as 10)
    <ul>
      <li>We will see in the code that the counters are in the power of 2.</li>
    </ul>
  </li>
  <li>Increment the count for all the keys in the stream.</li>
  <li>Assert the estimate of count for all the keys
    <blockquote>
      <p>As a part of the assertion, we want to ensure that the estimated count is “at least” equal to the expected count. In the case of hash collisions between two keys, an estimate of the count might be higher than the expected count. Hence, we hope that the estimated count is “at least” equal to the expected count.</p>
    </blockquote>
  </li>
</ol>

<h3 id="4-bit-counter">4-bit counter</h3>

<p>The idea behind the four-bit counter deserves its mention.</p>

<ul>
  <li>We can represent a maximum value of 15 <code class="language-plaintext highlighter-rouge">(00001111)</code> with four bits. This implies that the counter should freeze the moment it reaches 15.</li>
  <li>We need to use the lower and the upper four bits to represent counters for two different keys.</li>
  <li>Let’s use the <em>lower four bits to store the counter for even positions of the matrix</em> and <em>higher four bits for odd positions of the matrix</em>.</li>
</ul>

<div class="align-center">
    <img style="padding-left: 0; max-width: 90%" src="/assets/img/pexels/4bitcounter.png" class="wp-image-878" />
</div>

<ul>
  <li>This means if the number is even, we need to increment the lower four bits only if the counter represented by those bits has yet to reach 15.</li>
  <li>If the number is odd, we need to increment the higher four bits only if the counter represented by those bits has yet to reach 15. To ensure that the counter represented by the higher four bits has not reached 15, we can perform a right shift by four, followed by an AND operation with 0x0f.</li>
</ul>

<div class="align-center">
    <img style="padding-left: 0; max-width: 90%" src="/assets/img/pexels/4bitcounterwithshift.png" class="wp-image-878" />
</div>

<ul>
  <li>Imagine a binary value <code class="language-plaintext highlighter-rouge">11110000</code> at some matrix index. Also, consider that the <code class="language-plaintext highlighter-rouge">Increment</code> operation is called, and the <code class="language-plaintext highlighter-rouge">position</code> is an odd number.</li>
  <li>We should increment the higher four bits because we have an odd-numbered position. But, the binary value already has the maximum value for an odd number. To ensure that the increment operation does not result in an overflow, we do a right shift by four (<code class="language-plaintext highlighter-rouge">0b11110000 &gt;&gt; 4</code>), which gives us <code class="language-plaintext highlighter-rouge">00001111</code>. Now, we perform an AND operation with <code class="language-plaintext highlighter-rouge">0x0f (00001111)</code> to ensure we only get the lower four bits. We ensure that the value is less than 15 before incrementing. In this case, we do not increment because the counter has reached 15.</li>
</ul>

<p>Now is the right time to build a count-min sketch.</p>

<h3 id="building-count-min-sketch">Building Count-min sketch</h3>

<p>Let’s understand the critical aspects of <code class="language-plaintext highlighter-rouge">newCountMinSketch</code> function.</p>

<div class="language-golang highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">const</span> <span class="n">depth</span> <span class="o">=</span> <span class="m">4</span>

<span class="k">type</span> <span class="n">row</span> <span class="p">[]</span><span class="kt">byte</span>

<span class="k">type</span> <span class="n">CountMinSketch</span> <span class="k">struct</span> <span class="p">{</span>
   <span class="n">matrix</span>        <span class="p">[</span><span class="n">depth</span><span class="p">]</span><span class="n">row</span>
   <span class="n">seeds</span>         <span class="p">[</span><span class="n">depth</span><span class="p">]</span><span class="kt">uint64</span>
   <span class="n">totalCounters</span> <span class="kt">uint64</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">newCountMinSketch</span><span class="p">(</span><span class="n">counters</span> <span class="kt">int</span><span class="p">)</span> <span class="o">*</span><span class="n">CountMinSketch</span> <span class="p">{</span>
    <span class="n">nextPowerOf2</span> <span class="o">:=</span> <span class="k">func</span><span class="p">(</span><span class="n">counters</span> <span class="kt">int64</span><span class="p">)</span> <span class="kt">int64</span> <span class="p">{</span>
        <span class="n">counters</span><span class="o">--</span>
        <span class="n">counters</span> <span class="o">|=</span> <span class="n">counters</span> <span class="o">&gt;&gt;</span> <span class="m">1</span>
        <span class="n">counters</span> <span class="o">|=</span> <span class="n">counters</span> <span class="o">&gt;&gt;</span> <span class="m">2</span>
        <span class="n">counters</span> <span class="o">|=</span> <span class="n">counters</span> <span class="o">&gt;&gt;</span> <span class="m">4</span>
        <span class="n">counters</span> <span class="o">|=</span> <span class="n">counters</span> <span class="o">&gt;&gt;</span> <span class="m">8</span>
        <span class="n">counters</span> <span class="o">|=</span> <span class="n">counters</span> <span class="o">&gt;&gt;</span> <span class="m">16</span>
        <span class="n">counters</span> <span class="o">|=</span> <span class="n">counters</span> <span class="o">&gt;&gt;</span> <span class="m">32</span>
        <span class="n">counters</span><span class="o">++</span>
        <span class="k">return</span> <span class="n">counters</span>
    <span class="p">}</span>

    <span class="c">//initialize the source to generate seed values and set the total counters to be a power of 2</span>
    <span class="c">//if the user-specified counter is 10, we get a total of 16 counters</span>
    <span class="n">source</span><span class="p">,</span> <span class="n">updatedCounters</span> <span class="o">:=</span> <span class="n">rand</span><span class="o">.</span><span class="n">New</span><span class="p">(</span><span class="n">rand</span><span class="o">.</span><span class="n">NewSource</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">Now</span><span class="p">()</span><span class="o">.</span><span class="n">UnixNano</span><span class="p">())),</span> <span class="n">nextPowerOf2</span><span class="p">(</span><span class="kt">int64</span><span class="p">(</span><span class="n">counters</span><span class="p">))</span>

    <span class="c">//instantiate CountMinSketch</span>
    <span class="n">countMinSketch</span>  <span class="o">:=</span> <span class="o">&amp;</span><span class="n">CountMinSketch</span><span class="p">{</span><span class="n">totalCounters</span><span class="o">:</span> <span class="kt">uint64</span><span class="p">(</span><span class="n">updatedCounters</span><span class="p">)}</span>

    <span class="k">for</span> <span class="n">index</span> <span class="o">:=</span> <span class="m">0</span><span class="p">;</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="n">depth</span><span class="p">;</span> <span class="n">index</span><span class="o">++</span> <span class="p">{</span>
        <span class="c">//generate a new seed</span>
        <span class="n">countMinSketch</span><span class="o">.</span><span class="n">seeds</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">=</span> <span class="n">source</span><span class="o">.</span><span class="n">Uint64</span><span class="p">()</span>
        <span class="c">//create a new byte array using the make function and set the newly created byte array at the current index of the matrix</span>
        <span class="n">countMinSketch</span><span class="o">.</span><span class="n">matrix</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">=</span> <span class="nb">make</span><span class="p">(</span><span class="n">row</span><span class="p">,</span> <span class="n">updatedCounters</span><span class="o">/</span><span class="m">2</span><span class="p">)</span> 
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">countMinSketch</span>
<span class="p">}</span>
</code></pre></div></div>
<p>The idea behind <code class="language-plaintext highlighter-rouge">newCountMinSketch</code> can be summarized as follows:</p>
<ol>
  <li>Create a new source for generating seed values and set the counter as a power of 2.</li>
  <li>Set <code class="language-plaintext highlighter-rouge">totalCounters</code> inside <code class="language-plaintext highlighter-rouge">CountMinSketch</code></li>
  <li>Iterate from index = 0 to depth-1 and do the following:
    <ul>
      <li>Generate a new seed value of type <code class="language-plaintext highlighter-rouge">uint64</code></li>
      <li>Create a new byte array of size <code class="language-plaintext highlighter-rouge">updatedCounters/2</code> using the <code class="language-plaintext highlighter-rouge">make</code> function</li>
      <li>Set the newly created byte array in the matrix at <code class="language-plaintext highlighter-rouge">index</code></li>
    </ul>
  </li>
</ol>

<blockquote>
  <p>Every row in the matrix has a byte array of size <code class="language-plaintext highlighter-rouge">updatedCounters/2</code>. Using the four-bit counter approach, each byte stores the counters for two keys. This means that we can reduce the total number of counters by 2. With the input counter as 18, we get the value of <code class="language-plaintext highlighter-rouge">updatedCounters</code> as 32. Using the four-bit counter approach, we end up with 16 cells (32/2) for each row, with each cell containing a byte.</p>
</blockquote>

<p>The idea behind <code class="language-plaintext highlighter-rouge">Increment</code> can be summarized as follows:</p>

<ol>
  <li>Iterate from index = 0 to depth-1 and do the following:
    <ul>
      <li>Run the hash function for the given key and get the hashed value.</li>
      <li>Identify the <code class="language-plaintext highlighter-rouge">columnIndex</code> using the hashed value by executing <code class="language-plaintext highlighter-rouge">hashedValue % totalCounters</code>.</li>
      <li>Increment the value in the matrix cell at the position identified by a pair of <code class="language-plaintext highlighter-rouge">(index, columnIndex)</code>.
        <blockquote>
          <p>Increment operation will increment either the upper or lower four bits of the byte depending on the matrix cell position.</p>
        </blockquote>
      </li>
    </ul>
  </li>
</ol>

<p>This is how the above approach can be implemented in golang:</p>

<div class="language-golang highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">countMinSketch</span> <span class="o">*</span><span class="n">CountMinSketch</span><span class="p">)</span> <span class="n">Increment</span><span class="p">(</span><span class="n">key</span> <span class="n">model</span><span class="o">.</span><span class="n">Slice</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="n">index</span> <span class="o">:=</span> <span class="m">0</span><span class="p">;</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="n">depth</span><span class="p">;</span> <span class="n">index</span><span class="o">++</span> <span class="p">{</span>
        <span class="c">//compute the hash value</span>
        <span class="n">hash</span>        <span class="o">:=</span> <span class="n">countMinSketch</span><span class="o">.</span><span class="n">runHash</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="kt">uint32</span><span class="p">(</span><span class="n">countMinSketch</span><span class="o">.</span><span class="n">seeds</span><span class="p">[</span><span class="n">index</span><span class="p">]))</span>
        <span class="c">//get the current row (instance of type row is an alias for []byte)</span>
        <span class="n">currentRow</span>  <span class="o">:=</span> <span class="n">countMinSketch</span><span class="o">.</span><span class="n">matrix</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>
        <span class="c">//increment the value from the current row at an index=hash % countMinSketch.totalCounters</span>
        <span class="n">currentRow</span><span class="o">.</span><span class="n">incrementAt</span><span class="p">(</span><span class="n">hash</span> <span class="o">%</span> <span class="n">countMinSketch</span><span class="o">.</span><span class="n">totalCounters</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="k">func</span> <span class="p">(</span><span class="n">currentRow</span> <span class="n">row</span><span class="p">)</span> <span class="n">incrementAt</span><span class="p">(</span><span class="n">position</span> <span class="kt">uint64</span><span class="p">)</span> <span class="p">{</span>
    <span class="c">//get the index</span>
    <span class="n">index</span> <span class="o">:=</span> <span class="n">position</span> <span class="o">/</span> <span class="m">2</span>
    <span class="c">//if the position is an odd number, upper four bits store the counter value,</span>
    <span class="c">//else lower four bits store the counter value</span>
    <span class="n">shift</span> <span class="o">:=</span> <span class="p">(</span><span class="n">position</span> <span class="o">&amp;</span> <span class="m">0x01</span><span class="p">)</span> <span class="o">*</span> <span class="m">4</span>    
    <span class="n">isLessThan15</span> <span class="o">:=</span> <span class="p">(</span><span class="n">currentRow</span><span class="p">[</span><span class="n">index</span><span class="p">]</span><span class="o">&gt;&gt;</span><span class="n">shift</span><span class="p">)</span><span class="o">&amp;</span><span class="m">0x0f</span> <span class="o">&lt;</span> <span class="m">0x0f</span>
    <span class="c">//if the value is less than 15, increment</span>
    <span class="k">if</span> <span class="n">isLessThan15</span> <span class="p">{</span>
       <span class="n">currentRow</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">=</span> <span class="n">currentRow</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">+</span> <span class="p">(</span><span class="m">1</span> <span class="o">&lt;&lt;</span> <span class="n">shift</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The idea behind <code class="language-plaintext highlighter-rouge">Estimate</code> can be summarized as follows:</p>

<ol>
  <li>Iterate from index = 0 to depth-1 and do the following:
    <ul>
      <li>Run the hash function for the given key and get the hashed value.</li>
      <li>Identify the <code class="language-plaintext highlighter-rouge">columnIndex</code> based on the hashed value by executing <code class="language-plaintext highlighter-rouge">hashedValue % totalCounters</code>.</li>
      <li>Identify the minimum value from all the eligible cells.</li>
    </ul>
  </li>
</ol>

<p>This is how the above approach can be implemented in golang:</p>

<div class="language-golang highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">countMinSketch</span> <span class="o">*</span><span class="n">CountMinSketch</span><span class="p">)</span> <span class="n">Estimate</span><span class="p">(</span><span class="n">key</span> <span class="n">model</span><span class="o">.</span><span class="n">Slice</span><span class="p">)</span> <span class="kt">byte</span> <span class="p">{</span>
   <span class="n">min</span> <span class="o">:=</span> <span class="kt">byte</span><span class="p">(</span><span class="m">255</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">index</span> <span class="o">:=</span> <span class="m">0</span><span class="p">;</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="n">depth</span><span class="p">;</span> <span class="n">index</span><span class="o">++</span> <span class="p">{</span>
        <span class="c">//compute the hash value</span>
        <span class="n">hash</span>       <span class="o">:=</span> <span class="n">countMinSketch</span><span class="o">.</span><span class="n">runHash</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="kt">uint32</span><span class="p">(</span><span class="n">countMinSketch</span><span class="o">.</span><span class="n">seeds</span><span class="p">[</span><span class="n">index</span><span class="p">]))</span>
        <span class="c">//get the current row (an instance of type row is an alias for []byte)</span>
        <span class="n">currentRow</span> <span class="o">:=</span> <span class="n">countMinSketch</span><span class="o">.</span><span class="n">matrix</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>
        <span class="c">//get the value from the current row at an index=hash % countMinSketch.totalCounters and find the minimum value </span>
        <span class="k">if</span> <span class="n">valueAt</span> <span class="o">:=</span> <span class="n">currentRow</span><span class="o">.</span><span class="n">getAt</span><span class="p">(</span><span class="n">hash</span> <span class="o">%</span> <span class="n">countMinSketch</span><span class="o">.</span><span class="n">totalCounters</span><span class="p">);</span> <span class="n">valueAt</span> <span class="o">&lt;</span> <span class="n">min</span> <span class="p">{</span>
            <span class="n">min</span> <span class="o">=</span> <span class="n">valueAt</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">min</span>
<span class="p">}</span>
<span class="k">func</span> <span class="p">(</span><span class="n">currentRow</span> <span class="n">row</span><span class="p">)</span> <span class="n">getAt</span><span class="p">(</span><span class="n">position</span> <span class="kt">uint64</span><span class="p">)</span> <span class="kt">byte</span> <span class="p">{</span>
    <span class="c">//get the index</span>
    <span class="n">index</span> <span class="o">:=</span> <span class="n">position</span> <span class="o">/</span> <span class="m">2</span>
    <span class="c">//if the position is an odd number, the upper four bits store the counter value,</span>
    <span class="c">//else lower four bits store the counter value</span>
    <span class="n">shift</span> <span class="o">:=</span> <span class="p">(</span><span class="n">position</span> <span class="o">&amp;</span> <span class="m">0x01</span><span class="p">)</span> <span class="o">*</span> <span class="m">4</span>
    <span class="c">//perform the shift (shift would be either 0 or 4) </span>
    <span class="c">//perform an AND operation with 0x0f, which 00001111</span>
    <span class="k">return</span> <span class="p">(</span><span class="n">currentRow</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">&gt;&gt;</span> <span class="n">shift</span><span class="p">)</span> <span class="o">&amp;</span> <span class="m">0x0f</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Let’s understand how <a href="https://github.com/dgraph-io/ristretto">Ristretto</a> uses count-min sketch.</p>

<h3 id="ristretto">Ristretto</h3>

<p>Ristretto is a fast, concurrent golang cache library built with a focus on performance and correctness. Ristretto development team set the following requirements for the cache:</p>

<ol>
  <li>It should support concurrency</li>
  <li>It should maintain a high cache-hit ratio</li>
  <li>It should be memory-bounded (limit to configurable max memory usage)</li>
  <li>It should scale well as the number of cores and goroutines increases</li>
  <li>It should scale well under non-random key access distribution (e.g. Zipf)</li>
</ol>

<p>One of the exciting requirements was “maintaining a high cache-hit ratio”. To achieve this goal, the development team implemented an LFU (least frequently used) based eviction policy called <a href="https://blog.dgraph.io/refs/TinyLFU%20-%20A%20Highly%20Efficient%20Cache%20Admission%20Policy.pdf">TinyLFU</a>.</p>

<p>TinyLFU is an eviction-agnostic admission policy designed to improve hit ratios with very little memory overhead. The main idea is only to let in a new element if its estimate (/cost) exceeds the item being evicted. Ristretto implements <code class="language-plaintext highlighter-rouge">TinyLFU</code> using <code class="language-plaintext highlighter-rouge">count-min sketch</code> that uses <a href="#4-bit-counter">four-bit counter</a>.</p>

<p>Let’s look at a code snippet from Ristretto.</p>

<p>Ristretto’s <code class="language-plaintext highlighter-rouge">tinyLFU (policy.go)</code> references <code class="language-plaintext highlighter-rouge">cmSketch</code> which implements count-min sketch.</p>

<div class="language-golang highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">tinyLFU</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">freq</span>    <span class="o">*</span><span class="n">cmSketch</span>
    <span class="c">//fields omitted</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">tinyLFU</span> <span class="o">*</span><span class="n">tinyLFU</span><span class="p">)</span> <span class="n">Push</span><span class="p">(</span><span class="n">keys</span> <span class="p">[]</span><span class="kt">uint64</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">key</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">keys</span> <span class="p">{</span>
        <span class="n">tinyLFU</span><span class="o">.</span><span class="n">Increment</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c">//code omitted</span>
<span class="k">func</span> <span class="p">(</span><span class="n">tinyLFU</span> <span class="o">*</span><span class="n">tinyLFU</span><span class="p">)</span> <span class="n">Increment</span><span class="p">(</span><span class="n">key</span> <span class="kt">uint64</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">tinyLFU</span><span class="o">.</span><span class="n">freq</span><span class="o">.</span><span class="n">Increment</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
<span class="p">}</span>

<span class="c">//code omitted</span>
<span class="k">func</span> <span class="p">(</span><span class="n">tinyLFU</span> <span class="o">*</span><span class="n">tinyLFU</span><span class="p">)</span> <span class="n">Estimate</span><span class="p">(</span><span class="n">key</span> <span class="kt">uint64</span><span class="p">)</span> <span class="kt">int64</span> <span class="p">{</span>
    <span class="n">hits</span> <span class="o">:=</span> <span class="n">tinyLFU</span><span class="o">.</span><span class="n">freq</span><span class="o">.</span><span class="n">Estimate</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">hits</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Any access to a key in an LFU-based caching solution should increment the frequency of the accessed key. Instead of implementing the accurate key access count, Ristretto decided to use an estimated access count.</p>

<p>To increase the access count of a key, Ristretto batches the <code class="language-plaintext highlighter-rouge">gets</code> in a buffer. When the buffer is full, the buffered keys are handed off to a goroutine for incrementing their frequencies. This is why the <code class="language-plaintext highlighter-rouge">Push</code> method of <code class="language-plaintext highlighter-rouge">tinyLFU</code> receives a slice of keys of type <code class="language-plaintext highlighter-rouge">uint64</code> (<em>hash of the incoming keys</em>).</p>

<p>The <code class="language-plaintext highlighter-rouge">Push</code> method results in incrementing the access frequency of the keys by invoking the <code class="language-plaintext highlighter-rouge">Increment</code> method on the <code class="language-plaintext highlighter-rouge">cmSketch</code> object. <code class="language-plaintext highlighter-rouge">cmSketch</code> (<code class="language-plaintext highlighter-rouge">sketch.go</code>) is an implementation of the count-min sketch.</p>

<blockquote>
  <p>With Ristretto, keys are already hashed, so the type of the parameter for the key in all these methods is <code class="language-plaintext highlighter-rouge">uint64</code>.</p>
</blockquote>

<p><code class="language-plaintext highlighter-rouge">tinyLFU</code> also provides a method called <code class="language-plaintext highlighter-rouge">Estimate</code> responsible for estimating a given key’s frequency. To get the estimate, <code class="language-plaintext highlighter-rouge">tinyLFU</code> invokes the <code class="language-plaintext highlighter-rouge">Estimate</code> method on the <code class="language-plaintext highlighter-rouge">cmSketch</code> object and returns the estimated frequency of the key.</p>

<h3 id="code">Code</h3>

<p>The code for this article is available <a href="https://github.com/SarthakMakhija/probabilistic-data-structures/tree/main/frequency">here</a>.</p>

<h3 id="references">References</h3>

<ul>
  <li><a href="https://en.wikipedia.org/wiki/Count–min_sketch">Count-min sketch</a></li>
  <li><a href="https://florian.github.io/count-min-sketch/">Count-min sketch</a></li>
  <li><a href="https://github.com/dgryski/go-tinylfu/blob/master/cm4.go">Four bit counter</a></li>
  <li><a href="https://github.com/dgraph-io/ristretto">Ristretto</a></li>
  <li><a href="https://blog.dgraph.io/post/introducing-ristretto-high-perf-go-cache/">Ristretto design</a></li>
</ul>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><a href="https://www.geeksforgeeks.org/introduction-to-the-probabilistic-data-structure/">Probabilistic data structures</a> provide approximate answers to queries about a large dataset rather than exact answers. These data structures are designed to handle large amounts of data in real-time by making trade-offs between accuracy and time and space efficiency. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p><a href="https://en.wikipedia.org/wiki/Big_O_notation">Big O notation</a> In computer science, big O notation is used to classify algorithms according to how their run time or space requirements grow as the input size grows. <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Sarthak Makhija</name></author><category term="Probabilistic data structures" /><category term="Probabilistic data structures" /><category term="Count-min sketch" /><summary type="html"><![CDATA[Count-min sketch (CM sketch) is a probabilistic data structure used to estimate the frequency of events in a data stream. The count–min sketch was invented in 2003 by Graham Cormode and S. Muthu Muthukrishnan.]]></summary></entry><entry><title type="html">Invoking C Code from Golang</title><link href="https://tech-lessons.in/invoking-C-code-from-golang/" rel="alternate" type="text/html" title="Invoking C Code from Golang" /><published>2021-12-21T00:00:00+05:30</published><updated>2021-12-21T00:00:00+05:30</updated><id>https://tech-lessons.in/invoking-C-from-GO</id><content type="html" xml:base="https://tech-lessons.in/invoking-C-code-from-golang/"><![CDATA[<p>The article attempts to explore Golang’s “C” package which allows invoking C code from Golang. Before we get into the idea
of invoking C code from Golang, let’s see a use-case where this might be needed.</p>

<h3 id="interfacing-with-an-existing-c-library">Interfacing with an existing C library</h3>
<p>Let’s consider that we wish to develop a storage engine for pmem (persistent memory) in Golang. In order to develop this, we might want to use
<a href="https://github.com/pmem/pmdk">pmdk - persistent memory development kit</a> which is written in C. This effectively means we want a way to bridge Golang and C code; invoke C code 
from Golang.</p>

<h3 id="c-package-in-golang">“C” package in Golang</h3>
<p>Go provides a package called “C” to interface with C code. Some features provided by this package include -</p>
<ul>
  <li>standard C numeric types</li>
  <li>access to structs defined in C</li>
  <li>access to function like <code class="language-plaintext highlighter-rouge">malloc</code> and <code class="language-plaintext highlighter-rouge">free</code></li>
</ul>

<h3 id="c-code">C Code</h3>
<p>Let’s start by creating a linked list in C which will be later invoked from Golang code. Let’s start with <code class="language-plaintext highlighter-rouge">linkedlist.h</code> file which defines a struct called <code class="language-plaintext highlighter-rouge">Node</code>, and a set of operations supported by linked list.</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="k">struct</span> <span class="n">Node</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">key</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">value</span><span class="p">;</span>
    <span class="k">struct</span> <span class="n">Node</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span>
<span class="p">};</span>

<span class="kt">void</span> <span class="nf">put</span><span class="p">(</span><span class="kt">int</span> <span class="n">key</span><span class="p">,</span> <span class="kt">int</span> <span class="n">value</span><span class="p">);</span>
<span class="kt">int</span> <span class="nf">get</span><span class="p">(</span><span class="kt">int</span> <span class="n">key</span><span class="p">);</span></code></pre></figure>

<p>Our <code class="language-plaintext highlighter-rouge">Node</code> struct has a key, and a value which are of type <code class="language-plaintext highlighter-rouge">integer</code> and a pointer to the next node. It also supports 2 behaviors <code class="language-plaintext highlighter-rouge">put</code> and <code class="language-plaintext highlighter-rouge">get</code>.</p>

<p>Let’s add <code class="language-plaintext highlighter-rouge">linkedlist.c</code> and add <code class="language-plaintext highlighter-rouge">put</code> to begin with.</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="cp">#include</span> <span class="cpf">"linkedlist.h"</span><span class="cp">
#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span>
<span class="k">struct</span> <span class="n">Node</span> <span class="o">*</span><span class="n">head</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
<span class="k">struct</span> <span class="n">Node</span> <span class="o">*</span><span class="n">current</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">put</span><span class="p">(</span><span class="kt">int</span> <span class="n">key</span><span class="p">,</span> <span class="kt">int</span> <span class="n">value</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">head</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">head</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">Node</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">Node</span><span class="p">));</span>
        <span class="n">head</span> <span class="o">-&gt;</span> <span class="n">key</span> <span class="o">=</span> <span class="n">key</span><span class="p">;</span>
        <span class="n">head</span> <span class="o">-&gt;</span> <span class="n">value</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span>
        <span class="n">current</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="p">{</span>
        <span class="k">struct</span> <span class="n">Node</span> <span class="o">*</span><span class="n">next</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">Node</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">Node</span><span class="p">));</span>
        <span class="n">next</span> <span class="o">-&gt;</span> <span class="n">key</span> <span class="o">=</span> <span class="n">key</span><span class="p">;</span>
        <span class="n">next</span> <span class="o">-&gt;</span> <span class="n">value</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span>
        <span class="n">current</span> <span class="o">-&gt;</span> <span class="n">next</span> <span class="o">=</span> <span class="n">next</span><span class="p">;</span>
        <span class="n">current</span> <span class="o">=</span> <span class="n">next</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p><code class="language-plaintext highlighter-rouge">put</code> does the following -</p>
<ul>
  <li>If head is NULL
    <ul>
      <li>Creates a <code class="language-plaintext highlighter-rouge">new node</code></li>
      <li>Points <code class="language-plaintext highlighter-rouge">head</code> to the <code class="language-plaintext highlighter-rouge">new node</code></li>
      <li>Assigns key and value to the <code class="language-plaintext highlighter-rouge">head</code></li>
      <li>Points <code class="language-plaintext highlighter-rouge">current</code> to the <code class="language-plaintext highlighter-rouge">head</code></li>
    </ul>
  </li>
  <li>Else
    <ul>
      <li>Creates a <code class="language-plaintext highlighter-rouge">new node</code></li>
      <li>Assigns key and value to the <code class="language-plaintext highlighter-rouge">new node</code></li>
      <li>Assigns <code class="language-plaintext highlighter-rouge">next</code> of the <code class="language-plaintext highlighter-rouge">current</code> node to the <code class="language-plaintext highlighter-rouge">new node</code></li>
      <li>Points <code class="language-plaintext highlighter-rouge">current</code> to the <code class="language-plaintext highlighter-rouge">new node</code></li>
    </ul>
  </li>
</ul>

<p>Let’s add <code class="language-plaintext highlighter-rouge">get</code> which will return a value by key.</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="nf">get</span><span class="p">(</span><span class="kt">int</span> <span class="n">key</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">struct</span> <span class="n">Node</span><span class="o">*</span> <span class="n">node</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">key</span> <span class="o">!=</span> <span class="n">key</span> <span class="o">&amp;&amp;</span> <span class="n">node</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">node</span> <span class="o">=</span> <span class="n">node</span> <span class="o">-&gt;</span> <span class="n">next</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">node</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">node</span> <span class="o">-&gt;</span> <span class="n">value</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p><code class="language-plaintext highlighter-rouge">get</code> does the following -</p>
<ul>
  <li>Makes a temporary variable <code class="language-plaintext highlighter-rouge">node</code> point to <code class="language-plaintext highlighter-rouge">head</code></li>
  <li>Iterates while <code class="language-plaintext highlighter-rouge">node</code> is not NULL and <code class="language-plaintext highlighter-rouge">key of the node</code> is not equal to the incoming <code class="language-plaintext highlighter-rouge">key</code></li>
  <li>If <code class="language-plaintext highlighter-rouge">node</code> is NULL, returns -1</li>
  <li>Else returns the value pointed by <code class="language-plaintext highlighter-rouge">node</code></li>
</ul>

<h3 id="time-to-invoke-c-code-from-golang">Time to invoke C code from Golang</h3>

<p>Let’s create a file <code class="language-plaintext highlighter-rouge">linkedlist.go</code> which will provide <code class="language-plaintext highlighter-rouge">Put</code> and <code class="language-plaintext highlighter-rouge">GetBy</code> behaviors. These functions will internally invoke C functions.</p>

<figure class="highlight"><pre><code class="language-golang" data-lang="golang"><span class="k">package</span> <span class="n">linkedlist</span>

<span class="c">// #cgo CFLAGS: -g -Wall</span>
<span class="c">// #include "linkedlist.h"</span>
<span class="k">import</span> <span class="s">"C"</span></code></pre></figure>

<p>This is how the beginning of our go file looks like -</p>
<ul>
  <li>Go package is <code class="language-plaintext highlighter-rouge">linkedlist</code></li>
  <li>Adding the line <code class="language-plaintext highlighter-rouge">#cgo CFLAGS: -g -Wall</code> compiles the C code with gcc options: (-g) which is used to enable debug symbols and (-Wall) which is used to enable all warnings</li>
  <li><code class="language-plaintext highlighter-rouge">linkedlist.h</code> is included for our linked list related functions</li>
  <li>The import “C” allows us to integrate with C code</li>
  <li>The comments above <code class="language-plaintext highlighter-rouge">import C</code> represent the actual C code that will be consumed by the rest of our golang code</li>
</ul>

<p>Let’s add <code class="language-plaintext highlighter-rouge">Put</code> in Golang.</p>

<figure class="highlight"><pre><code class="language-golang" data-lang="golang"><span class="k">func</span> <span class="n">Put</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">C</span><span class="o">.</span><span class="n">put</span><span class="p">(</span><span class="n">C</span><span class="o">.</span><span class="kt">int</span><span class="p">(</span><span class="n">key</span><span class="p">),</span> <span class="n">C</span><span class="o">.</span><span class="kt">int</span><span class="p">(</span><span class="n">value</span><span class="p">))</span>
<span class="p">}</span></code></pre></figure>

<p>Golang <code class="language-plaintext highlighter-rouge">Put</code> does the following -</p>
<ul>
  <li>Creates a C int by using <code class="language-plaintext highlighter-rouge">C.int</code> on key and value</li>
  <li>Invokes <code class="language-plaintext highlighter-rouge">put</code> by using <code class="language-plaintext highlighter-rouge">C.put</code>, passing C.int</li>
</ul>

<p>Let’s add <code class="language-plaintext highlighter-rouge">GetBy</code>.</p>

<figure class="highlight"><pre><code class="language-golang" data-lang="golang"><span class="k">func</span> <span class="n">GetBy</span><span class="p">(</span><span class="n">key</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
    <span class="k">return</span> <span class="kt">int</span><span class="p">(</span><span class="n">C</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">C</span><span class="o">.</span><span class="kt">int</span><span class="p">(</span><span class="n">key</span><span class="p">)))</span>
<span class="p">}</span></code></pre></figure>

<p>Golang <code class="language-plaintext highlighter-rouge">GetBy</code> does the following -</p>
<ul>
  <li>Creates a C int by using <code class="language-plaintext highlighter-rouge">C.int</code> on key</li>
  <li>Invokes <code class="language-plaintext highlighter-rouge">get</code> by using <code class="language-plaintext highlighter-rouge">C.get</code></li>
  <li>Convert the return value received from <code class="language-plaintext highlighter-rouge">C.get(C.int(key))</code> to <code class="language-plaintext highlighter-rouge">Golang's int</code></li>
</ul>

<p><em>Putting it all together</em> -</p>

<figure class="highlight"><pre><code class="language-golang" data-lang="golang"><span class="k">package</span> <span class="n">linkedlist</span>

<span class="c">// #cgo CFLAGS: -g -Wall</span>
<span class="c">// #include "linkedlist.h"</span>
<span class="k">import</span> <span class="s">"C"</span>

<span class="k">func</span> <span class="n">Put</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">C</span><span class="o">.</span><span class="n">put</span><span class="p">(</span><span class="n">C</span><span class="o">.</span><span class="kt">int</span><span class="p">(</span><span class="n">key</span><span class="p">),</span> <span class="n">C</span><span class="o">.</span><span class="kt">int</span><span class="p">(</span><span class="n">value</span><span class="p">))</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">GetBy</span><span class="p">(</span><span class="n">key</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
    <span class="k">return</span> <span class="kt">int</span><span class="p">(</span><span class="n">C</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">C</span><span class="o">.</span><span class="kt">int</span><span class="p">(</span><span class="n">key</span><span class="p">)))</span>
<span class="p">}</span></code></pre></figure>

<p>Let’s add a Golang test to see if this integration works or not.</p>

<figure class="highlight"><pre><code class="language-golang" data-lang="golang"><span class="k">package</span> <span class="n">linkedlist_test</span>

<span class="k">import</span> <span class="p">(</span>
	<span class="s">"reflect"</span>
	<span class="s">"testing"</span>
<span class="p">)</span>
<span class="k">import</span> <span class="s">"linkedlist"</span>

<span class="k">func</span> <span class="n">TestPutsASingleKeyValue</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">linkedlist</span><span class="o">.</span><span class="n">Put</span><span class="p">(</span><span class="m">10</span><span class="p">,</span> <span class="m">100</span><span class="p">)</span>
    
    <span class="n">value</span> <span class="o">:=</span> <span class="n">linkedlist</span><span class="o">.</span><span class="n">GetBy</span><span class="p">(</span><span class="m">10</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">value</span> <span class="o">!=</span> <span class="m">100</span> <span class="p">{</span>
        <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"Expected %v, received %v"</span><span class="p">,</span> <span class="m">100</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Let’s Run the test using <code class="language-plaintext highlighter-rouge">go test</code>, and it should work.</p>

<h3 id="freeing-the-linked-list">Freeing the linked list</h3>

<p>We would like to add another test which adds multiple key value pairs and gets a value by key. Before we do that, we would like to start with a fresh linked list
for each test. In order to do that let’s add a behavior <code class="language-plaintext highlighter-rouge">close</code> in C linked list which frees all the nodes in the linked list.</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">void</span> <span class="nf">close</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">struct</span> <span class="n">Node</span><span class="o">*</span> <span class="n">node</span><span class="p">;</span>
  <span class="k">while</span> <span class="p">(</span><span class="n">head</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">node</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
      <span class="n">head</span> <span class="o">=</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
      <span class="n">free</span><span class="p">(</span><span class="n">node</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p><code class="language-plaintext highlighter-rouge">close</code> does the following -</p>
<ul>
  <li>Makes a temporary variable <code class="language-plaintext highlighter-rouge">node</code></li>
  <li>Iterates while <code class="language-plaintext highlighter-rouge">head</code> is not NULL</li>
  <li>Makes <code class="language-plaintext highlighter-rouge">node</code> point to head and moves <code class="language-plaintext highlighter-rouge">head</code> ahead</li>
  <li>Frees the memory pointed to by <code class="language-plaintext highlighter-rouge">node</code></li>
</ul>

<p>Let’s invoke <code class="language-plaintext highlighter-rouge">C's close</code> from Golang</p>

<figure class="highlight"><pre><code class="language-golang" data-lang="golang"><span class="k">func</span> <span class="n">Close</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">C</span><span class="o">.</span><span class="nb">close</span><span class="p">()</span>
<span class="p">}</span></code></pre></figure>

<p>Let’s edit the existing test case and add a new one.</p>

<figure class="highlight"><pre><code class="language-golang" data-lang="golang"><span class="k">func</span> <span class="n">TestPutsASingleKeyValue</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">defer</span> <span class="n">linkedlist</span><span class="o">.</span><span class="n">Close</span><span class="p">()</span>
    <span class="n">linkedlist</span><span class="o">.</span><span class="n">Put</span><span class="p">(</span><span class="m">10</span><span class="p">,</span> <span class="m">100</span><span class="p">)</span>

    <span class="n">value</span> <span class="o">:=</span> <span class="n">linkedlist</span><span class="o">.</span><span class="n">GetBy</span><span class="p">(</span><span class="m">10</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">value</span> <span class="o">!=</span> <span class="m">100</span> <span class="p">{</span>
        <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"Expected %v, received %v"</span><span class="p">,</span> <span class="m">100</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">TestPutsMultipleKeyValues</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">defer</span> <span class="n">linkedlist</span><span class="o">.</span><span class="n">Close</span><span class="p">()</span>
    <span class="n">linkedlist</span><span class="o">.</span><span class="n">Put</span><span class="p">(</span><span class="m">10</span><span class="p">,</span> <span class="m">100</span><span class="p">)</span>
    <span class="n">linkedlist</span><span class="o">.</span><span class="n">Put</span><span class="p">(</span><span class="m">20</span><span class="p">,</span> <span class="m">200</span><span class="p">)</span>
    <span class="n">linkedlist</span><span class="o">.</span><span class="n">Put</span><span class="p">(</span><span class="m">30</span><span class="p">,</span> <span class="m">300</span><span class="p">)</span>

    <span class="n">value</span> <span class="o">:=</span> <span class="n">linkedlist</span><span class="o">.</span><span class="n">GetBy</span><span class="p">(</span><span class="m">20</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">value</span> <span class="o">!=</span> <span class="m">200</span> <span class="p">{</span>
        <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"Expected %v, received %v"</span><span class="p">,</span> <span class="m">200</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>As a part of these tests, we are now closing the linked list by invoking <code class="language-plaintext highlighter-rouge">defer linkedlist.Close()</code> which will internally free all the nodes.</p>

<h3 id="lets-get-all-the-values">Let’s get all the values</h3>
<p>We would like to return all the values from linked list. As a first step, we would like to return a pointer to an integer from C code to Golang.
Let’s code <code class="language-plaintext highlighter-rouge">getAllValues</code> in C.</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">int</span><span class="o">*</span> <span class="nf">getAllValues</span><span class="p">()</span> <span class="p">{</span>
     <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">length</span><span class="p">();</span>
     <span class="kt">int</span><span class="o">*</span> <span class="n">values</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="n">len</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
     <span class="k">struct</span> <span class="n">Node</span><span class="o">*</span> <span class="n">node</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
     <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

     <span class="k">while</span> <span class="p">(</span><span class="n">node</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
         <span class="n">values</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">=</span> <span class="n">node</span> <span class="o">-&gt;</span> <span class="n">value</span><span class="p">;</span>
         <span class="n">node</span> <span class="o">=</span> <span class="n">node</span> <span class="o">-&gt;</span> <span class="n">next</span><span class="p">;</span>
         <span class="n">index</span> <span class="o">=</span> <span class="n">index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
     <span class="p">}</span>
     <span class="k">return</span> <span class="n">values</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p><code class="language-plaintext highlighter-rouge">getAllValues</code> does the following -</p>
<ul>
  <li>Invokes <code class="language-plaintext highlighter-rouge">length</code> to get the total number of nodes in the linked list</li>
  <li>Allocates memory to hold <code class="language-plaintext highlighter-rouge">len</code> integer values in a variable called <code class="language-plaintext highlighter-rouge">values</code></li>
  <li>Creates a pointer called <code class="language-plaintext highlighter-rouge">node</code> to point to <code class="language-plaintext highlighter-rouge">head</code></li>
  <li>Iterates while <code class="language-plaintext highlighter-rouge">node</code> is not NULL</li>
  <li>Collects the value pointed to by <code class="language-plaintext highlighter-rouge">node</code> in <code class="language-plaintext highlighter-rouge">values</code></li>
  <li>Returns <code class="language-plaintext highlighter-rouge">values</code> which is a pointer to an integer</li>
</ul>

<p>Let’s also add <code class="language-plaintext highlighter-rouge">length</code> function -</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="nf">length</span><span class="p">()</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">struct</span> <span class="n">Node</span><span class="o">*</span> <span class="n">node</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">node</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">node</span> <span class="o">=</span> <span class="n">node</span> <span class="o">-&gt;</span> <span class="n">next</span><span class="p">;</span>
        <span class="n">count</span> <span class="o">=</span> <span class="n">count</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">count</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p><code class="language-plaintext highlighter-rouge">length</code> does the following -</p>
<ul>
  <li>Creates a pointer called <code class="language-plaintext highlighter-rouge">node</code> to point to <code class="language-plaintext highlighter-rouge">head</code></li>
  <li>Iterates while <code class="language-plaintext highlighter-rouge">node</code> is not NULL</li>
  <li>Increments count for each node</li>
  <li>Returns count</li>
</ul>

<p>Time to invoke <code class="language-plaintext highlighter-rouge">getAllValues</code> from Golang.</p>

<figure class="highlight"><pre><code class="language-golang" data-lang="golang"><span class="k">func</span> <span class="n">GetsAllValues</span><span class="p">()</span> <span class="p">[]</span><span class="kt">int</span> <span class="p">{</span>
	<span class="n">length</span> <span class="o">:=</span> <span class="kt">int</span><span class="p">(</span><span class="n">C</span><span class="o">.</span><span class="n">length</span><span class="p">())</span>
	<span class="n">intPointer</span> <span class="o">:=</span> <span class="n">C</span><span class="o">.</span><span class="n">getAllValues</span><span class="p">()</span>
	<span class="k">defer</span> <span class="n">C</span><span class="o">.</span><span class="n">free</span><span class="p">(</span><span class="n">unsafe</span><span class="o">.</span><span class="n">Pointer</span><span class="p">(</span><span class="n">intPointer</span><span class="p">))</span>

	<span class="n">slice</span> <span class="o">:=</span> <span class="p">(</span><span class="o">*</span><span class="p">[</span><span class="m">1</span> <span class="o">&lt;&lt;</span> <span class="m">28</span><span class="p">]</span><span class="n">C</span><span class="o">.</span><span class="kt">int</span><span class="p">)(</span><span class="n">unsafe</span><span class="o">.</span><span class="n">Pointer</span><span class="p">(</span><span class="n">intPointer</span><span class="p">))[</span><span class="o">:</span><span class="n">length</span><span class="o">:</span><span class="n">length</span><span class="p">]</span>

	<span class="k">var</span> <span class="n">values</span> <span class="p">[]</span><span class="kt">int</span>
	<span class="k">for</span> <span class="n">index</span> <span class="o">:=</span> <span class="m">0</span><span class="p">;</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="n">index</span><span class="o">++</span> <span class="p">{</span>
		<span class="n">values</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">values</span><span class="p">,</span> <span class="kt">int</span><span class="p">(</span><span class="n">slice</span><span class="p">[</span><span class="n">index</span><span class="p">]))</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="n">values</span>
<span class="p">}</span></code></pre></figure>

<p><code class="language-plaintext highlighter-rouge">GetAllValues</code> does the following -</p>
<ul>
  <li>Invokes <code class="language-plaintext highlighter-rouge">C.length</code> to get the total number of linked list nodes</li>
  <li>Invokes <code class="language-plaintext highlighter-rouge">C.getAllValues()</code> to get a pointer to an integer</li>
  <li>We would like to free the memory held by the pointer returned from <code class="language-plaintext highlighter-rouge">C.getAllValues()</code>. In order to do that, we need to invoke <code class="language-plaintext highlighter-rouge">C.free</code> and
we use <code class="language-plaintext highlighter-rouge">unsafe.Pointer</code> which allows creating a pointer to any arbitrary type</li>
  <li>In order to be able to invoke <code class="language-plaintext highlighter-rouge">C.free</code> or <code class="language-plaintext highlighter-rouge">C.malloc</code>, we need to import <code class="language-plaintext highlighter-rouge">stdlib.h</code> in Golang code</li>
  <li>So far we have a pointer or let’s say a C pointer. We need a way to convert that to Go slice.</li>
</ul>

<p>The expression <code class="language-plaintext highlighter-rouge">slice := (*[1 &lt;&lt; 28]C.int)(unsafe.Pointer(intPointer))[:length:length]</code> is made up of 3 parts -</p>

<figure class="highlight"><pre><code class="language-golang" data-lang="golang"><span class="m">1.</span> <span class="n">unsafePointer</span> <span class="o">:=</span> <span class="n">unsafe</span><span class="o">.</span><span class="n">Pointer</span><span class="p">(</span><span class="n">intPointer</span><span class="p">)</span> <span class="n">creates</span> <span class="n">an</span> <span class="n">unsafe</span> <span class="n">pointer</span>

<span class="m">2.</span> <span class="s">`https://stackoverflow.com/questions/48756732/what-does-1-30c-yourtype-do-exactly-in-cgo`</span> 
   <span class="n">arrayPtr</span> <span class="o">:=</span> <span class="p">(</span><span class="o">*</span><span class="p">[</span><span class="m">1</span> <span class="o">&lt;&lt;</span> <span class="m">28</span><span class="p">]</span><span class="n">C</span><span class="o">.</span><span class="kt">int</span><span class="p">)(</span><span class="n">unsafePointer</span><span class="p">)</span><span class="o">.</span><span class="s">`*[1 &lt;&lt; 28]C.YourType`</span> <span class="n">doesn</span><span class="err">'</span><span class="n">t</span> <span class="n">do</span> <span class="n">anything</span> <span class="n">itself</span><span class="p">,</span> <span class="n">it</span> <span class="n">is</span> <span class="n">a</span> <span class="k">type</span><span class="o">.</span> 
   <span class="n">Specifically</span><span class="p">,</span> <span class="n">it</span> <span class="n">is</span> <span class="n">a</span> <span class="n">pointer</span> <span class="n">to</span> <span class="n">an</span> <span class="n">array</span> <span class="n">of</span> <span class="n">size</span> <span class="m">1</span> <span class="o">&lt;&lt;</span> <span class="m">28</span><span class="p">,</span> <span class="n">of</span> <span class="n">C</span><span class="o">.</span><span class="n">YourType</span> <span class="n">values</span><span class="o">.</span> 
   <span class="n">Statement</span> <span class="m">2</span><span class="p">)</span> <span class="n">converts</span> <span class="n">unsafePointer</span> <span class="n">to</span> <span class="n">a</span> <span class="n">pointer</span> <span class="n">of</span> <span class="n">the</span> <span class="k">type</span> <span class="o">*</span><span class="p">[</span><span class="m">1</span> <span class="o">&lt;&lt;</span> <span class="m">28</span><span class="p">]</span><span class="n">C</span><span class="o">.</span><span class="kt">int</span>

<span class="m">3.</span> <span class="n">slice</span> <span class="o">:=</span> <span class="n">arrayPtr</span><span class="p">[</span><span class="o">:</span><span class="n">length</span><span class="o">:</span><span class="n">length</span><span class="p">],</span> <span class="n">slices</span> <span class="n">the</span> <span class="n">array</span> <span class="n">into</span> <span class="n">a</span> <span class="n">Go</span> <span class="n">slice</span></code></pre></figure>

<ul>
  <li>We now have a Golang slice of type <code class="language-plaintext highlighter-rouge">C.int</code> but we need to return a Golang slice of <code class="language-plaintext highlighter-rouge">Go int</code>. So we iterate through the <code class="language-plaintext highlighter-rouge">slice</code>, convert <code class="language-plaintext highlighter-rouge">C.int</code> to <code class="language-plaintext highlighter-rouge">Golang int</code>,
collect <code class="language-plaintext highlighter-rouge">values</code> and return it</li>
</ul>

<p>Let’s quickly add a golang test for <code class="language-plaintext highlighter-rouge">GetAllValues</code>.</p>

<figure class="highlight"><pre><code class="language-golang" data-lang="golang"><span class="k">func</span> <span class="n">TestGetAllValues</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">defer</span> <span class="n">linkedlist</span><span class="o">.</span><span class="n">Close</span><span class="p">()</span>
    <span class="n">linkedlist</span><span class="o">.</span><span class="n">Put</span><span class="p">(</span><span class="m">10</span><span class="p">,</span> <span class="m">100</span><span class="p">)</span>
    <span class="n">linkedlist</span><span class="o">.</span><span class="n">Put</span><span class="p">(</span><span class="m">20</span><span class="p">,</span> <span class="m">200</span><span class="p">)</span>
    <span class="n">linkedlist</span><span class="o">.</span><span class="n">Put</span><span class="p">(</span><span class="m">30</span><span class="p">,</span> <span class="m">300</span><span class="p">)</span>

    <span class="n">values</span> <span class="o">:=</span> <span class="n">linkedlist</span><span class="o">.</span><span class="n">GetAllValues</span><span class="p">()</span>
    <span class="n">expected</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="m">100</span><span class="p">,</span> <span class="m">200</span><span class="p">,</span> <span class="m">300</span><span class="p">}</span>
    
    <span class="k">if</span> <span class="o">!</span><span class="n">reflect</span><span class="o">.</span><span class="n">DeepEqual</span><span class="p">(</span><span class="n">expected</span><span class="p">,</span> <span class="n">values</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"Expected %v, received %v"</span><span class="p">,</span> <span class="n">expected</span><span class="p">,</span> <span class="n">values</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>That is it, run the test and get all the values from linked list.</p>

<h3 id="code">Code</h3>
<p>The code for this article is available <a href="https://github.com/SarthakMakhija/CGO-learning">here</a></p>

<h3 id="references">References</h3>
<ul>
  <li><a href="https://karthikkaranth.me/blog/calling-c-code-from-go/">Calling C code from go</a></li>
  <li><a href="https://stackoverflow.com/questions/64852226/how-to-iterate-through-a-c-array">Golang slices and C pointers</a></li>
  <li><a href="https://stackoverflow.com/questions/48756732/what-does-1-30c-yourtype-do-exactly-in-cgo">What does 1-30c-yourtype do exactly in cgo</a></li>
  <li><a href="https://github.com/golang/go/issues/31409">ld: symbol(s) not found for architecture x86_64</a></li>
</ul>]]></content><author><name>Sarthak Makhija</name></author><category term="Golang" /><category term="C" /><category term="CGO" /><category term="Golang" /><category term="C" /><category term="CGO" /><summary type="html"><![CDATA[Let's explore Golang's C package to invoke C code from Golang by building a linked list in C which would offer put, get, getAllValues, length and close features.]]></summary></entry><entry><title type="html">Code without automated tests? Are we serious?</title><link href="https://tech-lessons.in/code-without-automated-tests/" rel="alternate" type="text/html" title="Code without automated tests? Are we serious?" /><published>2021-10-27T00:00:00+05:30</published><updated>2021-10-27T00:00:00+05:30</updated><id>https://tech-lessons.in/code-without-tests</id><content type="html" xml:base="https://tech-lessons.in/code-without-automated-tests/"><![CDATA[<p>Automated tests are an essential part of every piece of code that we write. The benefits of these tests are so compelling that it does not even
make sense to think about writing code without tests or writing code today and adding tests later. Despite the benefits, we still see code without tests,
we still see ideas like “writing code today and adding tests when the delivery pressure reduces” floating around.</p>

<p>I don’t have real reasons as to why such ideas would float around, but I can speculate.</p>

<p><strong>Speculation (1)</strong>
Adding tests takes a lot of time</p>

<p><strong>Speculation (2)</strong>
There is a lot of delivery pressure today and there is a firm belief that tomorrow will be better and that is when we will go and add tests</p>

<p>What I want to do as a part of this article is try and understand how would our world look like with such ideas and does it even make sense to consider them.
With that said, I will keep the idea of TDD aside for this article.</p>

<blockquote class="wp-block-quote">
    <p>What would it really mean to write code without automated tests, to deliver software without automated tests. Why would someone even think of writing code today and adding tests later?</p>
</blockquote>

<h3 id="does-it-really-take-time-to-add-tests">Does it really take time to add tests?</h3>

<p>One of the possible arguments around not adding automated tests could be the “time”.</p>

<blockquote class="wp-block-quote">
    <p>Argument1: It takes time to add tests and time is really costly. We need to finish our story and there is this delivery pressure.</p>
</blockquote>

<p>Let’s see how fair is that argument by considering a method <code class="language-plaintext highlighter-rouge">leftShift</code> which left shifts the elements of a slice by 1, let’s assume non-empty slice for now.</p>

<figure class="highlight"><pre><code class="language-golang" data-lang="golang"><span class="k">type</span> <span class="n">slice</span> <span class="k">struct</span> <span class="p">{</span>
	<span class="n">elements</span> <span class="p">[]</span><span class="kt">int</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">newSlice</span><span class="p">(</span><span class="n">elements</span> <span class="p">[]</span><span class="kt">int</span><span class="p">)</span> <span class="o">*</span><span class="n">slice</span> <span class="p">{</span>
	<span class="k">return</span> <span class="o">&amp;</span><span class="n">slice</span><span class="p">{</span><span class="n">elements</span><span class="o">:</span> <span class="n">elements</span><span class="p">}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">s</span> <span class="o">*</span><span class="n">slice</span><span class="p">)</span> <span class="n">leftShift</span><span class="p">()</span> <span class="p">{</span>
	<span class="k">for</span> <span class="n">index</span> <span class="o">:=</span> <span class="m">0</span><span class="p">;</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">elements</span><span class="p">)</span><span class="o">-</span><span class="m">1</span><span class="p">;</span> <span class="n">index</span><span class="o">++</span> <span class="p">{</span>
		<span class="n">s</span><span class="o">.</span><span class="n">elements</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">elements</span><span class="p">[</span><span class="n">index</span><span class="o">+</span><span class="m">1</span><span class="p">]</span>
	<span class="p">}</span>
	<span class="n">s</span><span class="o">.</span><span class="n">elements</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">elements</span><span class="p">)</span><span class="o">-</span><span class="m">1</span><span class="p">]</span> <span class="o">=</span> <span class="m">0</span>
<span class="p">}</span></code></pre></figure>

<div class="align-center">
    <img style="padding-left: 0; max-width: 50%" src="/assets/img/pexels/left-shift-slice.png" class="wp-image-878" />
</div>

<p>What this code does is pretty simple -</p>
<ul>
  <li>drops the element at index 0</li>
  <li>moves each element to its left</li>
  <li>puts a zero at the last index</li>
</ul>

<p>Let’s add a unit test for the same.</p>

<figure class="highlight"><pre><code class="language-golang" data-lang="golang"><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="p">(</span>
	<span class="s">"reflect"</span>
	<span class="s">"testing"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">TestLeftShiftsANotEmptySliceBy1</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">slice</span> <span class="o">:=</span> <span class="n">newSlice</span><span class="p">([]</span><span class="kt">int</span><span class="p">{</span><span class="m">10</span><span class="p">,</span> <span class="m">20</span><span class="p">,</span> <span class="m">30</span><span class="p">,</span> <span class="m">40</span><span class="p">,</span> <span class="m">50</span><span class="p">})</span>
	<span class="n">slice</span><span class="o">.</span><span class="n">leftShift</span><span class="p">()</span>

	<span class="n">expected</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="m">20</span><span class="p">,</span> <span class="m">30</span><span class="p">,</span> <span class="m">40</span><span class="p">,</span> <span class="m">50</span><span class="p">,</span> <span class="m">0</span><span class="p">}</span>

	<span class="k">if</span> <span class="o">!</span><span class="n">reflect</span><span class="o">.</span><span class="n">DeepEqual</span><span class="p">(</span><span class="n">expected</span><span class="p">,</span> <span class="n">slice</span><span class="o">.</span><span class="n">elements</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"Expected %v, received %v after performing left shift"</span><span class="p">,</span>
			<span class="n">expected</span><span class="p">,</span>
			<span class="n">slice</span><span class="o">.</span><span class="n">elements</span><span class="p">,</span>
		<span class="p">)</span>
	<span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>As a part of this test, we perform a left shift on a slice and assert the elements against the expected after shift operation. That’s really it.</p>

<p>It only requires us to understand how to write unit tests.
Honestly, it doesn’t take a lot of time to add tests, be it unit tests, integration tests, contract tests or API tests, once we understand a few things including -</p>
<ul>
  <li>What do these tests stand for
    <ul>
      <li>It is essential to understand what is “unit” in a unit test, what is an “integration” test etc</li>
    </ul>
  </li>
  <li>What purpose do these tests serve
    <ul>
      <li>It is essential to answer questions like “why can’t we have all integration tests and zero unit tests”</li>
    </ul>
  </li>
  <li>And, how to write these tests
    <ul>
      <li>It is essential to answer questions like “how do I write tests in X programming language with Y framework”</li>
    </ul>
  </li>
</ul>

<p>Once we answer all these questions, it doesn’t take a lot of time to add tests.</p>

<p>There is still a forked argument that I can think of.</p>

<blockquote class="wp-block-quote">
    <p>Argument2: What we build is not as simple as left shifting a slice, our systems are complex and fancy. We can't just add one test and be done. Hence, adding so many tests would take time, which of course we don't have.</p>
</blockquote>

<p>The answer to this lies in the argument itself. If left shifting a slice needs an automated test, any fancy and complex system would need them too.</p>

<p>And yes, your system is not as simple as left shifting some elements but at the same time, the fancy system is not built in a day. It is built piece by piece
gradually, so why not add tests for every small piece that gets built.</p>

<p><em>Important Side note:</em> If we remove the assumption that our slice is non-empty (ie; <code class="language-plaintext highlighter-rouge">elements</code> within the <code class="language-plaintext highlighter-rouge">slice</code> struct is non-empty), <code class="language-plaintext highlighter-rouge">leftSlice</code> method will fail.
In fact, at this point in time, the only way to conclude that an empty slice will result in a failure is by walking through the code. Once we have the test
for the same, not only does it give us a safety net but also serves as a <strong>live documentation</strong> which gets updated everytime the behavior of the changes.</p>

<h3 id="code-today-and-add-tests-later">Code today and add tests later</h3>

<p>One of the other theories that I have heard is “let’s code today and add tests tomorrow or maybe later”. There could be multiple reasons for this theory
but probably, “delivery pressure”, and a beautiful belief “code without automated tests is ok” should be the main reasons for this wonderful idea to pop up.</p>

<p>Let’s see what would happen if we write code today and add tests later, forget TDD. Consider our favorite method <code class="language-plaintext highlighter-rouge">leftShift</code> and assume -</p>
<ul>
  <li>no tests are written</li>
  <li>a week has passed by and now we are adding tests</li>
</ul>

<p>Let’s look at various challenges that would come up -</p>

<p><strong>Boring</strong></p>

<p>I don’t have a better word for this stuff. We need to look at the code and understand what it does. Once that understanding is built, we need to write tests.
One might argue, “Why build an understanding”, just write “characterization tests”.
Sure, but how would you figure out corner cases, you need some background to think about corner cases.</p>

<p>This stuff just seems boring to me, looking at the code, figuring out various cases that too after 7 days, and adding tests.</p>

<p><strong>Possibility of missing corner cases</strong></p>

<p>There is a good possibility that we will miss corner cases if we decide to add tests later because the cases, or the context is not fresh anymore.</p>

<p><strong>Lack of motivation</strong></p>

<p>What would be the motivation to add tests 7 days later? Lack of coverage in Sonar?</p>

<p>Well, someone might even say this - “the code is already working somewhere (in Dev, QA or even in prod), why bother adding tests now”.
It is so easy for such a thought process to set in and once it sets in, tests would only be added for finishing some formality.</p>

<p><strong>Delayed refactoring</strong></p>

<p>In the absence of tests, refactoring for various parts of code will get delayed. This in turn has a huge drawback, a method which is 50 lines today might
grow to 100 lines in 7 days. Not only are the number of code smells going to increase later, but even refactoring might become tricky or may take longer.</p>

<p>What are we basing theory of “adding code today and tests later” on? How is tomorrow going to be any different? Is sun going to shine too brightly tomorrow?
Are we going to stop churning stories tomorrow? Are we going to just add tests and do nothing else?</p>

<p>The overall idea is just flawed.</p>

<p>I know I could have hurt your emotions, but let’s take a look at some benefits of automated tests and see the real gains.</p>

<h3 id="benefits-of-automated-tests">Benefits of automated tests</h3>

<p>Automated tests provide a lot of benefits. I will list a few -</p>

<p><strong>Provide confidence</strong></p>

<p>Automated tests are like a certification for a working code. I know <code class="language-plaintext highlighter-rouge">leftShift</code> is working properly everytime its tests pass.
In fact, automated tests act as a mapping between questions and answers. I can ask various questions to unit tests -</p>
<ul>
  <li>How would <code class="language-plaintext highlighter-rouge">leftShift</code> behave if I pass a slice with empty elements</li>
  <li>How would <code class="language-plaintext highlighter-rouge">leftShift</code> behave if I pass a slice with a single element</li>
  <li>How would <code class="language-plaintext highlighter-rouge">leftShift</code> behave if I pass a slice with N elements, where N &gt; 1</li>
  <li>How would <code class="language-plaintext highlighter-rouge">leftShift</code> behave if I pass a slice with N elements containing duplicates, where N &gt; 1</li>
  <li>How would <code class="language-plaintext highlighter-rouge">leftShift</code> behave if I invoke the method with a nil receiver, ie; <code class="language-plaintext highlighter-rouge">s</code> of <code class="language-plaintext highlighter-rouge">(s *slice)</code> is nil</li>
</ul>

<p>It is a huge confidence booster :) if all these questions are answered by passing tests.</p>

<p><strong>Act as safety net</strong></p>

<p>Automated tests are a brilliant safety net, I can go ahead and refactor code without any fear. I know I have tests which would fail loudly if I mess things up, so there is no fear of making mistakes while refactoring.</p>

<p>I think it would be a very courageous move to refactor code without tests. (<em>Honestly, I don’t know if it is a courageous move or a stupid move.</em>)
But, if I decide to refactor code without tests, I think I would be blocked by anxiety, there will be a constant banging in the head - what if refactoring breaks the code,
can I just stop refactoring here, is it really necessary to refactor etc. With tests written for the code, there is no case of anxiety or fear.</p>

<blockquote class="wp-block-quote">
	Tests are anxiety busters :), especially unit tests
</blockquote>

<p><strong>Provide quick feedback</strong></p>

<p>Automated tests provide quick feedback on any change that is done in the code.
Assume (just assume) we are refactoring a long method, and we do not have tests. Let’s try to imagine what the world would look like now -</p>
<ol>
  <li>Extract a piece of code into a new method</li>
  <li>Run the entire application, send some requests and see if the extraction worked</li>
  <li>It worked, congratulations</li>
  <li>Rename the extracted method</li>
  <li>Run the entire application, send some requests and see if renaming worked</li>
  <li>It worked, congratulations again</li>
  <li>Change the number of parameters of the extracted method</li>
  <li>Run the entire application, send some requests and see if the change in number of parameters worked</li>
  <li>You really deserve congratulations</li>
  <li>The method is feature envy, let’s move it to the right class</li>
</ol>

<p>…</p>

<p>If there were unit tests, we could have run them every time on every change, and it would have been way quicker than running the entire application N times.
There is a strange part that I don’t seem to understand, I will explain.
If the argument for not writing tests or deferring writing tests is “lack of time”, then, where would you get time for running the application N times
to validate if a change has worked.</p>

<p><strong>Provide ability to move fast under pressure</strong></p>

<p>Automated tests provide the ability to move fast under pressure. Let’s say a production defect is found and  if we have unit tests, we are SAFE. 
Under production issue pressure what we don’t want to do is make a small problem explode into a bigger one.
With unit tests in place, all we do is -</p>
<ul>
  <li>replicate the issue by adding a failing test</li>
  <li>make the necessary code changes to pass the test</li>
  <li>run the entire test suite, if all is “green”, we are good</li>
</ul>

<p><em>Important Side note:</em> What we also don’t want to do is “just write UI tests in a web application”. We need quick feedback for any changes that we make in the code, and it becomes even more essential to figure out what kind of tests would make more sense for a given situation.</p>

<p>For instance, if there is a method which sorts all the “orders” based on “order date”. It does not make sense to test it as a part of some UI based test,
all this method does is “sorting of a collection based on an attribute”. Just add unit tests for the use-case and that is good enough to prove that a part
of the functionality (sorting) is working fine.</p>

<p><strong>Act as documentation</strong></p>

<p>Automated tests act as documentation for what the code does.
I don’t need to go through <code class="language-plaintext highlighter-rouge">leftShift</code> method to understand its behavior -</p>
<ul>
  <li>what if it is invoked with a slice containing empty elements</li>
  <li>what if it is invoked with a slice containing just one element</li>
</ul>

<p>I will just go and look at the tests. In fact, adding tests is one way of creating a trail of understanding for the readers. Readers of the code don’t need to make too much of an effort to find such answers,
they can directly look at the tests and find <em>most</em> of the answers.</p>

<p><strong>Provide an opportunity to think from a client’s perspective</strong></p>

<p>Automated tests give an opportunity to think from a client’s perspective and provide a lot of opportunities to improve the API.</p>

<p>Let’s imagine a struct <code class="language-plaintext highlighter-rouge">LinkedList</code> and I am required to add a behavior which
rotates a linked list left by N. (Assume, I am not doing TDD). I start with a behavior called <code class="language-plaintext highlighter-rouge">rotateList(n int)</code>, build it and now I go on to adding a test.
Test would look something like this -</p>

<figure class="highlight"><pre><code class="language-golang" data-lang="golang"><span class="k">func</span> <span class="n">TestRotatesALinkedListBy1</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">linkedList</span> <span class="o">:=</span> <span class="n">LinkedList</span><span class="p">{}</span>
	<span class="n">linkedList</span><span class="o">.</span><span class="n">rotateList</span><span class="p">(</span><span class="m">1</span><span class="p">)</span>
    <span class="o">....</span>
<span class="p">}</span></code></pre></figure>

<p>One of the first things that I notice is the name of the method <code class="language-plaintext highlighter-rouge">rotateList</code>.
In the expression <code class="language-plaintext highlighter-rouge">linkedList.rotateList</code>, do I need to call the behavior as <code class="language-plaintext highlighter-rouge">rotateList</code> or just <code class="language-plaintext highlighter-rouge">rotate</code> is good enough
because it is invoked on a list. I would go and rename it to <code class="language-plaintext highlighter-rouge">rotate</code> and now my client call looks like <code class="language-plaintext highlighter-rouge">linkedList.rotate(1)</code>.</p>

<p>Once I start paying attention to the entire expression <code class="language-plaintext highlighter-rouge">linkedList.rotate(1)</code>, I would realize <code class="language-plaintext highlighter-rouge">rotate(1)</code> is not making sense. It does not tell the clients or the readers that the intention is to
rotate list by 1. What if it were renamed to <code class="language-plaintext highlighter-rouge">rotateBy()</code>, it would make my client call look like this <code class="language-plaintext highlighter-rouge">linkedList.rotateBy(1)</code></p>

<p>Now, probably the last thing would be, <code class="language-plaintext highlighter-rouge">linkedList.rotateBy(1)</code> does not tell the clients about the direction of rotation.
What if it were renamed to <code class="language-plaintext highlighter-rouge">rotateLeftBy()</code>, it would make my client call look like this <code class="language-plaintext highlighter-rouge">linkedList.rotateLeftBy(1)</code></p>

<figure class="highlight"><pre><code class="language-golang" data-lang="golang"><span class="k">func</span> <span class="n">TestRotatesALinkedListLeftBy1</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">linkedList</span> <span class="o">:=</span> <span class="n">LinkedList</span><span class="p">{}</span>
	<span class="n">linkedList</span><span class="o">.</span><span class="n">rotateLeftBy</span><span class="p">(</span><span class="m">1</span><span class="p">)</span>
    <span class="o">....</span>
<span class="p">}</span></code></pre></figure>

<blockquote class="wp-block-quote">
	Tests actually influence the design of class - at micro &amp; macro levels. And actually help write more intuitive code (because they are written from the outside-in perspective, it makes for more readable code... than code which is influenced by "implementation details").
</blockquote>

<p>By not adding automated tests or by deferring addition of tests, we are just losing all these advantages.</p>

<h3 id="fundamental-idea">Fundamental idea</h3>

<p>One of the fundamental ideas behind coding is to break a problem into small pieces say tasks and each of these tasks requires a shifting episode between
code and tests. I will explain.  Let’s say we want to build a <a href="https://www.geeksforgeeks.org/linked-list-set-1-introduction/">linked list</a> which supports <code class="language-plaintext highlighter-rouge">get(key)</code>
and <code class="language-plaintext highlighter-rouge">put(key, value []byte)</code>.</p>

<p>The idea would be to break the problem into small solvable problems and attempt to solve the simplest. One of the task lists could be -</p>
<ul>
  <li>Build a linked list which supports <code class="language-plaintext highlighter-rouge">put(key, value)</code> with a single node</li>
  <li>Add tests to assert that <code class="language-plaintext highlighter-rouge">put(key, value)</code> works</li>
  <li>Enhance linked list which now supports <code class="language-plaintext highlighter-rouge">put(key, value)</code> with multiple nodes</li>
  <li>Add tests to assert that <code class="language-plaintext highlighter-rouge">put(key, value)</code> works</li>
  <li>Add <code class="language-plaintext highlighter-rouge">get(key)</code> in linked list</li>
  <li>Add tests to assert that <code class="language-plaintext highlighter-rouge">get(key)</code> works if key is found</li>
  <li>Add tests to assert that <code class="language-plaintext highlighter-rouge">get(key)</code> works if key is not found; if it does not work, go back and change the code</li>
  <li>Add tests to assert that <code class="language-plaintext highlighter-rouge">get(key)</code> works even if list is empty; if it does not work, go back and change the code</li>
  <li>Looks good, relook at all the test cases and see if we have missed anything</li>
</ul>

<p>It looks like there is a continuous dialogue between code and tests, both of them seem to be talking to each other.</p>

<p>A test says, “Hey, <code class="language-plaintext highlighter-rouge">get</code> is failing when a key is not present”, code says, “Updated, please run yourself again”.</p>

<p>Code says, “I will return an error if value for a key is not present” and test would say “let me check if it makes sense from a client’s perspective and get back”.</p>

<p>Essentially, it’s the very act of design and coding that needs small focused episodes with actual code, driving the code with various scenarios.
Tests and TDD help by adding some specific guidance to it, which is a huge benefit.</p>

<p><em>If all of this is not good enough, then ..</em></p>

<h3 id="would-you-buy-a-car-without-brakes">Would you buy a car without brakes?</h3>

<p>One of the things that the automated tests provide is a “safety net” which in turn allows us to make changes in code with confidence. I am not sure why do we even call software delivery a delivery, without automated tests.
Let’s try to draw an analogy between “building software” and “manufacturing car”.</p>

<blockquote class="wp-block-quote">
    <p>If it is ok to write code without tests, to deliver software without tests, then we should be ok to buy a car without brakes. </p>
</blockquote>

<p>How would it feel if a car manufacturer told us to buy a car without brakes. If adding tests in the code can be deferred or be considered non-essential, why can’t brakes in a car be considered non-essential?
The point is why can’t brakes be added later on if time permits, if there is no delivery pressure or, if there are less delivery orders?</p>

<p>We really need confidence in the car that we are driving, we also need confidence in the brakes, and if confidence is such an important thing, then
why not build confidence in the code by adding automated tests for every piece of code that we write?</p>

<p><em>If our software is a car, then automated tests are the brakes.</em> Like we said, we need confidence in the brakes as well which essentially means, it is not just about writing
tests because of some code coverage policy in the organization, it is about “building a trail of understanding for all the readers”, about stating “what is it that a piece of code does”, “when does it fail”, “what kind of inputs does it take” and so many other things.</p>

<blockquote class="wp-block-quote">
	It is our responsibility to ensure these "brakes" exist in the code (or the system) and they are reliable. They should not exist just for the sake of existing. 
</blockquote>

<h3 id="time-is-still-a-factor-isnt-it">Time is still a factor, isn’t it?</h3>

<p>Yes, it is and that is where a combination of a couple of things is needed, <strong>passion to learn and improve</strong> and <strong>the support from leadership in the
project (or the account).</strong></p>

<p>Let’s see a few ways in which this can be done -</p>

<p><strong>Setting realistic expectations</strong></p>

<p>It is essential for the leadership in the account to be aware of the situation on the ground before making any commitment. If the team needs time to learn
and work on automated testing, it should be baked in the release plan, probably by keeping a low velocity in the initial iterations (assuming agile) and then gradually
attempting to increase it as the team becomes more and more comfortable with automated testing.</p>

<p><strong>Investing in the team</strong></p>

<p>It is essential to provide learning resources like books / videos / articles to the team to help them learn automated testing. At the same time, it is 
very much needed for the team to come together and align on (automated) testing strategy.</p>

<p><strong>Building a culture of continuous improvement</strong></p>

<p>It is essential to build a culture of continuous improvement, “Done” is not an option. If a team is not doing automated testing, it needs to learn, probably
a few members need to act as “catalysts”. 
They shouldn’t stop at learning, they need to practice it, check how various open source projects are doing it and teach it to other team members. 
A team can try to do “lunch and learn”, “mob pairing”, or “collaborative code improvement” type of sessions.</p>

<p><em>These are just a few ways, but the idea is - teams should make attempts to improve, and the necessary “support system” should be built around the team.</em></p>

<h3 id="conclusion">Conclusion</h3>

<p>I don’t see any reason for not writing tests or deferring the addition of tests. I think once you get addicted to “quick feedback”, this point of developing
without tests, writing code today and adding tests later and not doing TDD automatically goes away.</p>

<p>If a team finds it difficult to write tests, or it takes too long to write tests, then the team needs to practice it more.
Practice till it becomes a habit. Not adding tests is not a solution. It is an easy hack but an expensive one. At the same time,
the necessary “support system” should be built around the team.</p>

<p>If a team believes their software has been working without issues and that too without tests, I think it is just a matter of “when”, not “if”. Try to
get better at things before it all comes crashing down.</p>

<p>If a team believes there is delivery pressure today and tests can be added tomorrow, then the team needs to be sure of one thing - “That tomorrow is never coming”.</p>

<h3 id="mentions">Mentions</h3>
<p>I would like to thank <a href="https://life-lessons.in/">Gurpreet Luthra</a>, <a href="https://github.com/unmeshjoshi">Unmesh Joshi</a> 
and <a href="https://www.sunitparekh.in/about/">Sunit Parekh</a> for providing feedback on the article. Thank you Gurpreet, Unmesh and Sunit.</p>]]></content><author><name>Sarthak Makhija</name></author><category term="Agile" /><category term="Testing" /><category term="Agile" /><category term="Testing" /><category term="Refactoring" /><summary type="html"><![CDATA[What would it really mean to write code without automated tests, to deliver software without automated tests. Why would someone even think of writing code today and adding tests later?]]></summary></entry><entry><title type="html">Diving into Java Bytecode</title><link href="https://tech-lessons.in/diving-into-java-bytecode/" rel="alternate" type="text/html" title="Diving into Java Bytecode" /><published>2021-04-04T00:00:00+05:30</published><updated>2021-04-04T00:00:00+05:30</updated><id>https://tech-lessons.in/diving-into-java-bytecode</id><content type="html" xml:base="https://tech-lessons.in/diving-into-java-bytecode/"><![CDATA[<blockquote class="wp-block-quote">
    <p>Java code is compiled into an intermediate representation called "bytecode". It is this bytecode which gets executed by JVM and is later converted into machine specific instructions by JIT compiler. With this article, we attempt to dive into bytecode and understand the internals of various bytecode operations.</p>
</blockquote>

<p>This article aims to cover the following topics -</p>

<h3 id="content">Content</h3>
<ol>
  <li>Terminology</li>
  <li>Quick overview of class file structure</li>
  <li>Bytecode execution model</li>
  <li>Introducing bytecode opcodes</li>
  <li>Opcodes for object creation</li>
  <li>Combining things together</li>
  <li>Summary</li>
  <li>References</li>
</ol>

<p>Let’s get an understanding of some terms before we start to dive in.</p>

<h3 id="terminology">Terminology</h3>

<p><strong>Bytecode</strong></p>

<p>An intermediate representation of Java code which JVM understands.</p>

<blockquote class="wp-block-quote">
    <p>This intermediate representation is called bytecode because each "opcode" is represented by 1 byte. This effectively means, a total of 256 opcodes are possible.</p> 
</blockquote>

<p>These opcodes may take arguments and arguments can be up to 2 bytes long. This means a bytecode instruction which is a combination of an opcode and arguments could be as long as 3 bytes.</p>

<p>We will see various opcodes as we move on, but let’s take a quick glimpse of an instruction which is an output from <strong>javap</strong> utility -</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="mi">9</span><span class="o">:</span> <span class="n">iconst_0</span></code></pre></figure>

<ul>
  <li>iconst_0 is an opcode which pushes a constant value 0 on top of the stack</li>
  <li>Every opcode is prefixed with a letter like <code class="language-plaintext highlighter-rouge">i</code> / <code class="language-plaintext highlighter-rouge">d</code> etc to represent the data type that opcode is dealing with</li>
  <li>Every bytecode instruction will start with an offset <em>(9: in the previous example)</em>. This comes handy when a “goto” opcode is used</li>
</ul>

<p><strong>javap</strong></p>

<p>Standard Java class file disassembler distributed with JDK. It provides a human-readable format of class file.</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">javap</span> <span class="o">-</span><span class="n">p</span> <span class="o">-</span><span class="n">v</span> <span class="o">-</span><span class="n">c</span> <span class="o">&lt;</span><span class="n">path</span> <span class="n">to</span> <span class="n">the</span> <span class="kd">class</span> <span class="nc">file</span><span class="o">&gt;</span>

<span class="o">-</span><span class="n">p</span> <span class="o">=&gt;</span> <span class="n">display</span> <span class="kd">private</span> <span class="n">methods</span>
<span class="o">-</span><span class="n">v</span> <span class="o">=&gt;</span> <span class="n">be</span> <span class="n">verbose</span>
<span class="o">-</span><span class="n">c</span> <span class="o">=&gt;</span> <span class="n">disassemble</span> <span class="n">the</span> <span class="n">source</span> <span class="n">code</span></code></pre></figure>

<h3 id="quick-overview-of-class-file-structure">Quick overview of class file structure</h3>

<p>Let’s take a quick look at the structure of the class file. Don’t worry if something is not clear at this stage, it should become clear as we proceed with examples.
Let’s take a simple example to understand what constitutes our class file.</p>

<p>(<em>Please note: bytecode is trimmed for the entire article</em>).</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">final</span> <span class="kd">public</span> <span class="kd">class</span> <span class="nc">SumOfN</span> <span class="kd">implements</span> <span class="nc">Serializable</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">n</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">SumOfN</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">n</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">sum</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">//code left out</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p><strong>bytecode</strong></p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">SumOfN</span> <span class="kd">implements</span> <span class="n">java</span><span class="o">.</span><span class="na">io</span><span class="o">.</span><span class="na">Serializable</span>
    <span class="n">minor</span> <span class="nl">version:</span> <span class="mi">0</span>
    <span class="n">major</span> <span class="nl">version:</span> <span class="mi">59</span>
    <span class="nl">flags:</span> <span class="o">(</span><span class="mh">0x0031</span><span class="o">)</span> <span class="no">ACC_PUBLIC</span><span class="o">,</span> <span class="no">ACC_FINAL</span><span class="o">,</span> <span class="no">ACC_SUPER</span>
    <span class="nl">this_class:</span> <span class="err">#</span><span class="mi">8</span>                          <span class="c1">// org/sample/SumOfN</span>
    <span class="nl">super_class:</span> <span class="err">#</span><span class="mi">2</span>                         <span class="c1">// java/lang/Object</span>
    <span class="nl">interfaces:</span> <span class="mi">1</span><span class="o">,</span> <span class="nl">fields:</span> <span class="mi">1</span><span class="o">,</span> <span class="nl">methods:</span> <span class="mi">2</span><span class="o">,</span> <span class="nl">attributes:</span> <span class="mi">1</span>
<span class="nc">Constant</span> <span class="nl">pool:</span>
    <span class="err">#</span><span class="mi">2</span> <span class="o">=</span> <span class="nc">Class</span>              <span class="err">#</span><span class="mi">4</span>             <span class="c1">// java/lang/Object</span>
    <span class="err">#</span><span class="mi">4</span> <span class="o">=</span> <span class="nc">Utf8</span>               <span class="n">java</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="nc">Object</span>
    <span class="err">#</span><span class="mi">8</span> <span class="o">=</span> <span class="nc">Class</span>              <span class="err">#</span><span class="mi">10</span>            <span class="c1">// org/sample/SumOfN</span>
    <span class="err">#</span><span class="mi">10</span> <span class="o">=</span> <span class="nc">Utf8</span>              <span class="n">org</span><span class="o">/</span><span class="n">sample</span><span class="o">/</span><span class="nc">SumOfN</span></code></pre></figure>

<p><strong>Magic number (0xCAFEBABE)</strong> is what every class file starts with. The first four bytes indicate that it is a class file and, the remaining four bytes
indicate the minor and major versions used to compile the source file.</p>

<p><strong>Major and minor version</strong> indicate the version of JDK used to compile the source file. In the previous example minor version is 0 and major version is 59 (which is Java SE 15).</p>

<p><strong>Flags</strong> indicate the modifiers that are applied to the class. In the previous example, we have ACC_PUBLIC indicating it is a public class,  ACC_FINAL indicating 
it is a final class, ACC_SUPER exists for backward compatibility for the code compiled by Sun’s older compilers for the Java programming language. (More on this <a href="https://bugs.java.com/bugdatabase/view_bug.do?bug_id=6527033">here</a>)</p>

<p><strong>Constant pool</strong>
Is a part of class file which contains -</p>
<ul>
  <li>string literals/constants</li>
  <li>doubles/float values</li>
  <li>names of classes</li>
  <li>interfaces</li>
  <li>fields</li>
</ul>

<p>which are used in a class. Various opcodes like <strong>invokevirtual</strong> refer to constant pool entry to identify the virtual method to be invoked.</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="mi">1</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">7</span>  <span class="c1">// Method run:()Ljava/lang/Object;</span></code></pre></figure>

<p>Here, <strong>invokevirtual</strong> takes an argument which refers to an entry in the constant pool and, the entry indicates the method to be called along with its parameter and return type.</p>

<p><strong>this_class</strong> refers to an entry (#8) in the constant pool, which in turn refers to another entry (#10) in the pool that returns <code class="language-plaintext highlighter-rouge">org/sample/SumOfN</code>.
Effectively, <strong>this_class</strong> holds the name of the current class.</p>

<p><strong>super_class</strong> refers to an entry (#2) in the constant pool, which in turn refers to another entry (#4) in the pool that returns <code class="language-plaintext highlighter-rouge">java.lang.Object</code> 
Effectively, <strong>super_class</strong> holds the name of the super class.</p>

<p><strong>interfaces, fields, methods</strong> respectively indicate the number of interfaces implemented by the class, number of fields that the class holds and the number of methods
that the class has.</p>

<p><strong>attributes</strong> are used in the class file, field level information, method information, and code attribute structures. One example of an attribute is <code class="language-plaintext highlighter-rouge">Exceptions</code>
which indicates which checked exceptions a method may throw. This attribute is attached to <code class="language-plaintext highlighter-rouge">method_info</code> structure.</p>

<p>This was a very quick overview of class file structure, for more details please check <a href="https://docs.oracle.com/javase/specs/jvms/se16/html/jvms-4.html">this</a> link.</p>

<h3 id="bytecode-execution-model">Bytecode execution model</h3>

<p>JVM operates using stack as its execution model. Stack is a collection of frames, each of which is allocated when a method is invoked.</p>

<p>A stack frame consists of -</p>

<p><strong>Operand Stack</strong>
Most of the opcodes operate by pushing-in or popping-out value to or from the operand stack. Eg; <strong>iconst_0</strong> pushes 0 on top of the stack.</p>

<p><strong>LocalVariableTable (an array of local variables)</strong>
In order to allow a variable to be assigned a value, a local variable table is used. <code class="language-plaintext highlighter-rouge">LocalVariableTable</code> is a simple data structure which contains the name of the variable, 
its data type, its slot along with some other fields.</p>

<p>LocalVariableTable contains -</p>
<ul>
  <li>variables that are local to a method</li>
  <li>method parameters</li>
  <li><code class="language-plaintext highlighter-rouge">this</code>, if the method is not static. <code class="language-plaintext highlighter-rouge">this</code> is allocated slot 0 in LocalVariableTable</li>
</ul>

<p>Eg; <strong>istore_1</strong> is an opcode which stores an integer value into LocalVariableTable at slot 1 by picking value from top of the stack.</p>

<h3 id="introducing-bytecode-opcodes">Introducing bytecode opcodes</h3>
<p>Let’s take a simple example which adds 2 integers, to understand opcodes and their execution.</p>

<p><strong>AdditionExample</strong></p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AdditionExample</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">execute</span><span class="o">()</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">addend</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">augend</span> <span class="o">=</span> <span class="mi">20</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">addend</span> <span class="o">+</span> <span class="n">augend</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p><strong>bytecode (AdditionExample)</strong></p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AdditionExample</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nf">AdditionExample</span><span class="o">();</span>
        <span class="nl">Code:</span>
            <span class="mi">0</span><span class="o">:</span> <span class="n">aload_0</span>
            <span class="mi">1</span><span class="o">:</span> <span class="n">invokespecial</span> <span class="err">#</span><span class="mi">1</span>   <span class="c1">// Method java/lang/Object."&lt;init&gt;":()V</span>
            <span class="mi">4</span><span class="o">:</span> <span class="k">return</span>
    
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">execute</span><span class="o">();</span>
        <span class="nl">Code:</span>
          <span class="n">stack</span><span class="o">=</span><span class="mi">2</span><span class="o">,</span> <span class="n">locals</span><span class="o">=</span><span class="mi">3</span><span class="o">,</span> <span class="n">args_size</span><span class="o">=</span><span class="mi">1</span>
            <span class="mi">0</span><span class="o">:</span> <span class="n">bipush</span>        <span class="mi">10</span>
            <span class="mi">2</span><span class="o">:</span> <span class="n">istore_1</span>
            <span class="mi">3</span><span class="o">:</span> <span class="n">bipush</span>        <span class="mi">20</span>
            <span class="mi">5</span><span class="o">:</span> <span class="n">istore_2</span>
            <span class="mi">6</span><span class="o">:</span> <span class="n">iload_1</span>
            <span class="mi">7</span><span class="o">:</span> <span class="n">iload_2</span>
            <span class="mi">8</span><span class="o">:</span> <span class="n">iadd</span>
            <span class="mi">9</span><span class="o">:</span> <span class="n">ireturn</span>

        <span class="nl">LocalVariableTable:</span>
        <span class="nc">Start</span>  <span class="nc">Length</span>  <span class="nc">Slot</span>  <span class="nc">Name</span>     <span class="nc">Signature</span>
            <span class="mi">0</span>      <span class="mi">10</span>     <span class="mi">0</span>  <span class="k">this</span>     <span class="nc">Lorg</span><span class="o">/</span><span class="n">sample</span><span class="o">/</span><span class="nc">AdditionExample</span><span class="o">;</span>
            <span class="mi">3</span>       <span class="mi">7</span>     <span class="mi">1</span>  <span class="n">addend</span>   <span class="no">I</span>
            <span class="mi">6</span>       <span class="mi">4</span>     <span class="mi">2</span>  <span class="n">augend</span>   <span class="no">I</span>
<span class="o">}</span></code></pre></figure>

<p>The bytecode of <code class="language-plaintext highlighter-rouge">AdditionExample()</code> should become clear as we move on but first let’s understand the bytecode of <code class="language-plaintext highlighter-rouge">execute</code> method -</p>
<ol>
  <li>The Java compiler has indicated the depth of stack needed during the execution of this method. <code class="language-plaintext highlighter-rouge">stack=2</code> means at any point during this method execution
we will have a maximum of 2 entries on the stack. <code class="language-plaintext highlighter-rouge">locals=3</code> indicate that there are 3 local variables which will need to go in LocalVariableTable. One variable is
<code class="language-plaintext highlighter-rouge">addend</code>, other is <code class="language-plaintext highlighter-rouge">augend</code> and the last is <code class="language-plaintext highlighter-rouge">this</code>. <code class="language-plaintext highlighter-rouge">args_size=1</code> indicates one object needs to be initialized before the method call, which 
again is <code class="language-plaintext highlighter-rouge">this</code></li>
  <li><strong>bipush</strong> is an opcode which pushes a byte sized integer on the stack. It takes an argument which is 10 in our case</li>
  <li><strong>istore_1</strong> takes the value from top of the stack, which is 10 and assigns it into LocalVariableTable at slot 1. This opcode removes the value from stack top</li>
  <li><strong>bipush</strong> now pushes 20 to the top of the stack</li>
  <li><strong>istore_2</strong> takes the value from top of the stack, which is 20 and assigns it into LocalVariableTable at slot 2</li>
  <li>At this stage, values 10 and 20 have been assigned to addend and augend in LocalVariableTable, and our stack is empty. This means these 2 values need to be brought into stack before an addition can be performed</li>
  <li><strong>iload_1</strong> copies the value from slot 1 of LocalVariableTable to the stack</li>
  <li><strong>iload_2</strong> copies the value from slot 2 of LocalVariableTable to the stack</li>
  <li>Stack now contains 10 and 20. <strong>iadd</strong> pops 2 integer values from top 2 positions of the stack and sums them up. It stores the result back in the stack top</li>
  <li><strong>ireturn</strong> takes the value from stack top and returns an integer</li>
</ol>

<p>Following diagram represents the overall execution -</p>
<div class="wp-block-image is-style-default">
    <img style="padding-left: 0; max-width: 125%" src="/assets/img/pexels/addition-example.png" class="wp-image-878" />
</div>
<p></p>

<p>Few things to note-</p>
<ul>
  <li>All the opcodes are prefixed with an <code class="language-plaintext highlighter-rouge">i</code>, indicating that we are dealing with an integer data type</li>
  <li>Slot 0 of LocalVariableTable is occupied by <code class="language-plaintext highlighter-rouge">this</code> of AdditionExample</li>
  <li>All the entries in LocalVariableTable are statically typed</li>
  <li>Bytecode is statically typed in a sense that all the opcodes which work with specific data type</li>
</ul>

<p>Quick summary of opcodes that we have seen so far -</p>

<table>
  <thead>
    <tr>
      <th>Opcode</th>
      <th>Purpose</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>istore_slot</td>
      <td>Takes an integer value from top of the stack and assigns it into LocalVariableTable at defined slot</td>
    </tr>
    <tr>
      <td>iload_slot</td>
      <td>Copies the value from defined slot of LocalVariableTable to the stack</td>
    </tr>
    <tr>
      <td>bipush</td>
      <td>Pushes a byte sized integer on the stack</td>
    </tr>
  </tbody>
</table>

<p>Let’s take another example, which is a slight modification of the first one. The idea is to invoke a method from another method.</p>

<p><strong>MethodInvocation</strong></p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AdditionExample</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">execute</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nf">add</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="nf">add</span><span class="o">()</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">addend</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">augend</span> <span class="o">=</span> <span class="mi">20</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">addend</span> <span class="o">+</span> <span class="n">augend</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p><strong>bytecode (MethodInvocation)</strong></p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AdditionExample</span> <span class="o">{</span>
<span class="nc">Constant</span> <span class="nl">pool:</span>
    <span class="err">#</span><span class="mi">7</span> <span class="o">=</span> <span class="nc">Methodref</span>          <span class="err">#</span><span class="mi">8</span><span class="o">.</span><span class="err">#</span><span class="mi">9</span>          <span class="c1">// org/sample/AdditionExample.add:()I</span>
    <span class="err">#</span><span class="mi">8</span> <span class="o">=</span> <span class="nc">Class</span>              <span class="err">#</span><span class="mi">10</span>            <span class="c1">// org/sample/AdditionExample</span>
    <span class="err">#</span><span class="mi">9</span> <span class="o">=</span> <span class="nc">NameAndType</span>        <span class="err">#</span><span class="mi">11</span><span class="o">:</span><span class="err">#</span><span class="mi">12</span>        <span class="c1">// add:()I</span>
    <span class="err">#</span><span class="mi">10</span> <span class="o">=</span> <span class="nc">Utf8</span>              <span class="n">org</span><span class="o">/</span><span class="n">sample</span><span class="o">/</span><span class="nc">AdditionExample</span>
    <span class="err">#</span><span class="mi">11</span> <span class="o">=</span> <span class="nc">Utf8</span>              <span class="n">add</span>
    <span class="err">#</span><span class="mi">12</span> <span class="o">=</span> <span class="nc">Utf8</span>              <span class="o">()</span><span class="no">I</span>

    <span class="kd">public</span> <span class="nf">AdditionExample</span><span class="o">();</span>
        <span class="nl">Code:</span>
            <span class="mi">0</span><span class="o">:</span> <span class="n">aload_0</span>
            <span class="mi">1</span><span class="o">:</span> <span class="n">invokespecial</span> <span class="err">#</span><span class="mi">1</span>    <span class="c1">// Method java/lang/Object."&lt;init&gt;":()V</span>
            <span class="mi">4</span><span class="o">:</span> <span class="k">return</span>
        
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">execute</span><span class="o">();</span>
        <span class="nl">Code:</span>
            <span class="mi">0</span><span class="o">:</span> <span class="n">aload_0</span>
            <span class="mi">1</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">7</span>   <span class="c1">// Method add:()I</span>
            <span class="mi">4</span><span class="o">:</span> <span class="n">ireturn</span>
    
    <span class="kd">private</span> <span class="kt">int</span> <span class="nf">add</span><span class="o">();</span>
        <span class="nl">Code:</span>
            <span class="mi">0</span><span class="o">:</span> <span class="n">bipush</span>        <span class="mi">10</span>
            <span class="mi">2</span><span class="o">:</span> <span class="n">istore_1</span>
            <span class="mi">3</span><span class="o">:</span> <span class="n">bipush</span>        <span class="mi">20</span>
            <span class="mi">5</span><span class="o">:</span> <span class="n">istore_2</span>
            <span class="mi">6</span><span class="o">:</span> <span class="n">iload_1</span>
            <span class="mi">7</span><span class="o">:</span> <span class="n">iload_2</span>
            <span class="mi">8</span><span class="o">:</span> <span class="n">iadd</span>
            <span class="mi">9</span><span class="o">:</span> <span class="n">ireturn</span>
<span class="o">}</span></code></pre></figure>

<p>Bytecode in <code class="language-plaintext highlighter-rouge">add</code> method should look very familiar 😁. Let’s look at the bytecode for <code class="language-plaintext highlighter-rouge">execute</code> method which only invokes <code class="language-plaintext highlighter-rouge">add</code> method-</p>
<ol>
  <li><strong>aload_0</strong> copies the value from slot 0 of LocalVariableTable to the stack. Slot 0 of LocalVariableTable contains <code class="language-plaintext highlighter-rouge">this</code>, which means stack top now contains <code class="language-plaintext highlighter-rouge">this</code></li>
  <li>Now is the time to invoke the private method <code class="language-plaintext highlighter-rouge">add</code> of the same class. <strong>invokevirtual</strong> is used for invoking a virtual method and, it takes a parameter which is a reference to an entry in the constant pool. Let’s see how does this entry get used -
    <ul>
      <li>Entries in constant pool are composable, which means an entry could be created by referring to other entries</li>
      <li>#7 is a method reference entry which refers to #8 and #9</li>
      <li>#8 refers to an entry #10 which specifies the name of the class <code class="language-plaintext highlighter-rouge">org/sample/AdditionExample</code></li>
      <li>#9 refers to entries #11 and #12 which specify the method name <code class="language-plaintext highlighter-rouge">add</code> along with its signature <code class="language-plaintext highlighter-rouge">()I</code> (<em>no parameters, integer return type</em>) respectively</li>
      <li>#7 in short, provides a complete signature of the <code class="language-plaintext highlighter-rouge">add</code> method including its class name <code class="language-plaintext highlighter-rouge">org/sample/AdditionExample.add:()I</code></li>
    </ul>
  </li>
  <li>Our stack contains <code class="language-plaintext highlighter-rouge">this</code> which will be used for invoking <code class="language-plaintext highlighter-rouge">add</code> method</li>
  <li><strong>invokevirtual</strong> pops the entry from stack top which is <code class="language-plaintext highlighter-rouge">this</code>, invokes <code class="language-plaintext highlighter-rouge">add</code> method and stores the result in stack top</li>
  <li><strong>ireturn</strong> takes the value from stack top and returns an integer</li>
</ol>

<p><em>javap by default does not return the output for private methods, use -p flag to see the output for private methods.</em></p>

<p>One of the questions that is worth answering is “how does <strong>invokevirtual</strong> know about the number entries to be popped out?”. In order to answer this, we will modify our
previous example slightly and see the behavior of <strong>invokevirtual</strong>.</p>

<p><strong>MethodInvocation with parameters</strong></p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AdditionExample</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">execute</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nf">add</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="mi">20</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="nf">add</span><span class="o">(</span><span class="kt">int</span> <span class="n">addend</span><span class="o">,</span> <span class="kt">int</span> <span class="n">augend</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">addend</span> <span class="o">+</span> <span class="n">augend</span><span class="o">;</span>
    <span class="o">}</span></code></pre></figure>

<p><strong>bytecode (MethodInvocation with parameters)</strong></p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AdditionExample</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nf">AdditionExample</span><span class="o">();</span>
        <span class="nl">Code:</span>
            <span class="o">....</span>
    
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">execute</span><span class="o">();</span>
        <span class="nl">Code:</span>
            <span class="mi">0</span><span class="o">:</span> <span class="n">aload_0</span>
            <span class="mi">1</span><span class="o">:</span> <span class="n">bipush</span>        <span class="mi">10</span>
            <span class="mi">3</span><span class="o">:</span> <span class="n">bipush</span>        <span class="mi">20</span>
            <span class="mi">5</span><span class="o">:</span> <span class="n">invokevirtual</span> <span class="err">#</span><span class="mi">7</span>       <span class="c1">// Method add:(II)I</span>
            <span class="mi">8</span><span class="o">:</span> <span class="n">ireturn</span>
    
    <span class="kd">private</span> <span class="kt">int</span> <span class="nf">add</span><span class="o">(</span><span class="kt">int</span><span class="o">,</span> <span class="kt">int</span><span class="o">);</span>
        <span class="nl">Code:</span>
            <span class="o">...</span>
<span class="o">}</span></code></pre></figure>

<p>Let’s look at the bytecode for <code class="language-plaintext highlighter-rouge">execute</code> method again -</p>
<ol>
  <li><code class="language-plaintext highlighter-rouge">this</code> is pushed on the stack, followed by push of values 10 and 20</li>
  <li>Stack contains <code class="language-plaintext highlighter-rouge">this</code>, <code class="language-plaintext highlighter-rouge">10</code> and <code class="language-plaintext highlighter-rouge">20</code></li>
  <li>There is a change in signature of the method which will be invoked by <strong>invokevirtual</strong>. <code class="language-plaintext highlighter-rouge">add</code> now takes 2 integer parameters and returns an integer. Method signature is denoted by <code class="language-plaintext highlighter-rouge">add:(II)I</code></li>
  <li><strong>invokevirtual</strong> now needs to pop 3 entries from the stack, 2 integers which were pushed using <strong>bipush</strong> opcode and a reference to <code class="language-plaintext highlighter-rouge">this</code> which was pushed using <strong>aload_0</strong></li>
  <li>Once it pops the entries, <code class="language-plaintext highlighter-rouge">add</code> method is invoked and, the result is stored in stack top</li>
  <li><strong>ireturn</strong> takes the value from stack top and returns an integer</li>
</ol>

<p>Effectively, <strong>invokevirtual</strong> knows the number of entries to be popped based on the signature of the method to be invoked. As seen in previous example, in order to invoke a method
which takes 2 parameters, we need to pop 2 values from the stack along with an instance of the current class.</p>

<p>Quick summary of opcodes that we have seen so far -</p>

<table>
  <thead>
    <tr>
      <th>Opcode</th>
      <th>Purpose</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>aload_slot</td>
      <td>Copies the address value from a defined slot of LocalVariableTable to the stack, <code class="language-plaintext highlighter-rouge">a</code> stands for address</td>
    </tr>
    <tr>
      <td>invokevirtual</td>
      <td>Invokes virtual method, pops the entries from stack based on the signature of the method to be invoked</td>
    </tr>
  </tbody>
</table>

<h3 id="opcodes-for-object-creation">Opcodes for object creation</h3>
<p>Let’s take an example to understand the bytecode that gets generated during object creation.</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Book</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nf">Book</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="nc">Date</span> <span class="n">publishingDate</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">///</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">Date</span> <span class="nf">publishingDate</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">Date</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p>This example uses <code class="language-plaintext highlighter-rouge">java.util.Date</code>, (don’t ask why) and returns a <code class="language-plaintext highlighter-rouge">new Date</code> as a part of <code class="language-plaintext highlighter-rouge">publishingDate</code> method (again, don’t ask why 😁).</p>

<p><strong>bytecode (Object creation)</strong></p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Book</span> <span class="o">{</span>
<span class="kd">public</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">Date</span> <span class="nf">publishingDate</span><span class="o">();</span>
    <span class="nl">Code:</span>
        <span class="mi">0</span><span class="o">:</span> <span class="k">new</span>           <span class="err">#</span><span class="mi">7</span>     <span class="c1">// class java/util/Date</span>
        <span class="mi">3</span><span class="o">:</span> <span class="n">dup</span>
        <span class="mi">4</span><span class="o">:</span> <span class="n">invokespecial</span> <span class="err">#</span><span class="mi">9</span>     <span class="c1">// Method java/util/Date."&lt;init&gt;":()V</span>
        <span class="mi">7</span><span class="o">:</span> <span class="n">areturn</span>
<span class="o">}</span></code></pre></figure>

<p>This is a new territory that we are going into. Let’s understand the bytecode -</p>
<ol>
  <li><strong>new</strong> allocates the required memory for the object but does not call the constructor. It refers to the constant pool and identifies the object which is <code class="language-plaintext highlighter-rouge">java/util/Date</code> here, and allocates the required memory</li>
  <li>Our stack now contains the object reference created by <strong>new</strong></li>
  <li>Before we understand <strong>dup</strong>, let’ understand the need for it -
    <ul>
      <li>Let’s assume there is no <strong>dup</strong></li>
      <li>Our stack contains an object reference which means it is referring to some memory allocated by <strong>new</strong> opcode</li>
      <li>So far our <code class="language-plaintext highlighter-rouge">date</code> object has not been initialized. We need another opcode (invokespecial) for initializing it</li>
      <li><strong>invokespecial</strong> is used for invoking special methods like constructors. <strong>invokespecial</strong> refers to an entry in the constant pool (#9), resolves it
to the init method of <code class="language-plaintext highlighter-rouge">java.util.Date</code> class.</li>
      <li><strong>invokespecial</strong> will pop the entry from stack top and invoke the <code class="language-plaintext highlighter-rouge">init</code> method of <code class="language-plaintext highlighter-rouge">java.util.Date</code>. This means our date object is fully initialized now</li>
      <li>But, now our stack does not contain any reference to the newly created object because it was popped by <strong>invokespecial</strong> to invoke a method which does not return anything</li>
    </ul>
  </li>
  <li>So, we need <strong>dup</strong> to duplicate the entry on stack top</li>
  <li><strong>invokespecial</strong> pops the entry from stack top, invokes the <code class="language-plaintext highlighter-rouge">init</code> method of <code class="language-plaintext highlighter-rouge">java.util.Date</code> class to initialize the object</li>
  <li>We now have the stack containing an object reference which refers to the fully created <code class="language-plaintext highlighter-rouge">java.util.Date</code> instance</li>
  <li><strong>areturn</strong> takes the value from stack top and returns <code class="language-plaintext highlighter-rouge">java.util.Date</code> address</li>
</ol>

<p>Following diagram represents the overall execution -</p>
<div class="wp-block-image is-style-default">
    <img style="padding-left: 0; max-width: 70%" src="/assets/img/pexels/new-dup.png" class="wp-image-878" />
</div>
<p></p>

<p>Quick summary of opcodes that we have seen so far -</p>

<table>
  <thead>
    <tr>
      <th>Opcode</th>
      <th>Purpose</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>new</td>
      <td>Allocates the required memory for the object does not call the object constructor</td>
    </tr>
    <tr>
      <td>dup</td>
      <td>Duplicates the entry present on stack top</td>
    </tr>
    <tr>
      <td>invokespecial</td>
      <td>Invokes special methods like constructors</td>
    </tr>
  </tbody>
</table>

<h3 id="combining-things-together">Combining things together</h3>
<p>Time to take one last example and validate our learning.</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SumOfN</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">n</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">SumOfN</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">n</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">sum</span><span class="o">()</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">number</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">number</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="o">;</span> <span class="n">number</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">sum</span> <span class="o">=</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">number</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">sum</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p><strong>bytecode (SumOfN) constructor</strong></p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SumOfN</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">n</span><span class="o">;</span>
    
    <span class="kd">public</span> <span class="nf">SumOfN</span><span class="o">(</span><span class="kt">int</span><span class="o">);</span>
        <span class="nl">Code:</span>
            <span class="mi">0</span><span class="o">:</span> <span class="n">aload_0</span>
            <span class="mi">1</span><span class="o">:</span> <span class="n">invokespecial</span> <span class="err">#</span><span class="mi">1</span>     <span class="c1">// Method java/lang/Object."&lt;init&gt;":()V</span>
            <span class="mi">4</span><span class="o">:</span> <span class="n">aload_0</span>
            <span class="mi">5</span><span class="o">:</span> <span class="n">iload_1</span>
            <span class="mi">6</span><span class="o">:</span> <span class="n">putfield</span>      <span class="err">#</span><span class="mi">7</span>     <span class="c1">// Field n:I</span>
            <span class="mi">9</span><span class="o">:</span> <span class="k">return</span>
        
        <span class="nl">LocalVariableTable:</span>
        <span class="nc">Start</span>  <span class="nc">Length</span>  <span class="nc">Slot</span>  <span class="nc">Name</span>   <span class="nc">Signature</span>
            <span class="mi">0</span>      <span class="mi">10</span>     <span class="mi">0</span>  <span class="k">this</span>   <span class="nc">Lorg</span><span class="o">/</span><span class="n">sample</span><span class="o">/</span><span class="nc">SumOfN</span><span class="o">;</span>
            <span class="mi">0</span>      <span class="mi">10</span>     <span class="mi">1</span>     <span class="n">n</span>   <span class="no">I</span>
<span class="o">}</span></code></pre></figure>

<p>Let’s begin with <code class="language-plaintext highlighter-rouge">SumOfN(int)</code> constructor and understand the bytecode. Instead of going through the code first, let’s try and, figure out what might the bytecode look like by
understanding what needs to be done.</p>

<table style="width:100%">
  <tr>
    <th>What needs to be done</th>
    <th>How can it be done</th>
  </tr>
  <tr>
    <td rowspan="2">We should be able to invoke the constructor of <code class="language-plaintext highlighter-rouge">java.lang.Object</code></td>
    <td>load <code class="language-plaintext highlighter-rouge">this</code> reference on the stack, which is what <b>aload_0</b> does</td>
  </tr>
  <tr>
    <td>invoke <code class="language-plaintext highlighter-rouge">init</code> method of <code class="language-plaintext highlighter-rouge">java.lang.Object</code> which is what <b>invokespecial</b> does. It pops <code class="language-plaintext highlighter-rouge">this</code> reference from stack top</td>
  </tr>

  <tr>
    <td rowspan="3">We should be able to store the value of <code class="language-plaintext highlighter-rouge">n</code> in class field</td>
    <td>load <code class="language-plaintext highlighter-rouge">this</code> reference on the stack, which is what <b>aload_0</b> does</td>
  </tr>
  <tr>
    <td>load the value of <code class="language-plaintext highlighter-rouge">n</code> on the stack from LocalVariableTable, which is what <b>iload_1</b> does. <code class="language-plaintext highlighter-rouge">n</code> has slot 1 in LocalVariableTable</td>
  </tr>
  <tr>
    <td>put the value of <code class="language-plaintext highlighter-rouge">n</code> in class field, which is what <b>putfield</b> does. It pops the 2 entries from stack top, one is <code class="language-plaintext highlighter-rouge">this</code> and other is the value of <code class="language-plaintext highlighter-rouge">n</code> and sets the class field</td>
  </tr>
</table>

<p>All these opcodes make up our constructor. Let’s now jump to the <code class="language-plaintext highlighter-rouge">sum</code> method.</p>

<p><strong>bytecode (SumOfN) sum method</strong></p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">sum</span><span class="o">();</span>
    <span class="nl">Code:</span>
        <span class="mi">0</span><span class="o">:</span> <span class="n">iconst_0</span>
        <span class="mi">1</span><span class="o">:</span> <span class="n">istore_1</span>
        <span class="mi">2</span><span class="o">:</span> <span class="n">iconst_1</span>
        <span class="mi">3</span><span class="o">:</span> <span class="n">istore_2</span>
        <span class="mi">4</span><span class="o">:</span> <span class="n">iload_2</span>
        <span class="mi">5</span><span class="o">:</span> <span class="n">aload_0</span>
        <span class="mi">6</span><span class="o">:</span> <span class="n">getfield</span>      <span class="err">#</span><span class="mi">7</span>     <span class="c1">// Field n:I</span>
        <span class="mi">9</span><span class="o">:</span> <span class="n">if_icmpgt</span>     <span class="mi">22</span>
        <span class="mi">12</span><span class="o">:</span> <span class="n">iload_1</span>
        <span class="mi">13</span><span class="o">:</span> <span class="n">iload_2</span>
        <span class="mi">14</span><span class="o">:</span> <span class="n">iadd</span>
        <span class="mi">15</span><span class="o">:</span> <span class="n">istore_1</span>
        <span class="mi">16</span><span class="o">:</span> <span class="n">iinc</span>          <span class="mi">2</span><span class="o">,</span> <span class="mi">1</span>
        <span class="mi">19</span><span class="o">:</span> <span class="k">goto</span>          <span class="mi">4</span>
        <span class="mi">22</span><span class="o">:</span> <span class="n">iload_1</span>
        <span class="mi">23</span><span class="o">:</span> <span class="n">ireturn</span>

    <span class="nl">LocalVariableTable:</span>
    <span class="nc">Start</span>  <span class="nc">Length</span>  <span class="nc">Slot</span>  <span class="nc">Name</span>   <span class="nc">Signature</span>
        <span class="mi">4</span>      <span class="mi">18</span>     <span class="mi">2</span>  <span class="n">number</span>   <span class="no">I</span>
        <span class="mi">0</span>      <span class="mi">24</span>     <span class="mi">0</span>  <span class="k">this</span>     <span class="nc">Lorg</span><span class="o">/</span><span class="n">sample</span><span class="o">/</span><span class="nc">SumOfN</span><span class="o">;</span>
        <span class="mi">2</span>      <span class="mi">22</span>     <span class="mi">1</span>  <span class="n">sum</span>      <span class="no">I</span></code></pre></figure>

<table style="width:100%">
  <tr>
    <th width="30%">What needs to be done</th>
    <th width="30%">Code snippet</th>
    <th width="40%">How can it be done</th>
  </tr>
  <tr>
    <td>Initialize <code class="language-plaintext highlighter-rouge">sum</code> with a value 0</td>
    <td>int sum = 0</td>
    <td><b>iconst_0</b> and <b>istore_1</b> should be able to put 0 on the stack and assign it to local variable sum. <code class="language-plaintext highlighter-rouge">sum</code> variable has slot 1 in LocalVariableTable</td>
  </tr>
  <tr>
    <td>Initialize <code class="language-plaintext highlighter-rouge">number</code> with a value 1</td>
    <td>int number = 1</td>
    <td><b>iconst_1</b> and <b>istore_2</b> should be able to put 1 on the stack and assign it to local variable number. <code class="language-plaintext highlighter-rouge">number</code> variable has slot 2 in LocalVariableTable</td>
  </tr>
  <tr>
    <td>We should be able to compare the value of <code class="language-plaintext highlighter-rouge">number</code> and the value of the class field <code class="language-plaintext highlighter-rouge">n</code>. In order for this to happen, we need to load the 
   value of <code class="language-plaintext highlighter-rouge">number</code> and <code class="language-plaintext highlighter-rouge">this</code> reference on the stack. We need <code class="language-plaintext highlighter-rouge">this</code> reference to be able to get the value of instance variable <code class="language-plaintext highlighter-rouge">n</code></td>
    <td>number &lt;= this.n</td>
    <td><b>iload_2</b> and <b>aload_0</b> should be able to copy the value of <code class="language-plaintext highlighter-rouge">number</code> variable from slot 2 and <code class="language-plaintext highlighter-rouge">this</code> reference from slot 0 on the stack</td>
  </tr>
  <tr>
    <td>We should be able get the value of class field <code class="language-plaintext highlighter-rouge">n</code></td>
    <td>this.n</td>
    <td><b>getfield</b> should be able to help here. It pops the class instance to get the field value. The field value goes on the stack. Now, our stack contains value of number and n</td>
  </tr> 
  <tr>
    <td>Perform the required comparison. If the condition indicates exit from the loop, return the value present on the stack top</td>
    <td>number &lt;= this.n</td>
    <td><b>if_icmpgt</b> does the integer comparison. It pops the top 2 integer values from the stack and does the comparison (number &gt; n). If condition returns true, it takes an argument which is the instruction offset to jump to</td>
  </tr> 
  <tr>
    <td>If the condition indicates loop continuation, load the value of <code class="language-plaintext highlighter-rouge">sum</code> and <code class="language-plaintext highlighter-rouge">number</code> variable to be able to perform addition</td>
    <td>sum + number</td>
    <td><b>iload_1</b> and <b>iload_2</b> should do it. Now our stack has 2 values which are ready for addition</td>
  </tr> 
  <tr>
    <td>Perform addition</td>
    <td>sum + number</td>
    <td><b>iadd</b> does the integer addition. Pops the top 2 values from the stack and puts the result back in the stack</td>
  </tr>
  <tr>
    <td>Assign the result of addition to the variable <code class="language-plaintext highlighter-rouge">sum</code></td>
    <td>sum = sum + number</td>
    <td><b>istore_1</b> would do the job. It takes the value from stack top and assign the value in variable sum</td>
  </tr>
  <tr>
    <td>Increment the value of <code class="language-plaintext highlighter-rouge">number</code></td>
    <td>number = number + 1</td>
    <td><b>iinc</b> does integer increment and takes 2 parameters. First one is the LocalVariableTable slot and other one is the increment. It is one of the opcodes that does not work 
    with stack. It increments the value at a specific slot in LocalVariableTable</td>
  </tr>
  <tr>
    <td>Repeat steps</td>
    <td>NA</td>
    <td><b>goto</b> is the opcode which transfers the control to a specific instruction set</td>
  </tr>
</table>

<p>Following diagram represents the overall execution of <code class="language-plaintext highlighter-rouge">sum</code> method -</p>
<div class="wp-block-image is-style-default">
    <img style="padding-left: 0; max-width: 130%" src="/assets/img/pexels/combining-things-together.png" class="wp-image-878" />
</div>
<p></p>

<h3 id="summary">Summary</h3>
<p>Let’s conclude with some key takeaways -</p>

<ul>
  <li>javap provides a human-readable format of class file</li>
  <li>Each opcode in a bytecode is represented by 1 byte</li>
  <li>Each opcode is prefixed with a letter indicating the data type the opcode will work with</li>
  <li>Most of the opcodes work with the stack which means before they operate, values need to be brought on the stack</li>
  <li>Opcode like <strong>iinc</strong> works with LocalVariableTable instead of working with values on the stack</li>
  <li>Opcodes like <strong>invokevirtual</strong>, <strong>invokespecial</strong> refer to an entry in the constant pool to resolve the method that needs to be invoked</li>
  <li>Some opcodes also have shortcuts. eg; <strong>iconst_0</strong> pushes 0 on the stack without taking any argument. It could have been designed to take an argument 
but that would have meant the total instruction size will be greater than 1 byte (1 byte for the opcode and another byte for the argument). In order to avoid
increasing the size of the instruction, it is designed in a shortcut form</li>
</ul>

<p>Hope it was meaningful. Appreciate the feedback.</p>

<h3 id="references">References</h3>
<ul>
  <li><a href="https://www.jrebel.com/blog/java-bytecode-tutorial">Advanced Java Bytecode Tutorial</a></li>
  <li><a href="https://www.jrebel.com/blog/using-objects-and-calling-methods-in-java-bytecode">Java Bytecode: Using Objects and Calling Methods</a></li>
  <li><a href="https://www.youtube.com/watch?v=e2zmmkc5xI0">Java Bytecode Crash Course</a></li>
  <li><a href="https://www.amazon.in/Optimizing-Java-Techniques-Application-Performance/dp/9352137132">Optimizing Java - practical techniques for improving JVM application performance</a></li>
</ul>]]></content><author><name>Sarthak Makhija</name></author><category term="JVM" /><category term="Bytecode" /><category term="Java" /><category term="JVM" /><category term="Bytecode" /><summary type="html"><![CDATA[Java code is compiled into an intermediate representation called "bytecode". It is this bytecode which gets executed by JVM and is later converted into machine specific instructions by JIT compiler. With this article, we attempt to dive into bytecode and understand the internals of various bytecode operations.]]></summary></entry><entry><title type="html">AWS Lambda - A Virtual Podcast</title><link href="https://tech-lessons.in/aws-lambda-a-virtual-podcast/" rel="alternate" type="text/html" title="AWS Lambda - A Virtual Podcast" /><published>2020-04-19T00:00:00+05:30</published><updated>2020-04-19T00:00:00+05:30</updated><id>https://tech-lessons.in/aws-lambda-a-virtual-podcast</id><content type="html" xml:base="https://tech-lessons.in/aws-lambda-a-virtual-podcast/"><![CDATA[<blockquote class="wp-block-quote">
    <p>AWS Lambda is a serverless compute service and after having worked with it for sometime, I felt it is a good time for me to share my learning and experiences. I have been thinking of writing an article in a "Virtual Podcast format" and felt this could be the one.</p>
</blockquote>

<p>Welcome all to this article named <i>AWS Lambda - A Virtual Podcast</i> and let me introduce our guests Mr. Hernandez and Ms. Jessica who would walk us through their experiences of using AWS Lambda.</p>

<p>Welcome, Hernandez and Jessica and thank you for participating in this <i>Virtual Podcast</i>. Let’s get started.</p>

<h3 id="what-is-aws-lambda">What is AWS Lambda</h3>

<p><span class="me">Me&gt;</span> My first question to you Jessica is “What is AWS Lambda?”</p>

<p><span class="jessica">Jessica&gt;</span> AWS Lambda is a <b>serverless compute service</b> which allows you to execute a function in response to various events without provisioning or managing servers. What this means is your function will execute ONLY when there is a request for it.</p>

<p><span class="me">Me&gt;</span> So what I gather is, a function is an entry point which gets invoked by AWS Lambda service. Is that right?</p>

<p><span class="jessica">Jessica&gt;</span> That’s nearly right. When you create a lambda function, you need to specify a handler which is nothing but the <b>filename.exported function name</b> that acts as an entry point for your application.</p>

<p>Let’s say, you have a file named “handler.js” and it exports a function named “processOrders”, your handler becomes <b>handler.processOrders</b> which will be invoked by AWS Lambda in response to events.</p>

<p><span class="me">Me&gt;</span> Thank you Jessica.</p>

<blockquote class="wp-block-quote">
    <p>AWS Lambda is a serverless compute service which allows you to execute a function in response to various events without provisioning or managing servers. When you create a lambda function, you need to specify a handler which acts as an entry point for your lambda function.</p>
</blockquote>

<p style="text-align:center"><strong>. . . </strong></p>

<h3 id="how-does-a-lambda-function-execute">How does a lambda function execute?</h3>
<p><span class="me">Me&gt;</span> Jessica, you mentioned that a lambda function runs in response to an event, but where does it run?</p>

<p><span class="jessica">Jessica&gt;</span> When you create a lambda function, you need to specify a <b>runtime</b> say, <i>node12.x</i>, <i>python3.7</i> or anything else. When there is a request for your lambda function, AWS will provision a container with the selected runtime and then run your function.</p>

<p><span class="me">Me&gt;</span> So it is actually a container within which a lambda function is run. Does that also mean your lambda function gets some storage on file system?</p>

<p><span class="jessica">Jessica&gt;</span> Yes, your lambda function gets around <b>500MB</b> of storage in <b>/tmp</b> directory but that is ephemeral. It goes away as the container goes away.</p>

<blockquote class="wp-block-quote">
    <p>AWS will provision a container to run your function when there is a request for your lambda function. This container will be discarded after some inactive time.</p>
</blockquote>

<p style="text-align:center"><strong>. . . </strong></p>

<h3 id="what-is-aws-lambda-cold-start">What is AWS Lambda Cold Start</h3>

<p><span class="me">Me&gt;</span> Hernandez, since a lambda function is not always running, does it increase the response time of a request?</p>

<p><span class="hernandez">Hernandez&gt;</span> Like Jessica mentioned, a lambda function will run inside a container which will stay active till the time your function is running. This container will be discarded by AWS after some inactive time thus making your function inactive and this is called as cold state.</p>

<p>Whenever there is a request for a cold function, AWS needs to provision a container for running your function and this is called as <b>Cold Start.</b> So, to answer your question, yes, cold start can add to the response time of a request.</p>

<p><span class="me">Me&gt;</span> Is there a way to avoid cold start?</p>

<p><span class="hernandez">Hernandez&gt;</span> Yes. AWS has now introduced <b>Provisioned Concurrency</b> which is designed to keep your functions <b>initialized</b> and ready to respond in double-digit milliseconds at the scale you need. <a href="https://aws.amazon.com/blogs/aws/new-provisioned-concurrency-for-lambda-functions/">Provisioned concurrency</a> adds pricing dimension though.</p>

<p>You can turn it ON/OFF from AWS console or CloudFormation template.</p>

<p>If you are using <b>serverless framework</b> you should checkout this <a href="https://serverless.com/blog/keep-your-lambdas-warm/">blog</a> for keeping your functions warm.</p>

<p><span class="me">Me&gt;</span> Thank you Hernandez.</p>

<blockquote class="wp-block-quote">
    <p>AWS needs to provision a container for running your cold function and this is called as Cold Start. You should check Provisioned Concurrency (or even Serverless plugin WarmUP) for keeping your functions initialized.</p>
</blockquote>

<p style="text-align:center"><strong>. . . </strong></p>

<h3 id="aws-lambda-configuration">AWS Lambda Configuration</h3>

<p><span class="me">Me&gt;</span> Jessica, what are the different configuration options one can specify while creating a lambda function?</p>

<p><span class="jessica">Jessica&gt;</span> You can specify a lot of options including -</p>
<ul>
  <li>IAM role</li>
  <li>Memory, which ranges from <i>128MB to 3GB</i></li>
  <li>Timeout, which ranges from <i>1sec to 15mins</i></li>
  <li>Environment variables, which can be upto <i>4KB</i> in size</li>
  <li>VPC configuration for executing your function inside a VPC</li>
  <li>Concurrency</li>
</ul>

<p><span class="me">Me&gt;</span> Wow, these are too many. Jessica you mentioned memory, but no mention of CPU?</p>

<p><span class="jessica">Jessica&gt;</span> Yes, you can not control the amount of CPU that gets allocated to your lambda function, it is actually proportional to the amount of memory allocated.</p>

<p><span class="me">Me&gt;</span> I see. Jessica, what do you mean by <b>Concurrency</b> of a lambda function?</p>

<p><span class="jessica">Jessica&gt;</span> I like the example given in <a href="https://aws.amazon.com/blogs/compute/managing-aws-lambda-function-concurrency/">Managing AWS Lambda Function Concurrency</a>. Imagine each slice of a pizza is an execution unit of a lambda function and the entire pizza represents the <i>shared concurrency pool</i> for all lambda functions in an AWS account.</p>

<p>Let’s say, we set concurrency limit of 100 for a lambda function, all we are saying is the lambda function will have a total of 100 pizza slices which means you can have 100 concurrent executions of lambda function. Concurrency limit set for a lambda function is reduced from concurrency pool, which is 1000 for all lambda functions per AWS account - the entire pizza.</p>

<p><span class="me">Me&gt;</span> Jessica, I also see an option of <b>Unreserved Concurrency</b> in lambda configuration. What is that?</p>

<p><span class="jessica">Jessica&gt;</span> AWS also reserves 100 units of concurrency for all functions that don’t have a specified concurrency limit set. This helps to make sure that future functions have capacity to be consumed.</p>

<p><span class="me">Me&gt;</span> Thank you Jessica. I am starting to wonder what happens when a lambda function’s concurrency limit is reached and there are more requests?</p>

<p><span class="jessica">Jessica&gt;</span> Lambda function gets <b>throttled</b>.</p>

<p><span class="me">Me&gt;</span> Does that mean a client of your lambda function say API Gateway will get an error?</p>

<p><span class="jessica">Jessica&gt;</span> It actually depends on the type of request. If it a <b>synchronous</b> request, it will end with a <b>timeout error</b>.</p>

<p>Whereas in case of <b>asynchronous</b> request, say from SQS, AWS Lambda will <b>retry</b> your lambda function before sending the request event to a Dead Letter Queue, assuming one is configured.</p>

<blockquote class="wp-block-quote">
    <p>Various configuration options can be specified while creating a lambda function including IAM role, memory, timeout, VPC concurrency etc.</p>
</blockquote>

<p style="text-align:center"><strong>. . . </strong></p>

<h3 id="aws-lambda-debugging">AWS Lambda Debugging</h3>

<p><span class="me">Me&gt;</span> Hernandez, what AWS services can help us with debugging an issue with a lambda function?</p>

<p><span class="hernandez">Hernandez&gt;</span> AWS Lambda function logs are sent to <b>CloudWatch</b> and lambda function needs an IAM role in order to that. Other than CloudWatch, you can also use <b>AWS X-Ray</b> for tracing and debugging performance issues.</p>

<p><span class="me">Me&gt;</span> Nice. How to set up AWS X-Ray with lambda function? Do you need to set up an X-Ray agent or something like that?</p>

<p><span class="hernandez">Hernandez&gt;</span> No, with lambda function, you need to do a very few things in order to set up tracing -</p>

<ul>
  <li>Set up an <b>IAM role</b> in order to send traces to AWS X-Ray</li>
  <li>Enable <b>ActiveTracing</b> either in AWS console or CloudFormation</li>
  <li>Use <b>AWS X-Ray SDK</b> in your lambda function code</li>
</ul>

<p>Rest everything is taken care by AWS Lambda.</p>

<p><span class="me">Me&gt;</span> Ok. Once this is done, AWS will be able to build a service map signifying which services were invoked by lambda function and indicate the problems, if any. Is that right?</p>

<p><span class="hernandez">Hernandez&gt;</span> Yes, that is right.</p>

<blockquote class="wp-block-quote">
    <p>AWS Lambda function logs are sent to CloudWatch and lambda function needs an IAM role in order to that. Other than CloudWatch, you can also use AWS X-Ray for tracing and debugging performance issues.</p>
</blockquote>

<p style="text-align:center"><strong>. . . </strong></p>

<h3 id="restrictions-with-aws-lambda">Restrictions with AWS Lambda</h3>

<p><span class="me">Me&gt;</span> Jessica, any restrictions around AWS Lambda that we should be aware of?</p>

<p><span class="jessica">Jessica&gt;</span> I think there are a few restrictions -</p>

<ul>
  <li>Maximum unzipped code size for lambda function can be <i>250MB</i></li>
  <li>Environment variables can be a maximum of <i>4KB</i> in size</li>
  <li>Maximum timeout of a lambda function can be <i>15mins</i></li>
  <li>Maximum amount of memory that can be allocated to a lambda function can be <i>3GB</i></li>
  <li>A lambda function can have a total of <i>5 lambda layers</i></li>
  <li>Not all runtime or programming languages are supported by AWS Lambda</li>
</ul>

<p>With that said, I feel you might not hit all these limitations. To elaborate, if your unzipped code size is going beyond 250MB, I think it is good to understand why is a lambda function getting too huge. Have we packed too many dependencies or have 
we mixed too many responsibilities in a lambda function or is it something else.</p>

<p><span class="me">Me&gt;</span> Jessica, what is lambda layer?</p>

<p><span class="jessica">Jessica&gt;</span> A layer is a ZIP archive that contains libraries, a custom runtime, or other dependencies needed by your application. With layers, you can use libraries in your function without needing to include them in your deployment package. Layers let you keep your deployment package small.</p>

<p><span class="me">Me&gt;</span> Ok, then 5 lambda layers in an application looks like a sensible default.</p>

<p><span class="jessica">Jessica&gt;</span> True. I think these <b>constraints are very sensible</b> and if we are hitting some of them, it is worth looking back and seeing if there is a problem somewhere else.</p>

<blockquote class="wp-block-quote">
    <p>AWS Lambda has some restrictions and our panel feels these are sensible restrictions. It is good to know them.</p>
</blockquote>

<p style="text-align:center"><strong>. . . </strong></p>

<h3 id="unit-and-integration-testing-with-aws-lambda">Unit and Integration Testing with AWS Lambda</h3>

<p><span class="me">Me&gt;</span> Coming to my favorite topic. How has your experience been with testing of AWS Lambda function?</p>

<p><span class="jessica">Jessica&gt;</span> Well, <b>unit testing</b> is not difficult. If you are coding your lambda function in typescript, you can very well use <a href="https://sinonjs.org/">sinon</a> to mock all the dependencies and just validate that a single unit is working fine.</p>

<p><span class="hernandez">Hernandez&gt;</span> True. I think challenge comes when you want to assert that the integration of your lambda function with external systems say DynamoDB or S3 works properly. In order to test this, we have used <b>LocalStack</b> in our project.</p>

<p><span class="me">Me&gt;</span> LocalStack? Do you want to talk a bit about this?</p>

<p><span class="hernandez">Hernandez&gt;</span> Sure. <a href="https://github.com/localstack/localstack">LocalStack</a> provides an easy-to-use test/mocking framework for developing Cloud applications. At this stage, their focus is primarily on supporting the AWS cloud stack.</p>

<p>LocalStack spins up various Cloud APIs on local machine including S3, lambda, DynamoDB and API Gateway. All you need to do is, <b>spin up LocalStack docker container</b>, <b>deploy your infra say Dynamo table or lambda function</b> within LocalStack and <b>connect to these services</b> running on local machine from within your code.</p>

<p><span class="me">Me&gt;</span> Interesting. Does LocalStack support all AWS services?</p>

<p><span class="hernandez">Hernandez&gt;</span> No, it supports quite a few but definitely not all.</p>

<blockquote class="wp-block-quote">
    <p>I am sure Unit testing with AWS Lambda function code is understood by all of us but what is good to know is <i>LocalStack</i> can be used for integration testing.</p>
</blockquote>

<p style="text-align:center"><strong>. . . </strong></p>

<h3 id="packaging-and-deploying-an-aws-lambda-application">Packaging and deploying an AWS Lambda application</h3>

<p><span class="me">Me&gt;</span> Jessica, you talked about unzipped code. Does that mean you have to create a zip file and upload it somewhere?</p>

<p><span class="jessica">Jessica&gt;</span> Well, you have package your lambda function along with its dependencies as an archive, upload it either on AWS Lambda console or in an S3 bucket which will be referenced from your CloudFormation template.</p>

<p><span class="me">Me&gt;</span> How do you folks package your application? It appears to me as if we need to create a “fat jar” kind of a thing.</p>

<p><span class="hernandez">Hernandez&gt;</span> We use <a href="https://www.typescriptlang.org/">typescript</a> for coding our lambda application and <a href="https://webpack.js.org/">webpack</a> for packaging it. It does not create a zip file, just an <b>out directory</b> containing the transpiled code (js) and a handler.js file with all the required code from different node_modules plus its source map.</p>

<p><span class="me">Me&gt;</span> How do you deploy your code then because you just seemed to create an output directory with a few javascript files.</p>

<p><span class="hernandez">Hernandez&gt;</span> We use <a href="https://docs.aws.amazon.com/cdk/latest/guide/home.html">CDK</a> for deploying our code which allows you to code your infra.</p>

<p><span class="me">Me&gt;</span> Wow, the list of tools doesn’t seem to come to an end.</p>

<p><span class="hernandez">Hernandez&gt;</span> It’s simple. Just look at it this way, we have just created a directory which is ready to be deployed and moment you say <b>cdk bootstrap</b>, it will copy the contents of this out directory into another directory which will be archived and uploaded to an S3 bucket.</p>

<p>And when you say <b>cdk deploy</b>, you will see all the required AWS components getting deployed. Simple.</p>

<p><span class="me">Me&gt;</span>Simple? You said <i>contents of this out directory will be copied into another directory</i>. Does that mean CDK already knows about the out directory?</p>

<p><span class="hernandez">Hernandez&gt;</span> That’s true. When you code your infra, you will specify where is your compiled (or transpiled) or ready to be shipped code located and that’s how CDK knows about this directory.</p>

<p><span class="me">Me&gt;</span> Great, now I able to connect dots. Build your code -&gt; get a shippable directory -&gt; archive it -&gt; upload it to an S3 bucket -&gt; deploy it and CDK is one way to get all these steps done. Is that right?</p>

<p><span class="hernandez">Hernandez&gt;</span> Absolutely.</p>

<blockquote class="wp-block-quote">
    <p>In order to deploy your your lambda function, it needs to be packaged along with its dependencies as an archive. You could use webpack if you are using typescript as a programming language. You can use CDK, CloudFormation or SAM for packaging and deploying your lambda function.</p>
</blockquote>

<p style="text-align:center"><strong>. . . </strong></p>

<h3 id="applications-built-using-aws-lambda">Applications built using AWS Lambda</h3>

<p><span class="me">Me&gt;</span> Jessica, Hernandez, what are the different types of applications that you folks have built using AWS Lambda?</p>

<p><span class="jessica">Jessica&gt;</span> We have actually built <b>serverless microservices</b> using AWS Lambda and we also process <b>web clicks</b> on our application which is a stream of events flowing from user interface to <i>AWS Pinpoint</i> to <i>AWS Kinesis</i> to <i>AWS Lambda</i>.</p>

<p><span class="hernandez">Hernandez&gt;</span> We use AWS Lambda for <b>scaling down images</b> that are uploaded to our S3 buckets and for processing <b>DynamoDB streams</b> which is a stream of changes in DynamoDB table.</p>

<p><span class="me">Me&gt;</span> Thanks Jessica and Hernandez.</p>

<blockquote class="wp-block-quote">
    <p>Our panel highlighted different types of applications they have built using AWS Lambda including microservices, event processing (images on S3 buckets) and stream processing (web clicks and handling changes in DynamoDB).</p>
</blockquote>

<p style="text-align:center"><strong>. . . </strong></p>

<p><i>With this we come to an end of our “Virtual Podcast” and a big Thank you to Jessica and Hernandez for being a part of this.</i> This was wonderful, and hope our readers (yes, it is still virtual) find it the same way. Thank you again.</p>

<h3 id="references">References</h3>
<ul>
  <li><a href="https://aws.amazon.com/blogs/compute/managing-aws-lambda-function-concurrency/">Managing AWS Lambda Function Concurrency</a></li>
  <li><a href="https://serverless.com/blog/keep-your-lambdas-warm/">Keeping Functions Warm - How To Fix AWS Lambda Cold Start Issues</a></li>
  <li><a href="https://aws.amazon.com/blogs/aws/new-provisioned-concurrency-for-lambda-functions/">Provisioned concurrency</a></li>
  <li><a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">Lambda Layer</a></li>
</ul>]]></content><author><name>Sarthak Makhija</name></author><category term="Serverless" /><category term="AWS Lambda" /><category term="Serverless" /><summary type="html"><![CDATA[AWS Lambda is a serverless compute service and after having worked with it for sometime, I felt it is a good time for me to share my learning and experiences. I have been thinking of writing an article in a "Virtual Podcast format" and felt this could be the one.]]></summary></entry><entry><title type="html">Concluding Serverless Journey</title><link href="https://tech-lessons.in/concluding-serverless-journey/" rel="alternate" type="text/html" title="Concluding Serverless Journey" /><published>2020-03-18T00:00:00+05:30</published><updated>2020-03-18T00:00:00+05:30</updated><id>https://tech-lessons.in/concluding-serverless-journey</id><content type="html" xml:base="https://tech-lessons.in/concluding-serverless-journey/"><![CDATA[<p><!-- wp:paragraph --></p>
<p>We have come a long way in our <a href="/beginning-serverless-journey">Serverless journey</a>.
    This journey which started with building a serverless application has finally come to a stage where we can see all
    our hard work in action. Yes, we will be deploying our application.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>We will be using <a href="https://docs.aws.amazon.com/cdk/latest/guide/home.html">AWS CDK</a> to deploy our
    application. Before we start using CDK, let's quickly look at what is CDK -</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:group --></p>
<div class="wp-block-group">
    <div class="wp-block-group__inner-container"><!-- wp:quote {"align":"left"} --></p>
        <blockquote class="wp-block-quote has-text-align-left"><p>The AWS Cloud Development Kit (AWS CDK) is an open
            source software development framework to model and <strong>provision your cloud application resources using
                familiar programming languages.</strong></p>
            <p>Provisioning cloud applications can be a challenging process that requires you to perform manual actions,
                write custom scripts, maintain templates, or learn domain-specific languages. </p>
            <p>AWS CDK uses the familiarity and <strong>expressive power of programming languages for modeling your
                applications</strong>. It provides you with high-level components that preconfigure cloud resources with
                proven defaults, so you can build cloud applications without needing to be an expert. </p>
            <p><strong>AWS CDK provisions your resources in a safe, repeatable manner through AWS
                CloudFormation</strong>. It also enables you to <strong>compose and share your own custom
                components</strong> that incorporate your organization's requirements, helping you start new projects
                faster. <br/><a href="https://aws.amazon.com/cdk/">https://aws.amazon.com/cdk/</a></p>
        </blockquote>
        <p><!-- /wp:quote --></div>
</div>
<p><!-- /wp:group --></p>
<p><!-- wp:paragraph --></p>
<p>In summary, we don't have to directly deal with CloudFormation or SAM for deploying our application. We will
    provision our cloud resources using a higher level framework called CDK which will ultimately translate into a
    CloudFormation template. </p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>We should be able to see the advantages of using CDK very soon but let's look at this conversation to get some
    understanding of CDK.</p>
<p><!-- /wp:paragraph --></p>
<p>
<figure class="wp-block-embed-youtube wp-block-embed is-type-video is-provider-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio">
    <div class="wp-block-embed__wrapper">
        <iframe width="800" height="400" src="https://www.youtube.com/embed/W8sibGJnHEM" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
    </div>
</figure>
<p>Let's begin now.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading {"level":4} --></p>
<h4>Step 1: Setting up the project</h4>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>We will be using the same project which was pushed <a
        href="https://github.com/aws-articles/serverless-order-service">here</a>. </p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:list --></p>
<ul>
    <li>Install CDK globally by executing <code>npm install aws-cdk -g</code></li>
    <li>Create a directory named <code>infra</code> inside our project serverless-order-service</li>
    <li>Execute <code>cdk init app --language=typescript</code> inside <code>infra</code> directory</li>
</ul>
<p><!-- /wp:list --></p>
<p><!-- wp:paragraph --></p>
<p>This should generate a project which uses <code>typescript</code> as the programming language and <code>jest</code>
    as a testing framework. Let's update the generated <code>jest.config.js</code>.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Below is how our jest.config.js will look like -</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:code --></p>
<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript"><span class="kr">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
    <span class="dl">"</span><span class="s2">testMatch</span><span class="dl">"</span><span class="p">:</span> <span class="p">[</span>
        <span class="dl">"</span><span class="s2">**/__tests__/**/*.+(ts|tsx|js)</span><span class="dl">"</span><span class="p">,</span>
        <span class="dl">"</span><span class="s2">**/?(*.)+(spec|test).+(ts|tsx|js)</span><span class="dl">"</span>
    <span class="p">],</span>
    <span class="dl">"</span><span class="s2">transform</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
        <span class="dl">"</span><span class="s2">^.+</span><span class="se">\\</span><span class="s2">.(ts|tsx)$</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">ts-jest</span><span class="dl">"</span>
    <span class="p">},</span>
<span class="p">};</span></code></pre></figure>
<p><!-- /wp:code --></p>
<p>
<div class="wp-block-image is-style-default">
    <img style="padding-left: 0" src="/assets/img/pexels/project-setup-cdk.png"
         width="400" height="400" class="wp-image-878"/>
</div>
<p>If all has gone well so far this how our project structure will look like -</p>
<ul>
    <li><em>infra-stack.ts</em> defines a class called <em>InfraStack</em> which is going to be a logical collection of
        various constructs like lambda function(s), dynamodb etc
    </li>
    <li><em>infra.ts</em> is the entry point of the application which creates an instance of InfraStack</li>
    <li><em>infra.test.ts</em> contains a simple test to assert an empty stack</li>
    <li><em>package.json</em> contains the project definition along with various dependencies including <em>@aws-cdk/assert</em>
        which is a library for asserting various cloud resources
    </li>
    <li><em>jest.config.js </em>contains the necessary configuration to run jest tests</li>
    <li><em>cdk.json </em>contains the command to run cdk application</li>
</ul>
<p><!-- /wp:list --></p>
<p><!-- wp:paragraph --></p>
<p>Let's make a few quick changes to the file names to match our convention, run the test and commit the changes -</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:list --></p>
<ul>
    <li>Rename infra.ts to OrderServiceInfra.ts</li>
    <li>Rename infra-stack.ts to OrderServiceInfraStack.ts</li>
    <li>Rename infra.test.ts to OrderServiceInfraStack.spec.ts</li>
</ul>
<p><!-- /wp:list --></p>
<p><!-- wp:heading {"level":4} --></p>
<h4>Step 2: Creating stack with lambda function</h4>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>Let's provision our lambda function. In order to do so we need to add a dependency <code>@aws-cdk/aws-lambda</code>.
    So, let's add it by executing <code>npm install @aws-cdk/aws-lambda@1.19.0</code>.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>We will start by creating a lambda function construct inside OrderServiceInfraStack.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:code --></p>
<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript"><span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">cdk</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@aws-cdk/core</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nb">Function</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@aws-cdk/aws-lambda</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">class</span> <span class="nx">OrderServiceInfraStack</span> <span class="kd">extends</span> <span class="nx">cdk</span><span class="p">.</span><span class="nx">Stack</span> <span class="p">{</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">scope</span><span class="p">:</span> <span class="nx">cdk</span><span class="p">.</span><span class="nx">Construct</span><span class="p">,</span> <span class="nx">id</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">props</span><span class="p">?:</span> <span class="nx">cdk</span><span class="p">.</span><span class="nx">StackProps</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">props</span><span class="p">);</span>

        <span class="c1">//create a lambda function in the stack</span>
        <span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="dl">"</span><span class="s2">order-service-function</span><span class="dl">"</span><span class="p">,</span> <span class="kc">null</span><span class="p">);</span> <span class="c1">//compilation error</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>
<p><!-- /wp:code --></p>
<p><!-- wp:paragraph --></p>
<p>Few quick observations - </p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:list --></p>
<ul>
    <li>We have imported Function class from @aws-cdk/aws-lambda</li>
    <li>Constructor of Function class takes 3 parameters -
        <ul>
            <li>scope: Construct - which identifies the parent resource</li>
            <li>id: string - unique identifier of the resource within the stack</li>
            <li>props: FunctionProps - lambda function properties including name, runtime, handler etc</li>
        </ul>
    </li>
    <li>Typescript compiler gives an error because null is not acceptable in place of FunctionProps</li>
</ul>
<p><!-- /wp:list --></p>
<p><!-- wp:paragraph --></p>
<p>Let's pass the required function properties - </p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:code --></p>
<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript"><span class="k">import</span> <span class="p">{</span><span class="nx">Code</span><span class="p">,</span> <span class="nb">Function</span><span class="p">,</span> <span class="nx">FunctionProps</span><span class="p">,</span> <span class="nx">Runtime</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@aws-cdk/aws-lambda</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">Construct</span><span class="p">,</span> <span class="nx">Stack</span><span class="p">,</span> <span class="nx">StackProps</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@aws-cdk/core</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">class</span> <span class="nx">OrderServiceInfraStack</span> <span class="kd">extends</span> <span class="nx">Stack</span> <span class="p">{</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">scope</span><span class="p">:</span> <span class="nx">Construct</span><span class="p">,</span> <span class="nx">id</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">props</span><span class="p">?:</span> <span class="nx">StackProps</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">props</span><span class="p">);</span>

        <span class="c1">//create FunctionProps</span>
        <span class="kd">const</span> <span class="nx">functionProperties</span><span class="p">:</span> <span class="nx">FunctionProps</span> <span class="o">=</span> <span class="p">{</span>
            <span class="na">code</span><span class="p">:</span> <span class="nx">Code</span><span class="p">.</span><span class="nx">fromAsset</span><span class="p">(</span><span class="dl">"</span><span class="s2">../dist</span><span class="dl">"</span><span class="p">),</span>
            <span class="na">handler</span><span class="p">:</span> <span class="dl">"</span><span class="s2">handler.ordersHandler</span><span class="dl">"</span><span class="p">,</span>
            <span class="na">runtime</span><span class="p">:</span> <span class="nx">Runtime</span><span class="p">.</span><span class="nx">NODEJS_10_X</span><span class="p">,</span>
            <span class="na">functionName</span><span class="p">:</span> <span class="dl">"</span><span class="s2">order-service-function</span><span class="dl">"</span><span class="p">,</span>
            <span class="na">environment</span><span class="p">:</span> <span class="p">{</span><span class="dl">"</span><span class="s2">ExecutionEnvironment</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">dev</span><span class="dl">"</span><span class="p">}</span>
        <span class="p">};</span>
        <span class="c1">//create a lambda function in the stack</span>
        <span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="dl">"</span><span class="s2">order-service-function</span><span class="dl">"</span><span class="p">,</span> <span class="nx">functionProperties</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>
<p><!-- /wp:code --></p>
<p><!-- wp:paragraph --></p>
<p>Here, <em>code, handler and runtime</em> are the only mandatory properties. Passing them should make the compiler
    happy. </p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>With this change in OrderServiceInfraStack, our test will break because it asserts for empty resources inside the
    stack but now stack contains a lambda function. We will fix the test in a moment.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Quick observation - </p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:list --></p>
<ul>
    <li>We are passing <code>ExecutionEnvironment</code> as lambda environment variable. This variable is used to
        determine if the lambda is running is running in test mode or production mode. This value can also be taken as
        deployment parameter, but for now we are passing it as dev
    </li>
    <li>We have used <code>../dist </code>inside code asset which contains our transpiled code</li>
</ul>
<p><!-- /wp:list --></p>
<p><!-- wp:heading {"level":4} --></p>
<h4>Step 3: Fixing the test</h4>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>CDK allows us to write different forms of tests including snapshot tests and fine grained unit tests. We will be
    writing both the tests - snapshot test(s) for our entire stack and unit tests for resources like lambda function,
    dynamodb, api gateway etc.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>We will be starting with unit tests which will assert on a resource and its properties.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:code --></p>
<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript"><span class="k">import</span> <span class="p">{</span><span class="nx">OrderServiceInfraStack</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../lib/OrderServiceInfraStack</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">App</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@aws-cdk/core</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">Runtime</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@aws-cdk/aws-lambda</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="dl">"</span><span class="s2">@aws-cdk/assert/jest</span><span class="dl">"</span><span class="p">;</span>

<span class="nx">test</span><span class="p">(</span><span class="dl">"</span><span class="s2">stack should contain a lambda function with node10 as the runtime</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">App</span><span class="p">();</span>
    <span class="kd">const</span> <span class="nx">stack</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">OrderServiceInfraStack</span><span class="p">(</span><span class="nx">app</span><span class="p">,</span> <span class="dl">"</span><span class="s2">OrderServiceStack</span><span class="dl">"</span><span class="p">);</span> <span class="c1">//instantiate stack</span>

    <span class="c1">//assert that stack contains a lambda function with node10 as the runtime</span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">stack</span><span class="p">).</span><span class="nx">toHaveResource</span><span class="p">(</span><span class="dl">"</span><span class="s2">AWS::Lambda::Function</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span>
        <span class="na">Runtime</span><span class="p">:</span> <span class="nx">Runtime</span><span class="p">.</span><span class="nx">NODEJS_10_X</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span>
    <span class="p">})</span>
<span class="p">});</span></code></pre></figure>
<p><!-- /wp:code --></p>
<p><!-- wp:paragraph --></p>
<p>Few quick observations - </p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:list --></p>
<ul>
    <li>We have imported <code>aws-cdk/assert/jest</code> which provides us with <code>expect</code> function that
        allows us to match resources in the stack
    </li>
    <li>Our unit test asserts only on lambda's runtime property</li>
</ul>
<p><!-- /wp:list --></p>
<p><!-- wp:paragraph --></p>
<p>That's it. Our lambda function resource is created in the stack and we have been able to write a unit test. Let's
    commit the changes.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading {"level":4} --></p>
<h4>Step 4: Adding DynamoDB to stack</h4>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>Let's provision dynamodb. In order to do so we need to add a dependency <code>@aws-cdk/aws-dynamodb</code>. So, let's
    add it by executing <code>npm install @aws-cdk/aws-dynamodb@1.19.0</code>.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:code --></p>
<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript"><span class="k">import</span> <span class="p">{</span><span class="nx">Code</span><span class="p">,</span> <span class="nb">Function</span><span class="p">,</span> <span class="nx">FunctionProps</span><span class="p">,</span> <span class="nx">Runtime</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@aws-cdk/aws-lambda</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">Construct</span><span class="p">,</span> <span class="nx">Stack</span><span class="p">,</span> <span class="nx">StackProps</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@aws-cdk/core</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">AttributeType</span><span class="p">,</span> <span class="nx">Table</span><span class="p">,</span> <span class="nx">TableProps</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@aws-cdk/aws-dynamodb</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">class</span> <span class="nx">OrderServiceInfraStack</span> <span class="kd">extends</span> <span class="nx">Stack</span> <span class="p">{</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">scope</span><span class="p">:</span> <span class="nx">Construct</span><span class="p">,</span> <span class="nx">id</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">props</span><span class="p">?:</span> <span class="nx">StackProps</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">props</span><span class="p">);</span>

        <span class="kd">const</span> <span class="nx">functionProperties</span><span class="p">:</span> <span class="nx">FunctionProps</span> <span class="o">=</span> <span class="p">{</span>
            <span class="na">code</span><span class="p">:</span> <span class="nx">Code</span><span class="p">.</span><span class="nx">fromAsset</span><span class="p">(</span><span class="dl">"</span><span class="s2">../dist</span><span class="dl">"</span><span class="p">),</span>
            <span class="na">handler</span><span class="p">:</span> <span class="dl">"</span><span class="s2">handler.ordersHandler</span><span class="dl">"</span><span class="p">,</span>
            <span class="na">runtime</span><span class="p">:</span> <span class="nx">Runtime</span><span class="p">.</span><span class="nx">NODEJS_10_X</span><span class="p">,</span>
            <span class="na">functionName</span><span class="p">:</span> <span class="dl">"</span><span class="s2">order-service-function</span><span class="dl">"</span><span class="p">,</span>
            <span class="na">environment</span><span class="p">:</span> <span class="p">{</span><span class="dl">"</span><span class="s2">ExecutionEnvironment</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">dev</span><span class="dl">"</span><span class="p">}</span>
        <span class="p">};</span>
        <span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="dl">"</span><span class="s2">order-service-function</span><span class="dl">"</span><span class="p">,</span> <span class="nx">functionProperties</span><span class="p">);</span>

        <span class="c1">//create TableProps</span>
        <span class="kd">const</span> <span class="nx">tableProps</span><span class="p">:</span> <span class="nx">TableProps</span> <span class="o">=</span> <span class="p">{</span>
            <span class="na">partitionKey</span><span class="p">:</span> <span class="p">{</span>
                <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">orderId</span><span class="dl">"</span><span class="p">,</span>
                <span class="na">type</span><span class="p">:</span> <span class="nx">AttributeType</span><span class="p">.</span><span class="nx">STRING</span>
            <span class="p">},</span>
            <span class="na">tableName</span><span class="p">:</span> <span class="dl">"</span><span class="s2">orders</span><span class="dl">"</span>
        <span class="p">};</span>
        <span class="c1">//create a dynamo table in the stack</span>
        <span class="k">new</span> <span class="nx">Table</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="dl">"</span><span class="s2">order-table</span><span class="dl">"</span><span class="p">,</span> <span class="nx">tableProps</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>
<p><!-- /wp:code --></p>
<p><!-- wp:paragraph --></p>
<p>Few quick observations - </p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:list --></p>
<ul>
    <li>We have imported Table class from @aws-cdk/aws-dynamodb</li>
    <li>Constructor of Table class takes 3 parameters -
        <ul>
            <li>scope: Construct - which identifies the parent resource</li>
            <li>id: string - unique identifier of the resource within the stack</li>
            <li>props: TableProps - table properties including name of the table, partitionKey etc</li>
        </ul>
    </li>
</ul>
<p><!-- /wp:list --></p>
<p><!-- wp:paragraph --></p>
<p>That's it. Our dynamo table resource is created in the stack. Let's verify by writing a unit test.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:code --></p>
<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript"><span class="nx">test</span><span class="p">(</span><span class="dl">"</span><span class="s2">stack should contain a dynamodb table with table name</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">App</span><span class="p">();</span>
    <span class="kd">const</span> <span class="nx">stack</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">OrderServiceInfraStack</span><span class="p">(</span><span class="nx">app</span><span class="p">,</span> <span class="dl">"</span><span class="s2">OrderServiceStack</span><span class="dl">"</span><span class="p">);</span>

    <span class="c1">//assert that stack contains a dynamo table with "orders" as the table name</span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">stack</span><span class="p">).</span><span class="nx">toHaveResource</span><span class="p">(</span><span class="dl">"</span><span class="s2">AWS::DynamoDB::Table</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span>
        <span class="dl">"</span><span class="s2">TableName</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">orders</span><span class="dl">"</span>
    <span class="p">})</span>
<span class="p">});</span>

<span class="nx">test</span><span class="p">(</span><span class="dl">"</span><span class="s2">stack should contain a dynamodb table with orderId as the Hash key</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">App</span><span class="p">();</span>
    <span class="kd">const</span> <span class="nx">stack</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">OrderServiceInfraStack</span><span class="p">(</span><span class="nx">app</span><span class="p">,</span> <span class="dl">"</span><span class="s2">OrderServiceStack</span><span class="dl">"</span><span class="p">);</span>

    <span class="c1">//assert that stack contains a dynamo table with "orderId" as the HASH key</span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">stack</span><span class="p">).</span><span class="nx">toHaveResource</span><span class="p">(</span><span class="dl">"</span><span class="s2">AWS::DynamoDB::Table</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span>
        <span class="dl">"</span><span class="s2">KeySchema</span><span class="dl">"</span><span class="p">:</span> <span class="p">[</span>
            <span class="p">{</span>
                <span class="dl">"</span><span class="s2">AttributeName</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">orderId</span><span class="dl">"</span><span class="p">,</span>
                <span class="dl">"</span><span class="s2">KeyType</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">HASH</span><span class="dl">"</span>
            <span class="p">}</span>
        <span class="p">]</span>
    <span class="p">})</span>
<span class="p">});</span></code></pre></figure>
<p><!-- /wp:code --></p>
<p><!-- wp:heading {"level":4} --></p>
<h4>Step 5: Refactoring the stack</h4>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>Let's look at a unit test and see if there are any challenges in understanding it.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:code --></p>
<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript"><span class="nx">test</span><span class="p">(</span><span class="dl">"</span><span class="s2">stack should contain a lambda function with node10 as runtime</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">App</span><span class="p">();</span>
    <span class="kd">const</span> <span class="nx">stack</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">OrderServiceInfraStack</span><span class="p">(</span><span class="nx">app</span><span class="p">,</span> <span class="dl">"</span><span class="s2">OrderServiceStack</span><span class="dl">"</span><span class="p">);</span>

    <span class="nx">expect</span><span class="p">(</span><span class="nx">stack</span><span class="p">).</span><span class="nx">toHaveResource</span><span class="p">(</span><span class="dl">"</span><span class="s2">AWS::Lambda::Function</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span>
        <span class="na">Runtime</span><span class="p">:</span> <span class="nx">Runtime</span><span class="p">.</span><span class="nx">NODEJS_10_X</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span>
    <span class="p">})</span>
<span class="p">});</span></code></pre></figure>
<p><!-- /wp:code --></p>
<p><!-- wp:list {"ordered":true} --></p>
<ol>
    <li>How do you know our stack will contain a lambda function with node10 as the runtime? Honestly, there is no
        relation between the test input and its output
    </li>
    <li>Even though the test is for OrderServiceStack, I see that we are trying to assert on properties of a resource.
        It somehow looks to me like a misplaced test
    </li>
</ol>
<p><!-- /wp:list --></p>
<p><!-- wp:paragraph --></p>
<p>In order to solve both the problems, we can create a component (or a class) which accepts configuration properties and
    creates a lambda function. This means we will be able to move lambda function unit tests closer to that class and
    make the unit tests more revealing. Let's see how. </p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Let's consider that all our lambda functions are based on "node10" runtime. With this consideration, we can create a
    class, <code>Node10LambdaFunction</code> that represents a lambda function and accepts <code>Node10LambdaFunctionProperties</code>.</p>
<p><i>This is the way which we will take in the article, you should try other approaches and please share them.</i></p>
<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript"><span class="k">import</span> <span class="p">{</span><span class="nx">Code</span><span class="p">,</span> <span class="nb">Function</span><span class="p">,</span> <span class="nx">FunctionProps</span><span class="p">,</span> <span class="nx">Runtime</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@aws-cdk/aws-lambda</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">Construct</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@aws-cdk/core</span><span class="dl">"</span><span class="p">;</span>

<span class="c1">//inherit from Function</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">Node10LambdaFunction</span> <span class="kd">extends</span> <span class="nb">Function</span> <span class="p">{</span>
    <span class="c1">//accepts Node10FunctionProperties which will contain attributes that make sense for our project</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">scope</span><span class="p">:</span> <span class="nx">Construct</span><span class="p">,</span> <span class="nx">properties</span><span class="p">:</span> <span class="nx">Node10FunctionProperties</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">properties</span><span class="p">.</span><span class="nx">functionName</span><span class="p">,</span> <span class="nx">properties</span><span class="p">.</span><span class="nx">toFunctionProps</span><span class="p">())</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nx">Node10LambdaFunctionProperties</span> <span class="p">{</span>
    <span class="c1">//attributes that make sense at this stage</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="k">private</span> <span class="k">readonly</span> <span class="nx">code</span><span class="p">:</span> <span class="nx">Code</span><span class="p">,</span>
                <span class="k">private</span> <span class="k">readonly</span> <span class="nx">handler</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span>
                <span class="k">readonly</span> <span class="nx">functionName</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span>
                <span class="k">private</span> <span class="k">readonly</span> <span class="nx">environmentVariables</span><span class="p">?:</span> <span class="p">{[</span><span class="na">key</span><span class="p">:</span> <span class="kr">string</span><span class="p">]:</span> <span class="kr">string</span> <span class="p">})</span> <span class="p">{</span>
    <span class="p">}</span>

    <span class="c1">//behavior to return AWS FunctionProps</span>
    <span class="nx">toFunctionProps</span><span class="p">():</span> <span class="nx">FunctionProps</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">{</span>
            <span class="na">code</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">code</span><span class="p">,</span>
            <span class="na">handler</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">handler</span><span class="p">,</span>
            <span class="na">runtime</span><span class="p">:</span> <span class="nx">Runtime</span><span class="p">.</span><span class="nx">NODEJS_10_X</span><span class="p">,</span>
            <span class="na">functionName</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">functionName</span><span class="p">,</span>
            <span class="na">environment</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">environmentVariables</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>
<p><!-- /wp:code --></p>
<p><!-- wp:paragraph --></p>
<p>Few quick observations - </p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:list --></p>
<ul>
    <li>Client of Node10LambdaFunction (which is going be our stack now) is not required to pass runtime as it is
        evident from the name itself
    </li>
    <li>Client code is not required to pass id of the resource. Node10LambdaFunction passes function name as the id of
        the resource
    </li>
</ul>
<p><!-- /wp:list --></p>
<p><!-- wp:paragraph --></p>
<p>Now, we can move the lambda function unit tests closer to <code>Node10LambdaFunction</code>. This is how the updated
    test(s) will look like -</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:code --></p>
<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript"><span class="nx">test</span><span class="p">(</span><span class="dl">"</span><span class="s2">stack should contain a lambda function with node10 as runtime</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">stack</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Stack</span><span class="p">();</span>
    <span class="kd">const</span> <span class="nx">properties</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Node10LambdaFunctionProperties</span><span class="p">(</span>
        <span class="nx">Code</span><span class="p">.</span><span class="nx">fromAsset</span><span class="p">(</span><span class="dl">"</span><span class="s2">../dist</span><span class="dl">"</span><span class="p">),</span>
        <span class="dl">"</span><span class="s2">handler.ordersHandler</span><span class="dl">"</span><span class="p">,</span>
        <span class="dl">"</span><span class="s2">order-service-function</span><span class="dl">"</span><span class="p">);</span>

    <span class="c1">//name of the class indicates a lambda function with node10 as the runtime will be created</span>
    <span class="k">new</span> <span class="nx">Node10LambdaFunction</span><span class="p">(</span><span class="nx">stack</span><span class="p">,</span> <span class="nx">properties</span><span class="p">);</span>

    <span class="c1">//assert that stack contains a lambda function with node10 as the runtime. This time the test is not magical</span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">stack</span><span class="p">).</span><span class="nx">toHaveResource</span><span class="p">(</span><span class="dl">"</span><span class="s2">AWS::Lambda::Function</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span>
        <span class="na">Runtime</span><span class="p">:</span> <span class="nx">Runtime</span><span class="p">.</span><span class="nx">NODEJS_10_X</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span>
    <span class="p">})</span>
<span class="p">});</span>

<span class="nx">test</span><span class="p">(</span><span class="dl">"</span><span class="s2">stack should contain a lambda function with specified environment variable</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">stack</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Stack</span><span class="p">();</span>
    <span class="kd">const</span> <span class="nx">properties</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Node10LambdaFunctionProperties</span><span class="p">(</span>
        <span class="nx">Code</span><span class="p">.</span><span class="nx">fromAsset</span><span class="p">(</span><span class="dl">"</span><span class="s2">../dist</span><span class="dl">"</span><span class="p">),</span>
        <span class="dl">"</span><span class="s2">handler.ordersHandler</span><span class="dl">"</span><span class="p">,</span>
        <span class="dl">"</span><span class="s2">order-service-function</span><span class="dl">"</span><span class="p">,</span>
        <span class="p">{</span><span class="dl">"</span><span class="s2">env</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">dev</span><span class="dl">"</span><span class="p">});</span>

    <span class="k">new</span> <span class="nx">Node10LambdaFunction</span><span class="p">(</span><span class="nx">stack</span><span class="p">,</span> <span class="nx">properties</span><span class="p">);</span>

    <span class="c1">//assert that stack contains a lambda function with provided environment variable</span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">stack</span><span class="p">).</span><span class="nx">toHaveResource</span><span class="p">(</span><span class="dl">"</span><span class="s2">AWS::Lambda::Function</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span>
        <span class="na">Environment</span><span class="p">:</span> <span class="p">{</span>
            <span class="na">Variables</span><span class="p">:</span> <span class="p">{</span>
                <span class="dl">"</span><span class="s2">env</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">dev</span><span class="dl">"</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">})</span>
<span class="p">});</span></code></pre></figure>
<p><!-- /wp:code --></p>
<p><!-- wp:paragraph --></p>
<p>Here, we are not instantiating OrderServiceStack but creating an empty stack which gets passed to
    Node10LambdaFunction. </p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Similarly, we can write other tests around lambda function like - assert that lambda function is created with a given
    name, assert that lambda function is inside a VPC etc. <i>I will make similar changes for Dynamo table and commit the
    code.</i></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>With these changes, we can write unit tests for various components (as fine grained as we want) and a snapshot test
    for the entire stack.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading {"level":4} --></p>
<h4>Step 6: Adding lambda backed public RestApi to stack</h4>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>Let's provision a rest api. In order to do so we need to add a dependency <code>@aws-cdk/aws-apigateway</code>. So,
    let's add it by executing <code>npm install @aws-cdk/aws-apigateway@1.19.0</code>.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Following the same pattern we would like to create a class that allows us to add an endpoint which can be accessed
    publicly and is backed by a lambda function.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:code --></p>
<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript"><span class="k">import</span> <span class="p">{</span><span class="nx">LambdaRestApi</span><span class="p">,</span> <span class="nx">LambdaRestApiProps</span><span class="p">,</span> <span class="nx">MethodLoggingLevel</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@aws-cdk/aws-apigateway</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">Construct</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@aws-cdk/core</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">Node10LambdaFunction</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../function/Node10LambdaFunction</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">IFunction</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@aws-cdk/aws-lambda</span><span class="dl">"</span><span class="p">;</span>

<span class="c1">//inherit from LambdaRestApi</span>
<span class="kd">class</span> <span class="nx">LambdaBackedPublicRestApi</span> <span class="kd">extends</span> <span class="nx">LambdaRestApi</span> <span class="p">{</span>

    <span class="c1">//similar to Node10Function, it accepts LambdaBackedPublicRestApiProperties</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">scope</span><span class="p">:</span> <span class="nx">Construct</span><span class="p">,</span> <span class="nx">properties</span><span class="p">:</span> <span class="nx">LambdaBackedPublicRestApiProperties</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">properties</span><span class="p">.</span><span class="nx">apiName</span><span class="p">,</span> <span class="nx">properties</span><span class="p">.</span><span class="nx">toLambdaRestApiProps</span><span class="p">());</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nx">LambdaBackedPublicRestApiProperties</span> <span class="p">{</span>

    <span class="kd">constructor</span><span class="p">(</span><span class="k">readonly</span> <span class="nx">apiName</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span>
                <span class="k">private</span> <span class="k">readonly</span> <span class="nx">stageName</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span>
                <span class="k">private</span> <span class="nx">handler</span><span class="p">:</span> <span class="nx">Node10LambdaFunction</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">}</span>

    <span class="c1">//behavior to return LambdaRestApiProps</span>
    <span class="nx">toLambdaRestApiProps</span><span class="p">():</span> <span class="nx">LambdaRestApiProps</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">{</span>
            <span class="na">restApiName</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">apiName</span><span class="p">,</span>
            <span class="na">deployOptions</span><span class="p">:</span> <span class="p">{</span>
                <span class="na">stageName</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">stageName</span><span class="p">,</span>
                <span class="na">loggingLevel</span><span class="p">:</span> <span class="nx">MethodLoggingLevel</span><span class="p">.</span><span class="nx">INFO</span>
            <span class="p">},</span>
            <span class="na">proxy</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
            <span class="na">handler</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">handler</span> <span class="k">as</span> <span class="nx">IFunction</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>
<p><!-- /wp:code --></p>
<p><!-- wp:paragraph --></p>
<p>This will create a RestApi in the stack for us but there is no endpoint available for us. In order to allow that to
    happen we can expose a method that takes a resource path say - "<code>orders/{orderId}</code>" and an http method
    which needs to be attached to the last part of resource which in this example is <code>{orderId}</code>.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>So, let's do this.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:code --></p>
<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript"><span class="k">import</span> <span class="p">{</span>
    <span class="nx">LambdaRestApi</span><span class="p">,</span>
    <span class="nx">LambdaRestApiProps</span><span class="p">,</span>
    <span class="nx">MethodLoggingLevel</span><span class="p">,</span>
    <span class="nx">Resource</span>
<span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@aws-cdk/aws-apigateway</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">Construct</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@aws-cdk/core</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">Node10LambdaFunction</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../function/Node10LambdaFunction</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">IFunction</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@aws-cdk/aws-lambda</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">class</span> <span class="nx">LambdaBackedPublicRestApi</span> <span class="kd">extends</span> <span class="nx">LambdaRestApi</span> <span class="p">{</span>

    <span class="kd">constructor</span><span class="p">(</span><span class="nx">scope</span><span class="p">:</span> <span class="nx">Construct</span><span class="p">,</span> <span class="nx">properties</span><span class="p">:</span> <span class="nx">LambdaBackedPublicRestApiProperties</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">properties</span><span class="p">.</span><span class="nx">apiName</span><span class="p">,</span> <span class="nx">properties</span><span class="p">.</span><span class="nx">toLambdaRestApiProps</span><span class="p">());</span>
    <span class="p">}</span>

    <span class="c1">//add resource say, orders/{orderId} and a method GET against {orderId}</span>
    <span class="nx">addEndpoint</span><span class="p">(</span><span class="nx">resourcePath</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">httpMethod</span><span class="p">:</span> <span class="nx">HttpMethod</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">resourcePath</span><span class="p">.</span><span class="nx">startsWith</span><span class="p">(</span><span class="dl">"</span><span class="s2">/</span><span class="dl">"</span><span class="p">))</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nx">IllegalArgumentException</span><span class="p">(</span>
                <span class="s2">`</span><span class="p">${</span><span class="nx">resourcePath</span><span class="p">}</span><span class="s2"> should not begin with a / while adding a rest endpoint`</span>
            <span class="p">);</span>

        <span class="kd">const</span> <span class="nx">resource</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">addAllResourcesUsing</span><span class="p">(</span><span class="nx">resourcePath</span><span class="p">);</span>
        <span class="nx">resource</span><span class="p">.</span><span class="nx">addMethod</span><span class="p">(</span><span class="nx">httpMethod</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="c1">//add resources recursively</span>
    <span class="k">private</span> <span class="nx">addAllResourcesUsing</span><span class="p">(</span><span class="nx">resourcePath</span><span class="p">:</span> <span class="kr">string</span><span class="p">):</span> <span class="nx">Resource</span> <span class="p">{</span>
        <span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">resources</span><span class="p">:</span> <span class="kr">string</span><span class="p">[],</span> <span class="nx">rootResource</span><span class="p">:</span> <span class="nx">Resource</span><span class="p">):</span> <span class="nx">Resource</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">resources</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span>
                <span class="k">return</span> <span class="nx">rootResource</span><span class="p">;</span>
            <span class="k">else</span>
                <span class="k">return</span> <span class="nx">add</span><span class="p">(</span>
                    <span class="nx">resources</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nx">resources</span><span class="p">.</span><span class="nx">length</span><span class="p">),</span>
                    <span class="nx">LambdaBackedPublicRestApi</span><span class="p">.</span><span class="nx">getOrAdd</span><span class="p">(</span><span class="nx">resources</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">rootResource</span><span class="p">)</span>
                <span class="p">);</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="nx">add</span><span class="p">(</span><span class="nx">resourcePath</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">"</span><span class="s2">/</span><span class="dl">"</span><span class="p">),</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">root</span> <span class="k">as</span> <span class="nx">Resource</span><span class="p">));</span>
    <span class="p">}</span>

    <span class="c1">//return the already added resource or add</span>
    <span class="k">private</span> <span class="k">static</span> <span class="nx">getOrAdd</span><span class="p">(</span><span class="nx">resourcePath</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">rootResource</span><span class="p">:</span> <span class="nx">Resource</span><span class="p">):</span> <span class="nx">Resource</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">alreadyPresentResource</span> <span class="o">=</span> <span class="nx">rootResource</span><span class="p">.</span><span class="nx">getResource</span><span class="p">(</span><span class="nx">resourcePath</span><span class="p">)</span> <span class="k">as</span> <span class="nx">Resource</span><span class="p">;</span>
        <span class="k">return</span> <span class="nx">alreadyPresentResource</span> <span class="o">||</span> <span class="nx">rootResource</span><span class="p">.</span><span class="nx">addResource</span><span class="p">(</span><span class="nx">resourcePath</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kr">enum</span> <span class="nx">HttpMethod</span> <span class="p">{</span>
    <span class="nx">GET</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">GET</span><span class="dl">"</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nx">IllegalArgumentException</span> <span class="kd">extends</span> <span class="nb">Error</span> <span class="p">{</span>
<span class="p">}</span></code></pre></figure>
<p><!-- /wp:code --></p>
<p><!-- wp:paragraph --></p>
<p>Few quick observations - </p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:list --></p>
<ul>
    <li>We do not expect the resource path to begin with a "/", <code>aws-apigateway</code> throws an error if that is
        the case
    </li>
    <li>We are recursively adding each resource from the resource path</li>
    <li>Http method gets added on the last resource of the resource path</li>
    <li><code>getOrAdd</code> ensures that we do not add the same resource again. Eg; if we want to add 2 resource paths <code>serverless/lambda</code> and <code>serverless/lambda/{functionId}</code>, it is necessary to ensure we do not add <code>serverless/lambda</code> again</li>
</ul>
<p><!-- /wp:list --></p>
<p><!-- wp:paragraph --></p>
<p>Let's quickly add a couple of unit tests.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:code --></p>
<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript"><span class="k">import</span> <span class="p">{</span><span class="nx">LambdaBackedPublicRestApi</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../../lib/restapi/public/LambdaBackedPublicRestApi</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">Stack</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@aws-cdk/core</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">LambdaBackedPublicRestApiProperties</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../../lib/restapi/public/LambdaBackedPublicRestApiProperties</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">Node10LambdaFunctionProperties</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../../lib/function/Node10LambdaFunctionProperties</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">Code</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@aws-cdk/aws-lambda</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">Node10LambdaFunction</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../../lib/function/Node10LambdaFunction</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">HttpMethod</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../../lib/restapi/public/HttpMethod</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">CfnMethod</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@aws-cdk/aws-apigateway</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="dl">"</span><span class="s2">@aws-cdk/assert/jest</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">addFakeEndpoint</span> <span class="o">=</span> <span class="p">(</span><span class="nx">api</span><span class="p">:</span> <span class="nx">LambdaBackedPublicRestApi</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">api</span><span class="p">.</span><span class="nx">addEndpoint</span><span class="p">(</span><span class="dl">"</span><span class="s2">fake</span><span class="dl">"</span><span class="p">,</span> <span class="nx">HttpMethod</span><span class="p">.</span><span class="nx">GET</span><span class="p">);</span>
<span class="p">};</span>

<span class="nx">test</span><span class="p">(</span><span class="dl">"</span><span class="s2">stack should contain a public api with a name</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">stack</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Stack</span><span class="p">();</span>
    <span class="kd">const</span> <span class="nx">node10LambdaFunction</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Node10LambdaFunction</span><span class="p">(</span>
        <span class="nx">stack</span><span class="p">,</span>
        <span class="k">new</span> <span class="nx">Node10LambdaFunctionProperties</span><span class="p">(</span>
            <span class="nx">Code</span><span class="p">.</span><span class="nx">fromAsset</span><span class="p">(</span><span class="dl">"</span><span class="s2">../dist</span><span class="dl">"</span><span class="p">),</span>
            <span class="dl">"</span><span class="s2">handler.ordersHandler</span><span class="dl">"</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">order-service-function</span><span class="dl">"</span><span class="p">));</span>

    <span class="kd">const</span> <span class="nx">properties</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LambdaBackedPublicRestApiProperties</span><span class="p">(</span>
        <span class="dl">"</span><span class="s2">orders-api</span><span class="dl">"</span><span class="p">,</span>
        <span class="dl">"</span><span class="s2">dev</span><span class="dl">"</span><span class="p">,</span>
        <span class="nx">node10LambdaFunction</span>
    <span class="p">);</span>

    <span class="kd">const</span> <span class="nx">api</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LambdaBackedPublicRestApi</span><span class="p">(</span><span class="nx">stack</span><span class="p">,</span> <span class="nx">properties</span><span class="p">);</span>
    <span class="nx">addFakeEndpoint</span><span class="p">(</span><span class="nx">api</span><span class="p">);</span>

    <span class="c1">//assert that stack contains a rest api with "orders-api" as the name</span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">stack</span><span class="p">).</span><span class="nx">toHaveResource</span><span class="p">(</span><span class="dl">"</span><span class="s2">AWS::ApiGateway::RestApi</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span>
        <span class="na">Name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">orders-api</span><span class="dl">"</span>
    <span class="p">});</span>
<span class="p">});</span>

<span class="nx">test</span><span class="p">(</span><span class="dl">"</span><span class="s2">stack should contain a public api with an http method GET added to the resource</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">stack</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Stack</span><span class="p">();</span>
    <span class="kd">const</span> <span class="nx">node10LambdaFunction</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Node10LambdaFunction</span><span class="p">(</span>
        <span class="nx">stack</span><span class="p">,</span>
        <span class="k">new</span> <span class="nx">Node10LambdaFunctionProperties</span><span class="p">(</span>
            <span class="nx">Code</span><span class="p">.</span><span class="nx">fromAsset</span><span class="p">(</span><span class="dl">"</span><span class="s2">../dist</span><span class="dl">"</span><span class="p">),</span>
            <span class="dl">"</span><span class="s2">handler.ordersHandler</span><span class="dl">"</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">order-service-function</span><span class="dl">"</span><span class="p">));</span>

    <span class="kd">const</span> <span class="nx">properties</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LambdaBackedPublicRestApiProperties</span><span class="p">(</span>
        <span class="dl">"</span><span class="s2">orders-api</span><span class="dl">"</span><span class="p">,</span>
        <span class="dl">"</span><span class="s2">dev</span><span class="dl">"</span><span class="p">,</span>
        <span class="nx">node10LambdaFunction</span>
    <span class="p">);</span>

    <span class="kd">const</span> <span class="nx">api</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LambdaBackedPublicRestApi</span><span class="p">(</span><span class="nx">stack</span><span class="p">,</span> <span class="nx">properties</span><span class="p">);</span>
    <span class="nx">api</span><span class="p">.</span><span class="nx">addEndpoint</span><span class="p">(</span><span class="dl">"</span><span class="s2">article/serverless</span><span class="dl">"</span><span class="p">,</span> <span class="nx">HttpMethod</span><span class="p">.</span><span class="nx">GET</span><span class="p">);</span>

    <span class="c1">//get a resource and a CfnMethod against that resource</span>
    <span class="kd">const</span> <span class="nx">serverlessResource</span> <span class="o">=</span> <span class="nx">api</span><span class="p">.</span><span class="nx">root</span><span class="p">.</span><span class="nx">getResource</span><span class="p">(</span><span class="dl">"</span><span class="s2">article</span><span class="dl">"</span><span class="p">)?.</span><span class="nx">getResource</span><span class="p">(</span><span class="dl">"</span><span class="s2">serverless</span><span class="dl">"</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">method</span> <span class="o">=</span> <span class="nx">serverlessResource</span><span class="p">?.</span><span class="nx">node</span><span class="p">.</span><span class="nx">findChild</span><span class="p">(</span><span class="dl">"</span><span class="s2">GET</span><span class="dl">"</span><span class="p">)</span> <span class="k">as</span> <span class="nx">CfnMethod</span><span class="p">;</span>

    <span class="nx">expect</span><span class="p">(</span><span class="nx">method</span><span class="p">.</span><span class="nx">httpMethod</span><span class="p">).</span><span class="nx">toEqual</span><span class="p">(</span><span class="nx">HttpMethod</span><span class="p">.</span><span class="nx">GET</span><span class="p">);</span>
<span class="p">});</span></code></pre></figure>
<p><!-- /wp:code --></p>
<p><!-- wp:paragraph --></p>
<p><em>These tests assert that a rest api exists with a given name and an http method is attached to a resource.</em></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading {"level":4} --></p>
<h4>Step 7: Updating the stack</h4>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>Let's update the stack to have lambda function, dynamo table, lambda backed public api and dynamo table read access
    to lambda function.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:code --></p>
<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript"><span class="k">import</span> <span class="p">{</span><span class="nx">Code</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@aws-cdk/aws-lambda</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">Construct</span><span class="p">,</span> <span class="nx">Stack</span><span class="p">,</span> <span class="nx">StackProps</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@aws-cdk/core</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">AttributeType</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@aws-cdk/aws-dynamodb</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">Node10LambdaFunction</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./function/Node10LambdaFunction</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">Node10LambdaFunctionProperties</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./function/Node10LambdaFunctionProperties</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">DynamoTable</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./dynamodb/DynamoTable</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">DynamoTableProperties</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./dynamodb/DynamoTableProperties</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">PrimaryKey</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./dynamodb/PrimaryKey</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">PartitionKey</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./dynamodb/PartitionKey</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">LambdaBackedPublicRestApi</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./restapi/public/LambdaBackedPublicRestApi</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">LambdaBackedPublicRestApiProperties</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./restapi/public/LambdaBackedPublicRestApiProperties</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">HttpMethod</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./restapi/public/HttpMethod</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">class</span> <span class="nx">OrderServiceInfraStack</span> <span class="kd">extends</span> <span class="nx">Stack</span> <span class="p">{</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">scope</span><span class="p">:</span> <span class="nx">Construct</span><span class="p">,</span> <span class="nx">id</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">props</span><span class="p">?:</span> <span class="nx">StackProps</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">props</span><span class="p">);</span>

        <span class="c1">//use the newly prepared classes</span>
        <span class="kd">const</span> <span class="nx">ordersFunction</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">ordersFunction</span><span class="p">();</span>
        <span class="kd">const</span> <span class="nx">ordersTable</span>    <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">ordersTable</span><span class="p">();</span>
        <span class="kd">const</span> <span class="nx">restApi</span>        <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">lambdaBackedPublicRestApi</span><span class="p">(</span><span class="nx">ordersFunction</span><span class="p">);</span>

        <span class="nx">restApi</span><span class="p">.</span><span class="nx">addEndpoint</span><span class="p">(</span><span class="dl">"</span><span class="s2">orders/{orderId}</span><span class="dl">"</span><span class="p">,</span> <span class="nx">HttpMethod</span><span class="p">.</span><span class="nx">GET</span><span class="p">);</span> <span class="c1">//add the required resources along with HTTP method</span>
        <span class="nx">ordersTable</span><span class="p">.</span><span class="nx">grantReadData</span><span class="p">(</span><span class="nx">ordersFunction</span><span class="p">);</span> <span class="c1">//grant read access on "orders" table to lambda function</span>
    <span class="p">}</span>

    <span class="c1">//returns an instance of Node10LambdaFunction</span>
    <span class="k">private</span> <span class="nx">ordersFunction</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nx">Node10LambdaFunction</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="k">new</span> <span class="nx">Node10LambdaFunctionProperties</span><span class="p">(</span>
            <span class="nx">Code</span><span class="p">.</span><span class="nx">fromAsset</span><span class="p">(</span><span class="dl">"</span><span class="s2">../dist</span><span class="dl">"</span><span class="p">),</span>
            <span class="dl">"</span><span class="s2">handler.ordersHandler</span><span class="dl">"</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">order-service-function</span><span class="dl">"</span><span class="p">,</span>
            <span class="p">{</span><span class="dl">"</span><span class="s2">ExecutionEnvironment</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">dev</span><span class="dl">"</span><span class="p">})</span>
        <span class="p">);</span>
    <span class="p">}</span>

    <span class="c1">//returns an instance of DynamoTable</span>
    <span class="k">private</span> <span class="nx">ordersTable</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nx">DynamoTable</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="k">new</span> <span class="nx">DynamoTableProperties</span><span class="p">(</span>
            <span class="dl">"</span><span class="s2">orders</span><span class="dl">"</span><span class="p">,</span>
            <span class="k">new</span> <span class="nx">PrimaryKey</span><span class="p">(</span>
                <span class="k">new</span> <span class="nx">PartitionKey</span><span class="p">(</span>
                    <span class="dl">"</span><span class="s2">orderId</span><span class="dl">"</span><span class="p">,</span>
                    <span class="nx">AttributeType</span><span class="p">.</span><span class="nx">STRING</span><span class="p">)</span>
            <span class="p">))</span>
        <span class="p">);</span>
    <span class="p">}</span>

    <span class="c1">//returns an instance of LambdaBackedPublicRestApi</span>
    <span class="k">private</span> <span class="nx">lambdaBackedPublicRestApi</span><span class="p">(</span><span class="nx">lambda</span><span class="p">:</span> <span class="nx">Node10LambdaFunction</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nx">LambdaBackedPublicRestApi</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="k">new</span> <span class="nx">LambdaBackedPublicRestApiProperties</span><span class="p">(</span>
            <span class="dl">"</span><span class="s2">orders-api</span><span class="dl">"</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">dev</span><span class="dl">"</span><span class="p">,</span>
            <span class="nx">lambda</span>
        <span class="p">));</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>
<p><!-- /wp:code --></p>
<p><!-- wp:paragraph --></p>
<p>Time to add our snapshot test, probably simpler than you might have thought of -</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:code --></p>
<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript"><span class="k">import</span> <span class="p">{</span><span class="nx">OrderServiceInfraStack</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../lib/OrderServiceInfraStack</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">App</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@aws-cdk/core</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="dl">"</span><span class="s2">@aws-cdk/assert/jest</span><span class="dl">"</span><span class="p">;</span>

<span class="nx">test</span><span class="p">(</span><span class="dl">"</span><span class="s2">should create order service stack</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">App</span><span class="p">();</span>
    <span class="kd">const</span> <span class="nx">stack</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">OrderServiceInfraStack</span><span class="p">(</span><span class="nx">app</span><span class="p">,</span> <span class="dl">"</span><span class="s2">OrderServiceStack</span><span class="dl">"</span><span class="p">);</span>

    <span class="nx">expect</span><span class="p">(</span><span class="nx">stack</span><span class="p">).</span><span class="nx">toMatchSnapshot</span><span class="p">();</span>
<span class="p">});</span></code></pre></figure>
<p><!-- /wp:code --></p>
<p><!-- wp:heading {"level":4} --></p>
<h4>Step 8: Deploying our stack</h4>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>We have worked hard to create all the resources that are needed in our stack. Now is the time to deploy our stack and
    see things in action.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Let's update <code>OrderServiceInfra</code> to pass stack name as a part of stack properties. It is this file which
    acts as an entry point for the application and is referred in cdk.json.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:code --></p>
<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript"><span class="cp">#!/usr/bin/env node
</span><span class="k">import</span> <span class="dl">"</span><span class="s2">source-map-support/register</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">OrderServiceInfraStack</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../lib/OrderServiceInfraStack</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">StackProps</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@aws-cdk/core</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">cdk</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">@aws-cdk/core</span><span class="dl">"</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">cdk</span><span class="p">.</span><span class="nx">App</span><span class="p">();</span>
<span class="c1">//pass stack name</span>
<span class="kd">const</span> <span class="nx">stackProps</span><span class="p">:</span><span class="nx">StackProps</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">stackName</span><span class="p">:</span> <span class="dl">"</span><span class="s2">order-service-stack</span><span class="dl">"</span>
<span class="p">};</span>
<span class="c1">//instantiate OrderServiceInfraStack</span>
<span class="k">new</span> <span class="nx">OrderServiceInfraStack</span><span class="p">(</span><span class="nx">app</span><span class="p">,</span> <span class="dl">"</span><span class="s2">OrderServiceStack</span><span class="dl">"</span><span class="p">,</span> <span class="nx">stackProps</span><span class="p">);</span></code></pre></figure>
<p><!-- /wp:code --></p>
<p><!-- wp:paragraph --></p>
<p>CDK also provides us with various commands - </p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:list --></p>
<ul>
    <li><code>cdk list</code> - lists the stacks</li>
    <li><code>cdk deploy</code> - deploys the stack in AWS environment</li>
    <li><code>cdk destroy</code> - destroys the stacks</li>
    <li><code>cdk synthesize</code> - synthesizes and prints the CloudFormation</li>
    <li><code>cdk bootstrap</code> - deploys the CDK toolkit stack into an AWS environment</li>
</ul>
<p><!-- /wp:list --></p>
<p><!-- wp:paragraph --></p>
<p>We need to execute <code>cdk bootrap</code> and <code>cdk deploy</code> from <code>infra</code> directory to deploy
    stack in our AWS account.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:code --></p>
<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="o">&gt;</span> <span class="nb">cd </span>infra
<span class="o">&gt;</span> cdk bootstrap
<span class="o">&gt;</span> cdk deploy</code></pre></figure>
<p><!-- /wp:code --></p>
<p><!-- wp:paragraph --></p>
<p>These commands make a few assumptions -</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:list --></p>
<ul>
    <li>AWS credentials are already configured on host machine</li>
    <li>AWS user has the right to create various AWS resources including IAM roles</li>
    <li><code>dist/</code> directory which will be deployed on an S3 bucket (bootstrap creates for us) when we execute
        <code>cdk bootstrap</code>, already exists
    </li>
</ul>
<p><!-- /wp:list --></p>
<p><!-- wp:paragraph --></p>
<p>It will take sometime for stack to be created which will consist of <code>lambda function, dynamo table, api gateway
    and all the necessary IAM roles</code>.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Once our stack is created, make an entry in <code>orders</code> table, hit the public api endpoint which will look
    like <em><code>https://rest-api-id.execute-api.ap-south-1.amazonaws.com/dev/orders/OrderId</code></em> and enjoy the
    output. </p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>That's it, our stack is deployed and our application is up and running 😁</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading {"level":4} --></p>
<h4>Conclusion </h4>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>Relationship between CDK and CloudFormation can be summarised as -</p>
<p><!-- /wp:paragraph --></p>
<p>
<div class="wp-block-image is-style-default">
    <figure class="aligncenter size-large is-resized"><img src="/assets/img/pexels/cdk.png"
                                                           class="wp-image-1043"/></figure>
</div>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph --></p>
<p>In this article we were able to code our infra using CDK, write tests for our infra and deploy the same. Let's take a
    look at some of the advantages of using <a href="https://docs.aws.amazon.com/cdk/latest/guide/home.html">CDK</a> -
</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:list --></p>
<ul>
    <li>Resources can be modeled in Object Oriented manner</li>
    <li>High level abstractions can be defined and published within the team or company</li>
    <li>Infrastructure can be built as library</li>
    <li>Infrastructure code can be tested</li>
    <li>IDE's code completion can be leveraged</li>
    <li>Programming language constructs like if statements, for-loops, etc can be used when defining infrastructure</li>
</ul>
<p><!-- /wp:list --></p>
<p><!-- wp:paragraph --></p>
<p>We have finally come to end of our Serverless Journey series. Hope you enjoyed it.</p>
<p><!-- /wp:paragraph --></p>]]></content><author><name>Sarthak Makhija</name></author><category term="Serverless" /><category term="AWS Lambda" /><category term="Serverless" /><summary type="html"><![CDATA[Let's deploy our Serverless application. We will be using AWS CDK to deploy our application that includes infra and the code. What would be interesting is to see if we can make our infra testable.]]></summary></entry><entry><title type="html">Testing Serverless Journey</title><link href="https://tech-lessons.in/testing-serverless-journey/" rel="alternate" type="text/html" title="Testing Serverless Journey" /><published>2020-03-14T00:00:00+05:30</published><updated>2020-03-14T00:00:00+05:30</updated><id>https://tech-lessons.in/testing-serverless-journey</id><content type="html" xml:base="https://tech-lessons.in/testing-serverless-journey/"><![CDATA[<p><!-- wp:paragraph --></p>
<p>It is time to test our <a href="/beginning-serverless-journey">Serverless journey</a> which started with a web application that involved AWS lambda, AWS API Gateway and AWS DynamoDB. </p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>We had some unit tests for our controller, service and request objects. But, these tests don't give us the kind of confidence we need to deploy our application. At this stage we don't even know if the query that is written in repository is going to work properly or not, forget about releasing the application.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>What we need is an ability to test the following - </p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:list --></p>
<ul>
<li>Repository works as expected by connecting to DynamoDB</li>
<li>Lambda handler is able to receive an event from API Gateway and get an order by its id</li>
</ul>
<p><!-- /wp:list --></p>
<p><!-- wp:paragraph --></p>
<p>In simple terms we need some form of integration testing. </p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading {"level":4} --></p>
<h4>Let's welcome LocalStack</h4>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>LocalStack<a href="https://github.com/localstack/localstack"> </a>is a fully functional local AWS cloud stack. Its <a href="https://github.com/localstack/localstack">github</a> page states the following - </p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:quote --></p>
<blockquote class="wp-block-quote"><p><em>LocalStack</em>&nbsp;provides an easy-to-use test/mocking framework for developing Cloud applications. Currently, the focus is primarily on supporting the AWS cloud stack.  </p>
</blockquote>
<p><!-- /wp:quote --></p>
<p><!-- wp:paragraph --></p>
<p>LocalStack spins up various Cloud APIs on local machine including S3, Lambda, DynamoDB and API Gateway. This is all we need to test our complete application. </p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Some of you might be having a question "Why is S3 needed?". Well, we will get an answer to this by the end of this article. So, please hold on.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading {"level":4} --></p>
<h4>Understanding LocalStack</h4>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>LocalStack can be made to run as a docker container on a host machine. It supports quite a number of AWS services which will run inside the docker container with different ports exposed on host machine. </p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Before moving on let's look at this conversation to understand how can LocalStack be leveraged for testing Serverless application. </p>
<figure class="wp-block-embed-youtube aligncenter wp-block-embed is-type-video is-provider-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio">
<div class="wp-block-embed__wrapper">
    <iframe width="800" height="400" src="https://www.youtube.com/embed/Xed6C8vskUo" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
</div>
</figure>
<p><!-- /wp:core-embed/youtube --></p>
<p><!-- wp:paragraph --></p>
<p>Let's take some small steps to test our application using LocalStack.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading {"level":4} --></p>
<h4>Writing Repository Test</h4>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>In order to test repository layer we need to -</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:list {"ordered":true} --></p>
<ol>
<li>Build the project</li>
<li>Have a docker container with a running DynamoDB service</li>
<li>Facilitate creation of "orders" table in DynamoDB service</li>
<li>Change the application to connect to local DynamoDB service</li>
<li>Add integration tests for repository</li>
</ol>
<p><!-- /wp:list --></p>
<p><!-- wp:paragraph --></p>
<p>Let's handle each of them one by one.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p><strong>Step 1: Build the project</strong></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Let's add a build task to our outer package.json which will execute <code>tsc</code>. Let's also add a types definition for node by executing <code>npm i @types/node</code>. Here, is how our build script looks like - </p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:code --></p>
<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="nl">"test"</span><span class="p">:</span><span class="w"> </span><span class="s2">"jest test/**"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"build"</span><span class="p">:</span><span class="w"> </span><span class="s2">"tsc"</span><span class="w">
</span><span class="p">}</span></code></pre></figure>
<p><!-- /wp:code --></p>
<p><!-- wp:paragraph --></p>
<p>Before we execute our build command, let's <code>exclude infra and test</code> folders from our outer tsconfig.json.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:preformatted --></p>
<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript"><span class="p">{</span>
  <span class="dl">"</span><span class="s2">compilerOptions</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
    <span class="dl">"</span><span class="s2">noEmitOnError</span><span class="dl">"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">moduleResolution</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">node</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">module</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">commonjs</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">target</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">es6</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">outDir</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">dist</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">inlineSourceMap</span><span class="dl">"</span><span class="p">:</span> <span class="kc">true</span>
  <span class="p">},</span>
  <span class="dl">"</span><span class="s2">exclude</span><span class="dl">"</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">infra</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">test</span><span class="dl">"</span><span class="p">]</span>
<span class="p">}</span></code></pre></figure>
<p><!-- /wp:preformatted --></p>
<p><!-- wp:paragraph --></p>
<p>Now, we can execute <code>npm run build</code> which should produce a <code>dist</code> folder with compiled code.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p><em>Note we are using tsc to transpile our typescript code to javascript. We do not have any external dependencies to be packed with our distribution, had there been any we would have gone ahead with webpack.</em></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p><strong>Step 2: Docker container with a running DynamoDB service</strong></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Let's create a <i>docker-compose.yml</i> file referring to LocalStack image and <i>start the container as a pretest step in our package.json</i>.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:code --></p>
<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="na">version</span><span class="pi">:</span> <span class="s2">"</span><span class="s">2.1"</span>
<span class="na">services</span><span class="pi">:</span>
  <span class="na">localstack</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">localstack/localstack:0.10.7</span> <span class="c1">## use localstack image</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">4567-4599:4567-4599"</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">${PORT_WEB_UI-8080}:${PORT_WEB_UI-8080}"</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">SERVICES=${SERVICES- }</span>
      <span class="pi">-</span> <span class="s">DEBUG=1</span>
      <span class="pi">-</span> <span class="s">DATA_DIR=${DATA_DIR- }</span>
      <span class="pi">-</span> <span class="s">PORT_WEB_UI=${PORT_WEB_UI- }</span>
      <span class="pi">-</span> <span class="s">LAMBDA_EXECUTOR=${LAMBDA_EXECUTOR- }</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">/var/run/docker.sock:/var/run/docker.sock"</span></code></pre></figure>
<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="w"> </span><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"pretest"</span><span class="p">:</span><span class="w"> </span><span class="s2">"docker-compose -f test/docker-compose.yml up -d"</span><span class="p">,</span><span class="w"> </span><span class="err">//start</span><span class="w"> </span><span class="err">docker</span><span class="w"> </span><span class="err">compose</span><span class="w"> </span><span class="err">before</span><span class="w"> </span><span class="err">running</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">tests</span><span class="w">
    </span><span class="nl">"test"</span><span class="p">:</span><span class="w"> </span><span class="s2">"jest test/**"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"build"</span><span class="p">:</span><span class="w"> </span><span class="s2">"tsc"</span><span class="w">
</span><span class="p">}</span></code></pre></figure>
<p><!-- /wp:code --></p>
<p><!-- wp:paragraph --></p>
<p>Run the pretest command and see LocalStack running as docker container.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p><strong>Step 3: Facilitate creation of "orders" table in DynamoDB service</strong></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>With LocalStack container up and running, "orders" table needs to be created in DynamoDB service. In order to do this we will use CloudFormation template. So, let's write one -</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:code --></p>
<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="na">AWSTemplateFormatVersion</span><span class="pi">:</span> <span class="s2">"</span><span class="s">2010-09-09"</span>
<span class="na">Resources</span><span class="pi">:</span>
  <span class="na">OrdersTable</span><span class="pi">:</span>
    <span class="na">Type</span><span class="pi">:</span> <span class="s">AWS::DynamoDB::Table</span>
    <span class="na">Properties</span><span class="pi">:</span>
      <span class="na">TableName</span><span class="pi">:</span> <span class="s2">"</span><span class="s">orders"</span> <span class="c1">## create "orders" table</span>
      <span class="na">AttributeDefinitions</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">AttributeName</span><span class="pi">:</span> <span class="s2">"</span><span class="s">orderId"</span>
          <span class="na">AttributeType</span><span class="pi">:</span> <span class="s2">"</span><span class="s">S"</span> <span class="c1">## use STRING as the data type for "orderId"</span>
      <span class="na">KeySchema</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">AttributeName</span><span class="pi">:</span> <span class="s2">"</span><span class="s">orderId"</span> <span class="c1">## use "orderId" as the HASH key</span>
          <span class="na">KeyType</span><span class="pi">:</span> <span class="s2">"</span><span class="s">HASH"</span></code></pre></figure>
<p><!-- /wp:code --></p>
<p><!-- wp:paragraph --></p>
<p>We will also create a script to deploy CloudFormation template against LocalStack. This script will also be executed as a part of our pretest step.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:code --></p>
<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="c">#!/bin/sh</span>

aws cloudformation deploy <span class="se">\</span>
<span class="nt">--template-file</span> template.yaml <span class="se">\</span>
<span class="nt">--stack-name</span> order-service-stack <span class="se">\</span>
<span class="nt">--region</span> us-east-1 <span class="se">\</span>
<span class="nt">--capabilities</span> CAPABILITY_IAM  <span class="se">\</span>
<span class="nt">--endpoint-url</span> http://localhost:4581

<span class="nb">echo</span> <span class="s1">'aws cloudformation deploy executed against localstack'</span></code></pre></figure>
<p><!-- /wp:code --></p>
<p><!-- wp:paragraph --></p>
<p>Few Quick Observations - </p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:list --></p>
<ul>
<li>As a part of "<code>aws cloudformation deploy</code>", us-east-1 has been specified as the region. By default, LocalStack runs with us-east-1 and we are using the same region</li>
<li>As a part of "<code>aws cloudformation deploy</code>", we use 4581 as the port for local CloudFormation service which is exposed by LocalStack </li>
</ul>
<p><!-- /wp:list --></p>
<p><!-- wp:paragraph --></p>
<p>Let's update our package.json.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:code --></p>
<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="w"> </span><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"localstack:up"</span><span class="p">:</span><span class="w"> </span><span class="s2">"docker-compose -f test/docker-compose.yml up -d"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"delay"</span><span class="p">:</span><span class="w"> </span><span class="s2">"sleep 20"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"localstack:create-infra"</span><span class="p">:</span><span class="w"> </span><span class="s2">"cd test/infra &amp;&amp; ./deploy.sh"</span><span class="p">,</span><span class="w">
    </span><span class="err">//start</span><span class="w"> </span><span class="err">docker</span><span class="w"> </span><span class="err">compose</span><span class="p">,</span><span class="w"> </span><span class="err">introduce</span><span class="w"> </span><span class="err">some</span><span class="w"> </span><span class="err">delay</span><span class="w"> </span><span class="err">and</span><span class="w"> </span><span class="err">run</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">above</span><span class="w"> </span><span class="err">script</span><span class="w"> </span><span class="err">as</span><span class="w"> </span><span class="err">a</span><span class="w"> </span><span class="err">part</span><span class="w"> </span><span class="err">of</span><span class="w"> </span><span class="err">pretest</span><span class="w">
    </span><span class="nl">"pretest"</span><span class="p">:</span><span class="w"> </span><span class="s2">"npm run localstack:up &amp;&amp; npm run delay &amp;&amp; npm run localstack:create-infra"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"test"</span><span class="p">:</span><span class="w"> </span><span class="s2">"jest test/**"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"build"</span><span class="p">:</span><span class="w"> </span><span class="s2">"tsc"</span><span class="w">
</span><span class="p">}</span></code></pre></figure>
<p><!-- /wp:code --></p>
<p><!-- wp:paragraph --></p>
<p>Following events happens as a part of pretest step -</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:list --></p>
<ul>
<li>LocalStack docker container starts</li>
<li>Some delay gets introduced to allow localstack services to be available</li>
<li>CloudFormation template gets deployed against LocalStack by running deploy.sh</li>
</ul>
<p><!-- /wp:list --></p>
<p><!-- wp:paragraph --></p>
<p>Before CloudFormation template can be deployed on LocalStack, a small delay has been specified to ensure LocalStack with its services is up and running.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p><strong>How do I know if "orders" table was created?</strong></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>LocalStack <em>tries</em> to replicate AWS services on local. By this theory, we should be able to run AWS commands by specifying the endpoint-url of the corresponding service.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:code --></p>
<figure class="highlight"><pre><code class="language-shell" data-lang="shell"> <span class="o">&gt;</span> aws dynamodb scan <span class="nt">--table-name</span> orders <span class="nt">--endpoint-url</span> http://localhost:4569

//Output
<span class="o">{</span>
    <span class="s2">"Count"</span>: 0,
    <span class="s2">"Items"</span>: <span class="o">[]</span>,
    <span class="s2">"ScannedCount"</span>: 0,
    <span class="s2">"ConsumedCapacity"</span>: null
<span class="o">}</span></code></pre></figure>
<p><!-- /wp:code --></p>
<p><!-- wp:paragraph --></p>
<p>Now, the last step is making a change in the application to connect to local DynamoDB.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p><strong>Step 4: Connecting the application to local DynamoDB service</strong></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Let's change the repository layer to connect to local DynamoDB service.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:code --></p>
<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript"><span class="k">import</span> <span class="p">{</span><span class="nx">GetItemInput</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">aws-sdk/clients/dynamodb</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">Order</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../model/Order</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">dynamoDbClient</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../DynamoDbConfiguration</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">dynamoDb</span> <span class="o">=</span> <span class="nx">dynamoDbClient</span><span class="p">();</span> <span class="c1">//get dynamoDbClient from DynamoDbConfiguration</span>

<span class="k">export</span> <span class="kd">class</span> <span class="nx">OrderRepository</span> <span class="p">{</span>

    <span class="k">async</span> <span class="nx">findAnOrderBy</span><span class="p">(</span><span class="nx">id</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">getItemInputOptions</span><span class="p">:</span> <span class="nx">GetItemInput</span> <span class="o">=</span> <span class="p">{</span>
            <span class="na">TableName</span><span class="p">:</span> <span class="dl">"</span><span class="s2">orders</span><span class="dl">"</span><span class="p">,</span> <span class="c1">//table name</span>
            <span class="na">Key</span><span class="p">:</span> <span class="p">{</span>
                <span class="dl">"</span><span class="s2">orderId</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span><span class="na">S</span><span class="p">:</span> <span class="nx">id</span><span class="p">}</span> <span class="c1">//query against orderId attribute of order item</span>
            <span class="p">}</span>
        <span class="p">};</span>
        <span class="kd">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">dynamoDb</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="nx">getItemInputOptions</span><span class="p">).</span><span class="nx">promise</span><span class="p">();</span> <span class="c1">//get a dynamo item by passing its id</span>
        <span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">Item</span> <span class="p">?</span> <span class="nx">Order</span><span class="p">.</span><span class="k">from</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">Item</span><span class="p">)</span> <span class="p">:</span> <span class="kc">null</span><span class="p">;</span> <span class="c1">//map dynamo item to Order</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>
<p><!-- /wp:code --></p>
<p><!-- wp:paragraph --></p>
<p>DynamoDbConfiguration looks like - </p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:code --></p>
<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript"><span class="k">import</span> <span class="p">{</span><span class="nx">DynamoDB</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">aws-sdk</span><span class="dl">"</span>

<span class="kd">const</span> <span class="nx">executionEnvironment</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">defaultExecutionEnvironment</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">test</span><span class="dl">"</span><span class="p">;</span>
    <span class="c1">//accept ExecutionEnvironment as the lambda environment variable</span>
    <span class="k">return</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">ExecutionEnvironment</span> <span class="o">||</span> <span class="nx">defaultExecutionEnvironment</span><span class="p">;</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">isTestExecutionEnvironment</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">executionEnvironment</span><span class="p">()</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">test</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">dynamoDbClient</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">isTestExecutionEnvironment</span><span class="p">())</span> <span class="p">{</span>
        <span class="c1">//return an instance of DynamoDB connecting to local dynamo endpoint exposed by localstack, if the execution environment is "test"</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nx">DynamoDB</span><span class="p">({</span>
            <span class="dl">"</span><span class="s2">region</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">us-east-1</span><span class="dl">"</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">endpoint</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">http://localhost:4569</span><span class="dl">"</span>
        <span class="p">});</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="c1">//return an instance of DynamoDB connecting to the actual region in AWS</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nx">DynamoDB</span><span class="p">({</span>
            <span class="dl">"</span><span class="s2">region</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">ap-south-1</span><span class="dl">"</span>
        <span class="p">});</span>
    <span class="p">}</span>
<span class="p">};</span></code></pre></figure>
<p><!-- /wp:code --></p>
<p><!-- wp:paragraph --></p>
<p>Few Quick Observations - </p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:list --></p>
<ul>
<li>OrderRepository uses <code>dynamoDbClient</code> exposed by DynamoDbConfiguration <code>globally</code>. The reason being "aws-sdk" needs to be initialised during cold startup of lambda function</li>
<li>DynamoDbConfiguration uses a lambda environment variable to determine if the execution environment is "test". By default, execution environment is considered as "test"</li>
<li>If execution environment is "test", then an instance of DynamoDB connecting to local dynamo service is returned</li>
    <li>This also means <code>ExecutionEnvironment</code> needs to be passed during deployment as lambda environment variable</li>
</ul>
<p><!-- /wp:list --></p>
<p><!-- wp:paragraph --></p>
<p><strong>Step 5: Adding Integration Tests for Repository</strong></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:code --></p>
<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript"><span class="k">import</span> <span class="p">{</span><span class="nx">DeleteItemInput</span><span class="p">,</span> <span class="nx">PutItemInput</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">aws-sdk/clients/dynamodb</span><span class="dl">"</span><span class="p">;</span>

<span class="k">import</span> <span class="p">{</span><span class="nx">OrderRepository</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../src/repository/OrderRepository</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">Order</span><span class="p">}</span>           <span class="k">from</span> <span class="dl">"</span><span class="s2">../src/model/Order</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">dynamoDbClient</span><span class="p">}</span>  <span class="k">from</span> <span class="dl">"</span><span class="s2">../src/DynamoDbConfiguration</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">dynamoDb</span> <span class="o">=</span> <span class="nx">dynamoDbClient</span><span class="p">();</span>

<span class="nx">test</span><span class="p">(</span><span class="dl">"</span><span class="s2">should return an order given there is AN order for the provided order id</span><span class="dl">"</span><span class="p">,</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">orderId</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">order-100</span><span class="dl">"</span><span class="p">;</span>
    
    <span class="k">await</span> <span class="nx">OrderRepositoryFixture</span><span class="p">.</span><span class="nx">deleteAnOrder</span><span class="p">(</span><span class="nx">orderId</span><span class="p">);</span> <span class="c1">//delete an existing order</span>
    <span class="k">await</span> <span class="nx">OrderRepositoryFixture</span><span class="p">.</span><span class="nx">createAn</span><span class="p">(</span><span class="k">new</span> <span class="nx">Order</span><span class="p">(</span><span class="nx">orderId</span><span class="p">,</span> <span class="mi">5000</span><span class="p">));</span> <span class="c1">//save an order in dynamo table</span>
    
    <span class="kd">const</span> <span class="nx">order</span> <span class="o">=</span> <span class="k">await</span> <span class="k">new</span> <span class="nx">OrderRepository</span><span class="p">().</span><span class="nx">findAnOrderBy</span><span class="p">(</span><span class="nx">orderId</span><span class="p">);</span> <span class="c1">//find an order by orderId</span>

    <span class="nx">expect</span><span class="p">(</span><span class="nx">order</span><span class="p">.</span><span class="nx">orderId</span><span class="p">).</span><span class="nx">toEqual</span><span class="p">(</span><span class="nx">orderId</span><span class="p">);</span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">order</span><span class="p">.</span><span class="nx">amount</span><span class="p">).</span><span class="nx">toEqual</span><span class="p">(</span><span class="mi">5000</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">test</span><span class="p">(</span><span class="dl">"</span><span class="s2">should NOT return an order given there is NO order for the provided order id</span><span class="dl">"</span><span class="p">,</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">orderId</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">no-order-present-for-this-order-id</span><span class="dl">"</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">order</span> <span class="o">=</span> <span class="k">await</span> <span class="k">new</span> <span class="nx">OrderRepository</span><span class="p">().</span><span class="nx">findAnOrderBy</span><span class="p">(</span><span class="nx">orderId</span><span class="p">);</span>

    <span class="nx">expect</span><span class="p">(</span><span class="nx">order</span><span class="p">).</span><span class="nx">toBeNull</span><span class="p">();</span>
<span class="p">});</span>

<span class="kd">class</span> <span class="nx">OrderRepositoryFixture</span> <span class="p">{</span>
    <span class="k">static</span> <span class="k">async</span> <span class="nx">createAn</span><span class="p">(</span><span class="nx">order</span><span class="p">:</span> <span class="nx">Order</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">item</span><span class="p">:</span> <span class="nx">PutItemInput</span> <span class="o">=</span> <span class="p">{</span>
            <span class="na">TableName</span><span class="p">:</span> <span class="dl">"</span><span class="s2">orders</span><span class="dl">"</span><span class="p">,</span> <span class="c1">//table name</span>
            <span class="na">Item</span><span class="p">:</span> <span class="p">{</span>
                <span class="dl">"</span><span class="s2">orderId</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="na">S</span><span class="p">:</span> <span class="nx">order</span><span class="p">.</span><span class="nx">orderId</span> <span class="c1">//STRING orderId</span>
                <span class="p">},</span>
                <span class="dl">"</span><span class="s2">amount</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="na">N</span><span class="p">:</span> <span class="nx">order</span><span class="p">.</span><span class="nx">amount</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span> <span class="c1">//NUMERIC amount</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">};</span>
        <span class="k">await</span> <span class="nx">dynamoDb</span><span class="p">.</span><span class="nx">putItem</span><span class="p">(</span><span class="nx">item</span><span class="p">).</span><span class="nx">promise</span><span class="p">();</span> <span class="c1">//save the order</span>
    <span class="p">}</span>
    <span class="k">static</span> <span class="k">async</span> <span class="nx">deleteAnOrder</span><span class="p">(</span><span class="nx">orderId</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">item</span><span class="p">:</span> <span class="nx">DeleteItemInput</span> <span class="o">=</span> <span class="p">{</span>
            <span class="na">TableName</span><span class="p">:</span> <span class="dl">"</span><span class="s2">orders</span><span class="dl">"</span><span class="p">,</span>
            <span class="na">Key</span><span class="p">:</span> <span class="p">{</span>
                <span class="dl">"</span><span class="s2">orderId</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="na">S</span><span class="p">:</span> <span class="nx">orderId</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">};</span>
        <span class="k">await</span> <span class="nx">dynamoDb</span><span class="p">.</span><span class="nx">deleteItem</span><span class="p">(</span><span class="nx">item</span><span class="p">).</span><span class="nx">promise</span><span class="p">();</span> <span class="c1">//delete the order</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>
<p><!-- /wp:code --></p>
<p><!-- wp:paragraph --></p>
<p>That's it run all the tests <code>npm t</code> and see them pass 😁</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading {"level":4} --></p>
<h4>Connecting the dots</h4>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>We have been able test our repository against DynamoDB service running in LocalStack. What we want to do next is - </p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:list {"ordered":true} --></p>
<ol>
<li>Deploy lambda function code against lambda function service in LocalStack</li>
<li>Create Rest Api backed by lambda function in LocalStack</li>
<li>Adding integration tests to send an http request against the Api Gateway</li>
</ol>
<p><!-- /wp:list --></p>
<p><!-- wp:paragraph --></p>
<p>Let's start.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p><strong>Step 6: Deploy lambda function code</strong></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>In order to deploy the lambda function code, we need to build the code, archive it, upload the archive on S3 service running inside LocalStack and update CloudFormation template to create the lambda function by referring to the S3 bucket.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Let's archive the code, create an S3 bucket and upload the archive on S3 service.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:code --></p>
<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"localstack:down"</span><span class="p">:</span><span class="w"> </span><span class="s2">"docker-compose -f test/docker-compose.yml down"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"localstack:up"</span><span class="p">:</span><span class="w"> </span><span class="s2">"docker-compose -f test/docker-compose.yml up -d"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"delay"</span><span class="p">:</span><span class="w"> </span><span class="s2">"sleep 20"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"localstack:create-infra"</span><span class="p">:</span><span class="w"> </span><span class="s2">"cd test/infra &amp;&amp; ./init.sh"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"archive"</span><span class="p">:</span><span class="w"> </span><span class="s2">"cd dist/ &amp;&amp; zip -r ../serverless-order-service.zip ."</span><span class="p">,</span><span class="w">
    </span><span class="nl">"pretest"</span><span class="p">:</span><span class="w"> </span><span class="s2">"npm run build &amp;&amp; npm run archive &amp;&amp; npm run localstack:down &amp;&amp; npm run localstack:up &amp;&amp; npm run delay &amp;&amp; npm run localstack:create-infra"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"test"</span><span class="p">:</span><span class="w"> </span><span class="s2">"jest test/**"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"build"</span><span class="p">:</span><span class="w"> </span><span class="s2">"tsc"</span><span class="w">
</span><span class="p">}</span></code></pre></figure>
<p><!-- /wp:code --></p>
<p><!-- wp:paragraph --></p>
<p>Following events happens as a part of pretest step –</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:list --></p>
<ul>
<li>Code gets built using <code>npm run build</code></li>
<li>Distribution gets archived using <code>npm run archive</code></li>
<li>LocalStack docker container gets stopped using <code>npm run localstack:down</code></li>
<li>LocalStack docker container starts using <code>npm run localstack:up</code></li>
<li>Some delay gets introduced using <code>npm run delay</code></li>
<li>CloudFormation template gets deployed against LocalStack using <code>npm run localstack:create-infra</code></li>
</ul>
<p><!-- /wp:list --></p>
<p><!-- wp:paragraph --></p>
<p>package.json now runs <code>build</code> and <code>archive</code> as a part of <code>pretest</code> step. <code>archive</code> simply creates a zip file of the built code which is ready to be uploaded on an S3 bucket. localstack:create-infra now runs init.sh which delegates the job of creating a bucket, uploading the archive and deploying the infra to different scripts (we shall see it soon).</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Let's see the commands to create an S3 bucket and upload the archive. These are the same commands which will be executed from one of our shell scripts -</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:code --></p>
<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="o">&gt;</span> aws s3 mb s3://serverless-order-service <span class="nt">--endpoint-url</span> http://localhost:4572

<span class="o">&gt;</span> aws s3 <span class="nb">cp</span> ../../serverless-order-service.zip <span class="se">\</span>
s3://serverless-order-service <span class="nt">--endpoint-url</span> http://localhost:4572</code></pre></figure>
<p><!-- /wp:code --></p>
<p><!-- wp:paragraph --></p>
<p>Let's update CloudFormation template to create lambda resource.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:code --></p>
<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="na">AWSTemplateFormatVersion</span><span class="pi">:</span> <span class="s2">"</span><span class="s">2010-09-09"</span>
<span class="na">Resources</span><span class="pi">:</span>
  <span class="na">OrdersFunction</span><span class="pi">:</span>
    <span class="na">Type</span><span class="pi">:</span> <span class="s">AWS::Lambda::Function</span>
    <span class="na">Properties</span><span class="pi">:</span>
      <span class="na">FunctionName</span><span class="pi">:</span> <span class="s2">"</span><span class="s">order-service-function"</span>
      <span class="na">Runtime</span><span class="pi">:</span> <span class="s2">"</span><span class="s">nodejs10.x"</span>
      <span class="na">Handler</span><span class="pi">:</span> <span class="s2">"</span><span class="s">handler.ordersHandler"</span>
      <span class="na">Code</span><span class="pi">:</span>
        <span class="na">S3Bucket</span><span class="pi">:</span> <span class="s2">"</span><span class="s">serverless-order-service"</span>   <span class="c1">## created earlier</span>
        <span class="na">S3Key</span><span class="pi">:</span> <span class="s2">"</span><span class="s">serverless-order-service.zip"</span>  <span class="c1">## uploaded earlier</span>
        <span class="na">Role</span><span class="pi">:</span> <span class="kt">!GetAtt</span> <span class="s2">"</span><span class="s">OrdersRole.Arn"</span>         <span class="c1">## refer to a dummy role created below</span>

  <span class="na">OrdersRole</span><span class="pi">:</span>
    <span class="na">Type</span><span class="pi">:</span> <span class="s">AWS::IAM::Role</span>                       <span class="c1">## dummy role</span>
    <span class="na">Properties</span><span class="pi">:</span>
      <span class="na">RoleName</span><span class="pi">:</span> <span class="s2">"</span><span class="s">OrdersFunctionRole"</span>
      <span class="na">AssumeRolePolicyDocument</span><span class="pi">:</span>
        <span class="na">Version</span><span class="pi">:</span> <span class="s2">"</span><span class="s">2012-10-17"</span>
        <span class="na">Statement</span><span class="pi">:</span>
          <span class="pi">-</span> <span class="na">Effect</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Allow"</span>
            <span class="na">Action</span><span class="pi">:</span>
              <span class="pi">-</span> <span class="s2">"</span><span class="s">sts:AssumeRole"</span>
            <span class="na">Principal</span><span class="pi">:</span>
              <span class="na">Service</span><span class="pi">:</span>
                <span class="pi">-</span> <span class="s2">"</span><span class="s">lambda.amazonaws.com"</span></code></pre></figure>
<p><!-- /wp:code --></p>
<p><!-- wp:paragraph --></p>
<p>Executing <code>npm t</code> should now create AWS lambda function in LocalStack. We can verify the same -</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:code --></p>
<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="o">&gt;</span> aws lambda list-functions <span class="nt">--endpoint-url</span> http://localhost:4574/

//Output
<span class="o">{</span>
    <span class="s2">"FunctionArn"</span>: <span class="s2">"arn:aws:lambda:us-east-1:000000000000:function:order-service-function"</span>, 
    <span class="s2">"Handler"</span>: <span class="s2">"handler.ordersHandler"</span>, 
    <span class="s2">"Role"</span>: <span class="s2">"test_role"</span>, 
    <span class="s2">"Timeout"</span>: 3, 
    <span class="s2">"Runtime"</span>: <span class="s2">"nodejs10.x"</span>
<span class="o">}</span></code></pre></figure>
<p><!-- /wp:code --></p>
<p><!-- wp:paragraph --></p>
<p>Let's move on to creating a Rest Api.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p><strong>Step 7: Create Rest Api </strong></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>This should be simple, let's update our CloudFormation template to have a Rest Api with <code>/orders/{instanceId}</code> as the resource and a <code>GET</code> method.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:code --></p>
<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="na">AWSTemplateFormatVersion</span><span class="pi">:</span> <span class="s2">"</span><span class="s">2010-09-09"</span>
<span class="na">Resources</span><span class="pi">:</span>
  <span class="c1">## Content Trimmed</span>

  <span class="na">OrdersApiGateway</span><span class="pi">:</span>
    <span class="na">Type</span><span class="pi">:</span> <span class="s">AWS::ApiGateway::RestApi</span> <span class="c1">## create a rest api</span>
    <span class="na">Properties</span><span class="pi">:</span>
      <span class="na">Name</span><span class="pi">:</span> <span class="s2">"</span><span class="s">orders-api"</span>

  <span class="na">OrdersResource</span><span class="pi">:</span>
    <span class="na">Type</span><span class="pi">:</span> <span class="s">AWS::ApiGateway::Resource</span> <span class="c1">## create an "orders" resource</span>
    <span class="na">Properties</span><span class="pi">:</span>
      <span class="na">ParentId</span><span class="pi">:</span> <span class="kt">!GetAtt</span> <span class="s2">"</span><span class="s">OrdersApiGateway.RootResourceId"</span>
      <span class="na">PathPart</span><span class="pi">:</span> <span class="s2">"</span><span class="s">orders"</span>
      <span class="na">RestApiId</span><span class="pi">:</span> <span class="kt">!Ref</span> <span class="s2">"</span><span class="s">OrdersApiGateway"</span>

  <span class="na">OrderIdResource</span><span class="pi">:</span>
    <span class="na">Type</span><span class="pi">:</span> <span class="s">AWS::ApiGateway::Resource</span> <span class="c1">## create an "{orderId}" resource</span>
    <span class="na">Properties</span><span class="pi">:</span>
      <span class="na">ParentId</span><span class="pi">:</span> <span class="kt">!Ref</span> <span class="s2">"</span><span class="s">OrdersResource"</span>
      <span class="na">PathPart</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{orderId}"</span>
      <span class="na">RestApiId</span><span class="pi">:</span> <span class="kt">!Ref</span> <span class="s2">"</span><span class="s">OrdersApiGateway"</span>

  <span class="na">OrdersGetMethod</span><span class="pi">:</span>
    <span class="na">Type</span><span class="pi">:</span> <span class="s">AWS::ApiGateway::Method</span> <span class="c1">## create a "GET" method and integrate with lambda function</span>
    <span class="na">Properties</span><span class="pi">:</span>
      <span class="na">HttpMethod</span><span class="pi">:</span> <span class="s2">"</span><span class="s">GET"</span>
      <span class="na">AuthorizationType</span><span class="pi">:</span> <span class="s2">"</span><span class="s">NONE"</span>
      <span class="na">RestApiId</span><span class="pi">:</span> <span class="kt">!Ref</span> <span class="s2">"</span><span class="s">OrdersApiGateway"</span>
      <span class="na">ResourceId</span><span class="pi">:</span> <span class="kt">!Ref</span> <span class="s2">"</span><span class="s">OrderIdResource"</span>
      <span class="na">Integration</span><span class="pi">:</span>
        <span class="na">IntegrationHttpMethod</span><span class="pi">:</span> <span class="s2">"</span><span class="s">POST"</span>
        <span class="na">Type</span><span class="pi">:</span> <span class="s2">"</span><span class="s">AWS_PROXY"</span>
        <span class="na">Uri</span><span class="pi">:</span>
          <span class="s">Fn::Join:</span>
            <span class="s">- ""</span>
            <span class="s">- - "arn:"</span>
              <span class="s">- "aws"</span>
              <span class="s">- ":apigateway:"</span>
              <span class="s">- Ref</span><span class="err">:</span> <span class="s">AWS::Region</span>
              <span class="s">- :lambda:path/2015-03-31/functions/</span>
              <span class="s">- Fn::GetAtt:</span>
                  <span class="s">- OrdersFunction</span>
                  <span class="s">- Arn</span>
                  <span class="s">- /invocations</span></code></pre></figure>
<p><!-- /wp:code --></p>
<p><!-- wp:paragraph --></p>
<p>Executing <code>npm t</code> should now create Rest Api in LocalStack. We can verify the same -</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:code --></p>
<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="o">&gt;</span> aws apigateway get-rest-apis <span class="se">\</span>
<span class="nt">--query</span> <span class="s2">"items[?name=='orders-api'].id"</span> <span class="se">\</span>
<span class="nt">--output</span> text <span class="nt">--region</span> us-east-1 <span class="se">\</span>
<span class="nt">--endpoint-url</span><span class="o">=</span>http://localhost:4567

//Should print Api Id</code></pre></figure>
<p><!-- /wp:code --></p>
<p><!-- wp:paragraph --></p>
<p><strong>Step 8: Adding Integration Test for the application</strong></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>In order to write this integration test we should be sending an http request to an endpoint exposed by Api Gateway inside LocalStack. This endpoint with LocalStack looks like -<br /><em>http://localhost:4567/restapis/&lt;&lt;Rest Api Id&gt;&gt;/test/_user_request_/orders/&lt;&lt;Order Id&gt;&gt;</em></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>This means we need a way to get the rest api id that was created as a part of deployment of CloudFormation template. We will add <code>aws apigateway get-rest-apis</code> command as a part of a script which will be executed from <code>init.sh</code>. This command will write the rest api id into a file which will be read by our integration test.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:code --></p>
<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="c">#!/bin/sh</span>

aws apigateway get-rest-apis <span class="se">\</span>
<span class="nt">--query</span> <span class="s2">"items[?name=='orders-api'].id"</span> <span class="se">\</span>
<span class="nt">--output</span> text <span class="nt">--region</span> us-east-1 <span class="se">\</span>
<span class="nt">--endpoint-url</span><span class="o">=</span>http://localhost:4567 <span class="o">&gt;</span> rest_api_id</code></pre></figure>
<p><!-- /wp:code --></p>
<p><!-- wp:paragraph --></p>
<p>This is how our init.sh looks now -</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:code --></p>
<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="c">#!/bin/sh</span>

./createBucket.sh                       //creates a bucket
./package.sh                            //copies the archive
./deploy.sh                             //deploys the cloudformation
./outputRestApiId.sh                    //logs the rest api <span class="nb">id </span>to a file</code></pre></figure>
<p><!-- /wp:code --></p>
<p><!-- wp:paragraph --></p>
<p>Now, it is the time to add integration test.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:code --></p>
<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript"><span class="k">import</span> <span class="p">{</span><span class="nx">OrderRepositoryFixture</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./fixture/OrderRepositoryFixture</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">Order</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../src/model/Order</span><span class="dl">"</span><span class="p">;</span>

<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">fs</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">fs</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">path</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">path</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">Axios</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">axios</span><span class="dl">"</span><span class="p">;</span> <span class="c1">//add axios as dev-dependency</span>

<span class="kd">let</span> <span class="nx">apiId</span> <span class="o">=</span> <span class="dl">""</span><span class="p">;</span>

<span class="nx">beforeEach</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="c1">//read rest api id</span>
    <span class="nx">apiId</span> <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="dl">"</span><span class="s2">test/infra/rest_api_id</span><span class="dl">"</span><span class="p">),</span> <span class="dl">"</span><span class="s2">utf8</span><span class="dl">"</span><span class="p">).</span><span class="nx">trim</span><span class="p">();</span>
<span class="p">});</span>

<span class="nx">test</span><span class="p">(</span><span class="dl">"</span><span class="s2">should return an order given there is AN order for the provided order id</span><span class="dl">"</span><span class="p">,</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>

    <span class="kd">const</span> <span class="nx">orderId</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">order-500</span><span class="dl">"</span><span class="p">;</span>

    <span class="k">await</span> <span class="nx">OrderRepositoryFixture</span><span class="p">.</span><span class="nx">deleteAnOrder</span><span class="p">(</span><span class="nx">orderId</span><span class="p">);</span> <span class="c1">//delete an existing order</span>
    <span class="k">await</span> <span class="nx">OrderRepositoryFixture</span><span class="p">.</span><span class="nx">createAn</span><span class="p">(</span><span class="k">new</span> <span class="nx">Order</span><span class="p">(</span><span class="nx">orderId</span><span class="p">,</span> <span class="mi">4000</span><span class="p">));</span> <span class="c1">//save an new order</span>

    <span class="c1">//make an API call</span>
    <span class="kd">const</span> <span class="nx">apiUrl</span> <span class="o">=</span> <span class="s2">`http://localhost:4567/restapis/</span><span class="p">${</span><span class="nx">apiId</span><span class="p">}</span><span class="s2">/test/_user_request_/orders/</span><span class="p">${</span><span class="nx">orderId</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">Axios</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="nx">apiUrl</span><span class="p">);</span>

    <span class="c1">//assert on the response status and the content</span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">status</span><span class="p">).</span><span class="nx">toEqual</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">data</span><span class="p">).</span><span class="nx">toEqual</span><span class="p">({</span>
        <span class="dl">"</span><span class="s2">orderId</span><span class="dl">"</span><span class="p">:</span> <span class="nx">orderId</span><span class="p">,</span>
        <span class="dl">"</span><span class="s2">amount</span><span class="dl">"</span><span class="p">:</span> <span class="mi">4000</span>
    <span class="p">});</span>
<span class="p">},</span> <span class="mi">20000</span><span class="p">);</span></code></pre></figure>
<p><!-- /wp:code --></p>
<p><!-- wp:paragraph --></p>
<p>Before the test can be run, we will have to make one change in <code>DynamoDbConfiguration</code>. It returns a <em>dynamoDbClient</em> which connects to dynamodb running on <code>localhost:4569</code>. This is not true anymore because lambda is running inside a docker container and for that lambda function "localhost:4569" will refer to the port 4569 on docker's IP. What we need is the port 4569 with the IP of host machine. So, let's make this change. This is how updated DynamoDbConfiguration will look like -</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:code --></p>
<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript"><span class="k">import</span> <span class="p">{</span><span class="nx">DynamoDB</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">aws-sdk</span><span class="dl">"</span>

<span class="kd">const</span> <span class="nx">executionEnvironment</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">defaultExecutionEnvironment</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">local</span><span class="dl">"</span><span class="p">;</span>
    <span class="k">return</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">ExecutionEnvironment</span> <span class="o">||</span> <span class="nx">defaultExecutionEnvironment</span><span class="p">;</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">isExecutionEnvironmentLocal</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">executionEnvironment</span><span class="p">()</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">local</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">dynamoDbClient</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">isExecutionEnvironmentLocal</span><span class="p">())</span> <span class="p">{</span>
        <span class="cm">/** LOCALSTACK_HOSTNAME:
        *     for accessing the hostname from inside the container
        *   localhost: 
        *     for running repository integration tests which run on host machine
        **/</span>
        <span class="kd">const</span> <span class="nx">dynamoHost</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">LOCALSTACK_HOSTNAME</span> <span class="o">||</span> <span class="dl">"</span><span class="s2">localhost</span><span class="dl">"</span><span class="p">;</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nx">DynamoDB</span><span class="p">({</span>
            <span class="dl">"</span><span class="s2">region</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">us-east-1</span><span class="dl">"</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">endpoint</span><span class="dl">"</span><span class="p">:</span><span class="s2">`http://</span><span class="p">${</span><span class="nx">dynamoHost</span><span class="p">}</span><span class="s2">:4569`</span>
        <span class="p">});</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nx">DynamoDB</span><span class="p">({</span>
            <span class="dl">"</span><span class="s2">region</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">ap-south-1</span><span class="dl">"</span>
        <span class="p">});</span>
    <span class="p">}</span>
<span class="p">};</span></code></pre></figure>
<p><!-- /wp:code --></p>
<p><!-- wp:paragraph --></p>
<p>LocalStack exposes an environment variable LOCALSTACK_HOSTNAME which is available inside docker process that refers to the host machine.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>That's it run all the tests <code>npm t</code> and see them pass 😁</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading {"level":4} --></p>
<h4>Summary</h4>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>We used LocalStack to test our application. Everything is available <a href="https://github.com/aws-articles/serverless-order-service.git">here</a>.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Here is a quick glimpse of the sequence of events that happen when tests are executed.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":1030,"sizeSlug":"large","className":"is-style-default"} --></p>
<figure class="wp-block-image size-large is-style-default"><img src="/assets/img/pexels/serverless-localstack.png" alt="" class="wp-image-1030" /></figure>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph --></p>
<p>Let's move on to our last <a href="/concluding-serverless-journey">article</a> and see everything in action on AWS account.</p>
<p><!-- /wp:paragraph --></p>]]></content><author><name>Sarthak Makhija</name></author><category term="Serverless" /><category term="AWS Lambda" /><category term="Serverless" /><summary type="html"><![CDATA[It is time to test our Serverless journey which started with a web application that involved AWS lambda, AWS API Gateway and AWS DynamoDB. By the end of this article we should be confident that our application works as it is supposed to. Let's introduce LocalStack.]]></summary></entry><entry><title type="html">Beginning Serverless Journey</title><link href="https://tech-lessons.in/beginning-serverless-journey/" rel="alternate" type="text/html" title="Beginning Serverless Journey" /><published>2020-03-10T00:00:00+05:30</published><updated>2020-03-10T00:00:00+05:30</updated><id>https://tech-lessons.in/beginning-serverless-journey</id><content type="html" xml:base="https://tech-lessons.in/beginning-serverless-journey/"><![CDATA[<p><!-- wp:quote --></p>
<blockquote class="wp-block-quote"><p>Serverless is a paradigm which lays its foundations on the fact that "We don't have to provision and manage servers". </p>
<p>This article series explores various aspects involved in a serverless application lifecycle including - development, testing and deployment.</p>
<p>Our serverless journey which starts from building to deploying an application will be using multiple serverless components including AWS Lambda, AWS API Gateway, AWS DynamoDB, LocalStack and AWS CDK.</p>
</blockquote>
<p><!-- /wp:quote --></p>
<p><!-- wp:paragraph --></p>
<p>Let's deep dive step by step into what it takes to build a Serverless application.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading {"level":4} --></p>
<h4>Building a Serverless application</h4>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>Let's assume a hypothetical "<em>Order Service</em>" that allows creation of an order and its retrieval by id.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>As a part of this article we will be building just one part of this service which will expose a REST API to allow users to "<em>find an order</em>" by "<em>orderId</em>".  Below diagram highlights different AWS components involved in finding an order by its id.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"align":"center","id":1126,"sizeSlug":"large","className":"is-style-default"} --></p>
<div class="wp-block-image is-style-default">
<figure class="aligncenter size-large"><img src="/assets/img/pexels/serverless-application.png" alt="" class="wp-image-1126" /></figure>
</div>
<p><!-- /wp:image --></p>
<p><!-- wp:paragraph --></p>
<p>We will be using TypeScript for writing our Serverless application. Why Typescript? For a few reasons - </p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:list --></p>
<ul>
<li>Small cold start time</li>
<li>Supports static typing and type inference</li>
<li>Existing Javascript libraries can be used with Typescript</li>
</ul>
<p><!-- /wp:list --></p>
<p><!-- wp:paragraph --></p>
<p>So, let's start building our application. </p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading {"level":4} --></p>
<h4>Step 1: Setting up the project</h4>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>Let's quickly setup our project -</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:list --></p>
<ul>
<li>Install typescript globally by executing <code>npm install typescript -g</code></li>
<li>Create a directory named <code>serverless-order-service</code> representing our project</li>
<li>Execute <code>npm init -y</code> inside our project directory (<code>serverless-order-service</code>)</li>
<li>Add typescript as a dependency by executing <code>npm install typescript --save</code> inside our project directory</li>
</ul>
<p><!-- /wp:list --></p>
<p><!-- wp:paragraph --></p>
<p>As a final step, add <code>tsconfig.json</code> with a very simple configuration as mentioned below -</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:preformatted --></p>
<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript"><span class="p">{</span>
  <span class="dl">"</span><span class="s2">compilerOptions</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
    <span class="dl">"</span><span class="s2">noEmitOnError</span><span class="dl">"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">moduleResolution</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">node</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">module</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">commonjs</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">target</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">es6</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">outDir</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">dist</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">inlineSourceMap</span><span class="dl">"</span><span class="p">:</span> <span class="kc">true</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>
<p><!-- /wp:preformatted --></p>
<p><!-- wp:paragraph --></p>
<p>That should be it. Our project set up is done and we are ready to make our first commit.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading {"level":4} --></p>
<h4>Before we start coding</h4>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>Let's take a moment to think about the overall design of the project. </p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>This application is a classic web application which involves a REST API, a database and an object representing the persistent state of order. With this very small context, I feel it would not be unfair to organise the project in <em>Model-View-Controller</em> fashion which means execution of a user request will involve the following components - </p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"align":"center","id":1041,"sizeSlug":"large"} --></p>
<div class="wp-block-image">
<figure class="aligncenter size-large"><img src="/assets/img/pexels/lambda-flow.png" alt="" class="wp-image-1041" /></figure>
</div>
<p><!-- /wp:image --></p>
<p><!-- wp:heading {"level":4} --></p>
<h4>Step 2: Let's start with lambda handler</h4>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>Lambda handler is a function which will be invoked by <em>AWS Lambda Service</em> in response to an event. An event could be - an object uploaded on an S3 bucket, an event on SQS or an https request via API gateway and many more. In our example a request to an API Gateway will be an event.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Before we start our lambda function let's install type definition for aws-lambda by executing - <code>npm install @types/aws-lambda --save-dev</code> and create a commit.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>After the dependency is installed we are ready to code our handler. Let's put this in a file named <code>handler.ts</code> under <code>src</code> directory.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:code --></p>
<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript"><span class="k">import</span> <span class="p">{</span><span class="nx">APIGatewayEvent</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">aws-lambda</span><span class="dl">"</span><span class="p">;</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">ordersHandler</span> <span class="o">=</span> <span class="k">async</span> <span class="p">(</span><span class="nx">event</span><span class="p">:</span> <span class="nx">APIGatewayEvent</span><span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="kr">any</span><span class="o">&gt;</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="c1">//your code goes here</span>
<span class="p">};</span></code></pre></figure>
<p><!-- /wp:code --></p>
<p><!-- wp:paragraph --></p>
<p>This is the simplest handler function that could be created at this stage. One thing to note is we are using the type <em>APIGatewayEvent</em> imported from <em>"aws-lambda"</em> to get type-safe events as parameter to handler function.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>We want to keep our handler function as thin as possible so we will delegate the request to a controller class which instead of taking <em>APIGatewayEvent</em> will take a domain object that wraps <em>APIGatewayEvent</em>.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>In this example, <em>OrderRequest</em> is that domain object, effectively a wrapper over <em>APIGatewayEvent</em>.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:code --></p>
<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript"><span class="k">import</span> <span class="p">{</span><span class="nx">APIGatewayEvent</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">aws-lambda</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">ordersHandler</span> <span class="o">=</span> <span class="k">async</span> <span class="p">(</span><span class="nx">event</span><span class="p">:</span> <span class="nx">APIGatewayEvent</span><span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="kr">any</span><span class="o">&gt;</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nx">OrderController</span><span class="p">().</span><span class="nx">handle</span><span class="p">(</span><span class="k">new</span> <span class="nx">OrderRequest</span><span class="p">(</span><span class="nx">event</span><span class="p">));</span> <span class="c1">//handler invokes controller</span>
<span class="p">};</span>

<span class="k">export</span> <span class="kd">class</span> <span class="nx">OrderController</span> <span class="p">{</span>
    <span class="nx">handle</span><span class="p">(</span><span class="nx">orderRequest</span><span class="p">:</span> <span class="nx">OrderRequest</span><span class="p">)</span> <span class="p">{</span> <span class="c1">//accepts OrderRequest</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">//domain object which wraps APIGatewayEvent</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">OrderRequest</span> <span class="p">{</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="k">private</span> <span class="k">readonly</span> <span class="nx">event</span><span class="p">:</span> <span class="nx">APIGatewayEvent</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>
<p><!-- /wp:code --></p>
<p><!-- wp:paragraph --></p>
<p>Let's move OrderController and OrderRequest classes to <em>controller</em> and <em>model</em> packages (or directories) respectively and invoke OrderController from handler. This is how the handler function will look like after the classes have been moved.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:code --></p>
<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript"><span class="k">import</span> <span class="p">{</span><span class="nx">APIGatewayEvent</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">aws-lambda</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">OrderRequest</span><span class="p">}</span>    <span class="k">from</span> <span class="dl">"</span><span class="s2">./model/OrderRequest</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">OrderController</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./controller/OrderController</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">ordersHandler</span> <span class="o">=</span> <span class="k">async</span> <span class="p">(</span><span class="nx">event</span><span class="p">:</span> <span class="nx">APIGatewayEvent</span><span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="kr">any</span><span class="o">&gt;</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nx">OrderController</span><span class="p">().</span><span class="nx">handle</span><span class="p">(</span><span class="k">new</span> <span class="nx">OrderRequest</span><span class="p">(</span><span class="nx">event</span><span class="p">));</span>
<span class="p">};</span></code></pre></figure>
<p><!-- /wp:code --></p>
<p><!-- wp:paragraph --></p>
<p>I think we are ready to make our next commit. I know we haven't written any unit tests but as far as this article is concerned, we will write unit tests before we start the next one.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading {"level":4} --></p>
<h4>Step 3: Let's jump into controller</h4>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>Controller is a class which will handle the incoming request and return an appropriate response. By this definition, controller will be expected to accept an OrderRequest and find an order by its id.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:code --></p>
<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript"><span class="k">import</span> <span class="p">{</span><span class="nx">OrderRequest</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../model/OrderRequest</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">class</span> <span class="nx">OrderController</span> <span class="p">{</span>

    <span class="nx">handle</span><span class="p">(</span><span class="nx">orderRequest</span><span class="p">:</span> <span class="nx">OrderRequest</span><span class="p">)</span> <span class="p">{</span>
       <span class="k">if</span> <span class="p">(</span><span class="nx">orderRequest</span><span class="p">.</span><span class="nx">isAGetOrder</span><span class="p">())</span> <span class="p">{</span> <span class="c1">//if the request is for finding an order</span>
         <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">findAnOrderBy</span><span class="p">(</span><span class="nx">orderRequest</span><span class="p">.</span><span class="nx">orderId</span><span class="p">());</span> <span class="c1">//find an order by its id</span>
       <span class="p">}</span>
       <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="nx">findAnOrderBy</span><span class="p">(</span><span class="nx">id</span><span class="p">:</span> <span class="kr">string</span><span class="p">):</span> <span class="nx">Order</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">null</span><span class="p">;</span> <span class="c1">//fake implementation</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">export</span> <span class="kd">class</span> <span class="nx">Order</span> <span class="p">{</span>
<span class="p">}</span></code></pre></figure>
<p><!-- /wp:code --></p>
<p><!-- wp:paragraph --></p>
<p>Few quick observations - </p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:list --></p>
<ul>
<li>OrderRequest is the domain object which encapsulates APIGatewayEvent and provides domain methods like orderId(), isAGetOrder() without exposing <em>APIGatewayEvent</em></li>
<li>Currently orderId() and isAGetOrder() methods of OrderRequest return fixed (or fake) values</li>
</ul>
<p><!-- /wp:list --></p>
<p><!-- wp:paragraph --></p>
<p>Let's make a few quick changes in OrderController -</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:list --></p>
<ul>
<li>Move Order class into model package</li>
<li>Invoke Service method to find an order by its id</li>
</ul>
<p><!-- /wp:list --></p>
<p><!-- wp:paragraph --></p>
<p>This is how different classes look at this stage.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript"><span class="c1">//OrderController.ts</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">OrderRequest</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../model/OrderRequest</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">Order</span><span class="p">}</span>        <span class="k">from</span> <span class="dl">"</span><span class="s2">../model/Order</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">OrderService</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../service/OrderService</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">class</span> <span class="nx">OrderController</span> <span class="p">{</span>
    <span class="k">private</span> <span class="nx">orderService</span><span class="p">:</span> <span class="nx">OrderService</span><span class="p">;</span>

    <span class="kd">constructor</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">orderService</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">OrderService</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="nx">handle</span><span class="p">(</span><span class="nx">orderRequest</span><span class="p">:</span> <span class="nx">OrderRequest</span><span class="p">)</span> <span class="p">{</span>
       <span class="k">if</span> <span class="p">(</span><span class="nx">orderRequest</span><span class="p">.</span><span class="nx">isAGetOrder</span><span class="p">())</span> <span class="p">{</span>
         <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">findAnOrderBy</span><span class="p">(</span><span class="nx">orderRequest</span><span class="p">.</span><span class="nx">orderId</span><span class="p">())</span>
       <span class="p">}</span>
       <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="nx">findAnOrderBy</span><span class="p">(</span><span class="nx">id</span><span class="p">:</span> <span class="kr">string</span><span class="p">):</span> <span class="nx">Order</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">orderService</span><span class="p">.</span><span class="nx">findAnOrderBy</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span> <span class="c1">//controller invokes service to find an order by its id</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">//OrderRequest.ts</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">APIGatewayEvent</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">aws-lambda</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">class</span> <span class="nx">OrderRequest</span> <span class="p">{</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="k">private</span> <span class="k">readonly</span> <span class="nx">event</span><span class="p">:</span> <span class="nx">APIGatewayEvent</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">}</span>

    <span class="nx">isAGetOrder</span><span class="p">():</span> <span class="nx">boolean</span> <span class="p">{</span>
       <span class="k">return</span> <span class="kc">true</span><span class="p">;</span> <span class="c1">//fake implementation</span>
    <span class="p">}</span>
    <span class="nx">orderId</span><span class="p">():</span> <span class="kr">string</span> <span class="p">{</span>
        <span class="k">return</span> <span class="dl">""</span><span class="p">;</span> <span class="c1">//fake implementation</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">//OrderService.ts</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">OrderService</span> <span class="p">{</span>

    <span class="nx">findAnOrderBy</span><span class="p">(</span><span class="nx">id</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">null</span><span class="p">;</span> <span class="c1">//fake implementation</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>
<p><!-- /wp:code --></p>
<p><!-- wp:heading {"level":4} --></p>
<h4>Step 4: Let's jump into service</h4>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>Service layer will interact with repository to find an order by id. It doesn't look like service layer is really needed for this example, but let's proceed with it -</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:code --></p>
<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript"><span class="k">export</span> <span class="kd">class</span> <span class="nx">OrderService</span> <span class="p">{</span>
    <span class="k">private</span> <span class="nx">repository</span><span class="p">:</span> <span class="nx">OrderRepository</span><span class="p">;</span>

    <span class="kd">constructor</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">repository</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">OrderRepository</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="nx">findAnOrderBy</span><span class="p">(</span><span class="nx">id</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">repository</span><span class="p">.</span><span class="nx">findAnOrderBy</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span> <span class="c1">//service invokes repository to find an order by its id</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">export</span> <span class="kd">class</span> <span class="nx">OrderRepository</span> <span class="p">{</span>
    <span class="nx">findAnOrderBy</span><span class="p">(</span><span class="nx">id</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">null</span><span class="p">;</span> <span class="c1">//fake implementation</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>
<p><!-- /wp:code --></p>
<p><!-- wp:paragraph --></p>
<p>Let's move OrderRepository into repository package.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading {"level":4} --></p>
<h4>Step 5: Let's jump into repository</h4>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>Repository will interact with our database which in this example is a DynamoDB and fetch an order by its id. Let's assume a table named "<em>orders</em>" with "<em>orderId</em>" as the HASH key and an attribute named "amount".</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>We will be using "<em>aws-sdk</em>" for querying DynamoDB. "aws-sdk" is a dependency which is available in the runtime environment of lambda which means this dependency can be added as a "<em>devDependency</em>".</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>So, let's add it as a "devDependency" by executing <code>npm install aws-sdk --save-dev</code>. Let's also add type definitions for aws-sdk by executing <code>npm install @types/aws-sdk --save-dev</code>.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Now we are ready to query "orders" table.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:code --></p>
<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript"><span class="k">import</span> <span class="p">{</span><span class="nx">DynamoDB</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">aws-sdk</span><span class="dl">"</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">GetItemInput</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">aws-sdk/clients/dynamodb</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">Order</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../model/Order</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">dynamoDb</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">DynamoDB</span><span class="p">({</span>
    <span class="dl">"</span><span class="s2">region</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">ap-south-1</span><span class="dl">"</span>
<span class="p">});</span>

<span class="k">export</span> <span class="kd">class</span> <span class="nx">OrderRepository</span> <span class="p">{</span>

    <span class="k">async</span> <span class="nx">findAnOrderBy</span><span class="p">(</span><span class="nx">id</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">getItemInputOptions</span><span class="p">:</span> <span class="nx">GetItemInput</span> <span class="o">=</span> <span class="p">{</span>
            <span class="na">TableName</span><span class="p">:</span> <span class="dl">"</span><span class="s2">orders</span><span class="dl">"</span><span class="p">,</span> <span class="c1">//table name</span>
            <span class="na">Key</span><span class="p">:</span> <span class="p">{</span>
                <span class="dl">"</span><span class="s2">orderId</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span><span class="na">S</span><span class="p">:</span> <span class="nx">id</span><span class="p">}</span> <span class="c1">//query against orderId attribute of order item</span>
            <span class="p">}</span>
        <span class="p">};</span>
        <span class="kd">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">dynamoDb</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="nx">getItemInputOptions</span><span class="p">).</span><span class="nx">promise</span><span class="p">();</span> <span class="c1">//get a dynamo item by passing its id</span>
        <span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">Item</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>
<p><!-- /wp:code --></p>
<p><!-- wp:paragraph --></p>
<p>Few quick observations - </p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:list --></p>
<ul>
<li>We have hard-coded the region and table name, which we might want to fetch from configuration / properties for below mentioned reasons -
<ul>
<li>if <em>region</em> is different for actual deployment and integration testing (using localstack)</li>
<li> if there are multiple deployment environments and dynamo table name is different for each environment
<ul>
<li>With DynamoDB lowest level of abstraction is a table, hence, we might need different table name for each environment</li>
</ul>
</li>
</ul>
</li>
<li>Method name and return type of the method do not go hand-in-hand. We expect this method to return an "<em>order</em>" but this method seems to be returning some type specified by <em>"response.Item"</em></li>
</ul>
<p><!-- /wp:list --></p>
<p><!-- wp:paragraph --></p>
<p>Let's quickly make a change to return <em>Order instead of response.Item. </em></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:code --></p>
<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript"><span class="k">import</span> <span class="p">{</span><span class="nx">DynamoDB</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">aws-sdk</span><span class="dl">"</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">GetItemInput</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">aws-sdk/clients/dynamodb</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">Order</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../model/Order</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">dynamoDb</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">DynamoDB</span><span class="p">({</span>
    <span class="dl">"</span><span class="s2">region</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">ap-south-1</span><span class="dl">"</span>
<span class="p">});</span>

<span class="k">export</span> <span class="kd">class</span> <span class="nx">OrderRepository</span> <span class="p">{</span>

    <span class="k">async</span> <span class="nx">findAnOrderBy</span><span class="p">(</span><span class="nx">id</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">getItemInputOptions</span><span class="p">:</span> <span class="nx">GetItemInput</span> <span class="o">=</span> <span class="p">{</span>
            <span class="na">TableName</span><span class="p">:</span> <span class="dl">"</span><span class="s2">orders</span><span class="dl">"</span><span class="p">,</span> <span class="c1">//table name</span>
            <span class="na">Key</span><span class="p">:</span> <span class="p">{</span>
                <span class="dl">"</span><span class="s2">orderId</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span><span class="na">S</span><span class="p">:</span> <span class="nx">id</span><span class="p">}</span> <span class="c1">//query against orderId attribute of order item</span>
            <span class="p">}</span>
        <span class="p">};</span>
        <span class="kd">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">dynamoDb</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="nx">getItemInputOptions</span><span class="p">).</span><span class="nx">promise</span><span class="p">();</span> <span class="c1">//get a dynamo item by passing its id</span>
        <span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">Item</span> <span class="p">?</span> <span class="nx">Order</span><span class="p">.</span><span class="k">from</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">Item</span><span class="p">)</span> <span class="p">:</span> <span class="kc">null</span><span class="p">;</span>  <span class="c1">//map dynamo item to Order</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>
<p><!-- /wp:code --></p>
<p><!-- wp:paragraph --></p>
<p>and this is how Order.ts looks like - </p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:code --></p>
<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript"><span class="k">import</span> <span class="p">{</span><span class="nx">DocumentClient</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">aws-sdk/clients/dynamodb</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">class</span> <span class="nx">Order</span> <span class="p">{</span>
    <span class="k">static</span> <span class="k">from</span><span class="p">(</span><span class="nx">item</span><span class="p">:</span> <span class="nx">DocumentClient</span><span class="p">.</span><span class="nx">AttributeMap</span><span class="p">):</span> <span class="nx">Order</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">null</span><span class="p">;</span> <span class="c1">//fake implementation</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>
<p><!-- /wp:code --></p>
<p><!-- wp:paragraph --></p>
<p>This completes our repository. We still have some open items. Let's take them one by one - </p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:list --></p>
<ul>
<li>Pending implementation of <em>from()</em> in <em>Order</em></li>
<li>Pending implementation of <em>orderId()</em> in <em>OrderRequest</em></li>
<li>Pending changes relating to async/await in controller, service and handler</li>
</ul>
<p><!-- /wp:list --></p>
<p><!-- wp:heading {"level":4} --></p>
<h4>Step 6: Finishing Order class</h4>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>Order class provides a static method which accepts and instance of DocumentClient.AttributeMap and returns an instance of Order consisting of orderId and amount.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:code --></p>
<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript"><span class="k">import</span> <span class="p">{</span><span class="nx">DocumentClient</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">aws-sdk/clients/dynamodb</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">class</span> <span class="nx">Order</span> <span class="p">{</span>  

    <span class="k">static</span> <span class="k">from</span><span class="p">(</span><span class="nx">item</span><span class="p">:</span> <span class="nx">DocumentClient</span><span class="p">.</span><span class="nx">AttributeMap</span><span class="p">):</span> <span class="nx">Order</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nx">Order</span><span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">orderId</span><span class="p">.</span><span class="nx">S</span><span class="p">,</span> <span class="nb">Number</span><span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">amount</span><span class="p">.</span><span class="nx">N</span><span class="p">));</span> <span class="c1">//create an instance of Order from an instance of AttributeMap</span>
    <span class="p">}</span>
    <span class="k">private</span> <span class="kd">constructor</span><span class="p">(</span><span class="k">private</span> <span class="k">readonly</span> <span class="nx">orderId</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span>
                        <span class="k">private</span> <span class="k">readonly</span> <span class="nx">amount</span><span class="p">:</span> <span class="kr">number</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>
<p><!-- /wp:code --></p>
<p><!-- wp:paragraph --></p>
<p><code>AttributeMap within aws-sdk </code>is defined as -</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:code --></p>
<pre class="wp-block-code"><code>export type AttributeMap = {[key: string]: AttributeValue};</code></pre>
<p><!-- /wp:code --></p>
<p><!-- wp:paragraph --></p>
<p>and AttributeValue is an interface which is defined as -</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:code --></p>
<pre class="wp-block-code"><code>export interface AttributeValue {
    S?: StringAttributeValue;
    N?: NumberAttributeValue;
  .....
}</code></pre>
<p><!-- /wp:code --></p>
<p><!-- wp:paragraph --></p>
<p>Hence, <code>item.orderId</code> gives us an instance of <code>AttributeValue</code> and then we use <code>.S or .N</code> to get the corresponding value</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading {"level":4} --></p>
<h4>Step 7: Finishing OrderRequest class</h4>
<p><!-- /wp:heading --></p>
<p><!-- wp:list --></p>
<ul>
<li>isAGetOrder() should return TRUE given a GET request beginning with /orders as the path part</li>
<li>orderId() should return the value of pathParameter "orderId"</li>
</ul>
<p><!-- /wp:list --></p>
<p><!-- wp:code --></p>
<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript"><span class="k">import</span> <span class="p">{</span><span class="nx">APIGatewayEvent</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">aws-lambda</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">class</span> <span class="nx">OrderRequest</span> <span class="p">{</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="k">private</span> <span class="k">readonly</span> <span class="nx">event</span><span class="p">:</span> <span class="nx">APIGatewayEvent</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">}</span>

    <span class="c1">//return true if the request is a GET request, with path starting from /orders and containing a path parameter</span>
    <span class="nx">isAGetOrder</span><span class="p">():</span> <span class="nx">boolean</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">event</span><span class="p">.</span><span class="nx">httpMethod</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">GET</span><span class="dl">"</span> <span class="o">&amp;&amp;</span>
               <span class="k">this</span><span class="p">.</span><span class="nx">event</span><span class="p">.</span><span class="nx">path</span><span class="p">.</span><span class="nx">startsWith</span><span class="p">(</span><span class="dl">"</span><span class="s2">/orders</span><span class="dl">"</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
               <span class="k">this</span><span class="p">.</span><span class="nx">event</span><span class="p">.</span><span class="nx">pathParameters</span><span class="p">.</span><span class="nx">orderId</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nx">orderId</span><span class="p">():</span> <span class="kr">string</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">event</span><span class="p">.</span><span class="nx">pathParameters</span><span class="p">.</span><span class="nx">orderId</span><span class="p">;</span> <span class="c1">//order id is passed as path parameter</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>
<p><!-- /wp:code --></p>
<p><!-- wp:heading {"level":4} --></p>
<h4>Step 8: Introducing async/await in service and controller</h4>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>Let's introduce async and await in handler, controller and service.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:code --></p>
<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript"><span class="c1">//handler.ts</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">ordersHandler</span> <span class="o">=</span> <span class="k">async</span> <span class="p">(</span><span class="nx">event</span><span class="p">:</span> <span class="nx">APIGatewayEvent</span><span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="kr">any</span><span class="o">&gt;</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">await</span> <span class="k">new</span> <span class="nx">OrderController</span><span class="p">().</span><span class="nx">handle</span><span class="p">(</span><span class="k">new</span> <span class="nx">OrderRequest</span><span class="p">(</span><span class="nx">event</span><span class="p">));</span>
<span class="p">};</span>

<span class="c1">//OrderController.ts</span>
<span class="k">async</span> <span class="nx">handle</span><span class="p">(</span><span class="nx">orderRequest</span><span class="p">:</span> <span class="nx">OrderRequest</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">orderRequest</span><span class="p">.</span><span class="nx">isAGetOrder</span><span class="p">())</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">findAnOrderBy</span><span class="p">(</span><span class="nx">orderRequest</span><span class="p">.</span><span class="nx">orderId</span><span class="p">())</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">private</span> <span class="k">async</span> <span class="nx">findAnOrderBy</span><span class="p">(</span><span class="nx">id</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">orderService</span><span class="p">.</span><span class="nx">findAnOrderBy</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">//OrderService.ts</span>
<span class="k">async</span> <span class="nx">findAnOrderBy</span><span class="p">(</span><span class="nx">id</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">repository</span><span class="p">.</span><span class="nx">findAnOrderBy</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>
<p><!-- /wp:code --></p>
<p><!-- wp:heading {"level":4} --></p>
<h4>Step 9: Lambda response with API gateway</h4>
<p>When AWS lambda works behind an API gateway, it is expected to return a response in a specific format. This looks like -</p>
<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span><span class="w">
   </span><span class="nl">"statusCode"</span><span class="p">:</span><span class="w"> </span><span class="err">Http</span><span class="w"> </span><span class="err">Status</span><span class="w"> </span><span class="err">Code</span><span class="p">,</span><span class="w">
   </span><span class="nl">"body"</span><span class="p">:</span><span class="w"> </span><span class="err">Response</span><span class="w"> </span><span class="err">body</span><span class="p">,</span><span class="w">
   </span><span class="nl">"headers"</span><span class="p">:</span><span class="w"> </span><span class="err">Response</span><span class="w"> </span><span class="err">headers</span><span class="w">
</span><span class="p">}</span></code></pre></figure>
<p><!-- /wp:code --></p>
<p><!-- wp:paragraph --></p>
<p>It would be great if controller knows the least about this structure. All it should do is return a response with Order object. Let's create an abstraction which takes an object T and knows about the final HTTP response. Let's name this abstraction as <em>Response</em>.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:code --></p>
<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript"><span class="k">export</span> <span class="kd">class</span> <span class="nx">Response</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="k">private</span> <span class="kd">constructor</span><span class="p">(</span><span class="k">readonly</span> <span class="na">status</span><span class="p">:</span> <span class="nx">HttpStatus</span><span class="p">,</span> <span class="k">readonly</span> <span class="nx">body</span><span class="p">?:</span> <span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">}</span>

    <span class="c1">//signifies 200 response</span>
    <span class="k">static</span> <span class="nx">ok</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">(</span><span class="na">body</span><span class="p">:</span> <span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nx">Response</span><span class="p">(</span><span class="nx">HttpStatus</span><span class="p">.</span><span class="nx">OK</span><span class="p">,</span> <span class="nx">body</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="c1">//signifies 404 response</span>
    <span class="k">static</span> <span class="nx">notFound</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nx">Response</span><span class="p">(</span><span class="nx">HttpStatus</span><span class="p">.</span><span class="nx">NOT_FOUND</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">export</span> <span class="kd">class</span> <span class="nx">HttpStatus</span> <span class="p">{</span>
    <span class="k">static</span> <span class="k">readonly</span> <span class="nx">OK</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">200</span><span class="dl">"</span><span class="p">;</span>
    <span class="k">static</span> <span class="k">readonly</span> <span class="nx">NOT_FOUND</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">404</span><span class="dl">"</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>
<p><!-- /wp:code --></p>
<p><!-- wp:paragraph --></p>
<p>With the introduction of Response, following will be the view of some classes - </p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:code --></p>
<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript"><span class="k">import</span> <span class="p">{</span><span class="nx">OrderRequest</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../model/OrderRequest</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">OrderService</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../service/OrderService</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">class</span> <span class="nx">OrderController</span> <span class="p">{</span>
    <span class="k">private</span> <span class="nx">orderService</span><span class="p">:</span> <span class="nx">OrderService</span><span class="p">;</span>

    <span class="kd">constructor</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">orderService</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">OrderService</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="k">async</span> <span class="nx">handle</span><span class="p">(</span><span class="nx">orderRequest</span><span class="p">:</span> <span class="nx">OrderRequest</span><span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">Response</span><span class="o">&lt;</span><span class="nx">Order</span> <span class="o">|</span> <span class="nx">unknown</span><span class="o">&gt;&gt;</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">orderRequest</span><span class="p">.</span><span class="nx">isAGetOrder</span><span class="p">())</span> <span class="p">{</span>
            <span class="kd">const</span> <span class="nx">order</span> <span class="o">=</span> <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">findAnOrderBy</span><span class="p">(</span><span class="nx">orderRequest</span><span class="p">.</span><span class="nx">orderId</span><span class="p">());</span>
            <span class="c1">//return an Ok response if order is found else NotFound</span>
            <span class="k">return</span> <span class="nx">order</span> <span class="o">===</span> <span class="kc">null</span> <span class="p">?</span> <span class="nx">Response</span><span class="p">.</span><span class="nx">notFound</span><span class="p">()</span> <span class="p">:</span> <span class="nx">Response</span><span class="p">.</span><span class="nx">ok</span><span class="o">&lt;</span><span class="nx">Order</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">order</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nx">Response</span><span class="p">.</span><span class="nx">notFound</span><span class="p">();</span> <span class="c1">//return NotFound response</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="k">async</span> <span class="nx">findAnOrderBy</span><span class="p">(</span><span class="nx">id</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">orderService</span><span class="p">.</span><span class="nx">findAnOrderBy</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">export</span> <span class="kd">class</span> <span class="nx">Response</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="k">private</span> <span class="kd">constructor</span><span class="p">(</span><span class="k">readonly</span> <span class="na">status</span><span class="p">:</span> <span class="nx">HttpStatus</span><span class="p">,</span> <span class="k">readonly</span> <span class="nx">body</span><span class="p">?:</span> <span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">}</span>

    <span class="k">static</span> <span class="nx">ok</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">(</span><span class="na">body</span><span class="p">:</span> <span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nx">Response</span><span class="p">(</span><span class="nx">HttpStatus</span><span class="p">.</span><span class="nx">OK</span><span class="p">,</span> <span class="nx">body</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">static</span> <span class="nx">notFound</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nx">Response</span><span class="p">(</span><span class="nx">HttpStatus</span><span class="p">.</span><span class="nx">NOT_FOUND</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="kd">get</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">//return a well formed JSON response</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">body</span> <span class="o">===</span> <span class="kc">null</span> <span class="p">?</span> <span class="p">{</span><span class="dl">"</span><span class="s2">statusCode</span><span class="dl">"</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">status</span><span class="p">}</span> <span class="p">:</span> <span class="p">{</span>
            <span class="dl">"</span><span class="s2">statusCode</span><span class="dl">"</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">status</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">body</span><span class="dl">"</span><span class="p">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">body</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">export</span> <span class="kd">class</span> <span class="nx">HttpStatus</span> <span class="p">{</span>
    <span class="k">static</span> <span class="k">readonly</span> <span class="nx">OK</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">200</span><span class="dl">"</span><span class="p">;</span>
    <span class="k">static</span> <span class="k">readonly</span> <span class="nx">NOT_FOUND</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">404</span><span class="dl">"</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>
<p><!-- /wp:code --></p>
<p><!-- wp:paragraph --></p>
<p>If controller returns an instance of Response, handler code can be changed to invoke get() on the returned instance.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:code --></p>
<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript"><span class="k">import</span> <span class="p">{</span><span class="nx">APIGatewayEvent</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">aws-lambda</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">OrderRequest</span><span class="p">}</span>    <span class="k">from</span> <span class="dl">"</span><span class="s2">./model/OrderRequest</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">OrderController</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./controller/OrderController</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">ordersHandler</span> <span class="o">=</span> <span class="k">async</span> <span class="p">(</span><span class="nx">event</span><span class="p">:</span> <span class="nx">APIGatewayEvent</span><span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="kr">any</span><span class="o">&gt;</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="k">await</span> <span class="k">new</span> <span class="nx">OrderController</span><span class="p">().</span><span class="nx">handle</span><span class="p">(</span><span class="k">new</span> <span class="nx">OrderRequest</span><span class="p">(</span><span class="nx">event</span><span class="p">));</span>
    <span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="kd">get</span><span class="p">();</span> <span class="c1">//handler invokes get() on the response returned from controller</span>
<span class="p">};</span></code></pre></figure>
<p><!-- /wp:code --></p>
<p><!-- wp:paragraph --></p>
<p>That's it. We have connected all the pieces, yes without any form of tests.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading {"level":4} --></p>
<h4>Step 10: Adding unit tests</h4>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>Let's add a couple of unit tests before we close the article. I will add all the necessary unit tests offline and commit the code. Before we can start with tests let's add following dependencies -</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:list --></p>
<ul>
<li>npm install <code>jest</code> --save-dev</li>
<li>npm install <code>@types/jest</code> --save-dev</li>
<li>npm install <code>ts-jest</code> --save-dev</li>
<li>npm install <code>sinon</code> --save-dev</li>
</ul>
<p><!-- /wp:list --></p>
<p><!-- wp:paragraph --></p>
<p>jest configuration in <code>jest.config.js</code> -</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:code --></p>
<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript"><span class="kr">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
    <span class="dl">"</span><span class="s2">testMatch</span><span class="dl">"</span><span class="p">:</span> <span class="p">[</span>
        <span class="dl">"</span><span class="s2">**/__tests__/**/*.+(ts|tsx|js)</span><span class="dl">"</span><span class="p">,</span>
        <span class="dl">"</span><span class="s2">**/?(*.)+(spec|test).+(ts|tsx|js)</span><span class="dl">"</span>
    <span class="p">],</span>
    <span class="dl">"</span><span class="s2">transform</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
        <span class="dl">"</span><span class="s2">^.+</span><span class="se">\\</span><span class="s2">.(ts|tsx)$</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">ts-jest</span><span class="dl">"</span>
    <span class="p">},</span>
<span class="p">};</span></code></pre></figure>
<p><!-- /wp:code --></p>
<p><!-- wp:paragraph --></p>
<p>test script in <code>package.json</code> -</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:preformatted --></p>
<div class="highlighter-rouge"><pre class="wp-block-preformatted">"scripts": {
  "test": "jest test/**"
}</pre></div>
<p><!-- /wp:preformatted --></p>
<p><!-- wp:heading {"level":4} --></p>
<h4>Controller unit tests</h4>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>Let's add our first test which attempts to validate the status for finding an order by its id.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:code --></p>
<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript"><span class="k">import</span> <span class="p">{</span><span class="nx">OrderController</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../src/controller/OrderController</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">OrderRequest</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../src/model/OrderRequest</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">APIGatewayEvent</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">aws-lambda</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">HttpStatus</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../src/model/ModelAndResponseStatus</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">OrderService</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../src/service/OrderService</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">Order</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../src/model/Order</span><span class="dl">"</span><span class="p">;</span>

<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">sinon</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">sinon</span><span class="dl">"</span><span class="p">;</span>

<span class="nx">test</span><span class="p">(</span><span class="dl">"</span><span class="s2">should return Ok as the response status given a request to find an order by id</span><span class="dl">"</span><span class="p">,</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span><span class="p">{</span>
    <span class="nx">sinon</span><span class="p">.</span><span class="nx">stub</span><span class="p">(</span><span class="nx">OrderService</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span> <span class="dl">"</span><span class="s2">findAnOrderBy</span><span class="dl">"</span><span class="p">)</span>
         <span class="p">.</span><span class="nx">callsFake</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">sinon</span><span class="p">.</span><span class="nx">mock</span><span class="p">(</span><span class="nx">Order</span><span class="p">));</span>

    <span class="kd">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="k">await</span> <span class="k">new</span> <span class="nx">OrderController</span><span class="p">().</span><span class="nx">handle</span><span class="p">(</span><span class="nx">orderRequest</span><span class="p">(</span><span class="dl">"</span><span class="s2">id-100</span><span class="dl">"</span><span class="p">));</span>

    <span class="nx">expect</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">status</span><span class="p">).</span><span class="nx">toEqual</span><span class="p">(</span><span class="nx">HttpStatus</span><span class="p">.</span><span class="nx">OK</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">afterEach</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">sinon</span><span class="p">.</span><span class="nx">restore</span><span class="p">();</span>
<span class="p">});</span>

<span class="kd">const</span> <span class="nx">orderRequest</span> <span class="o">=</span> <span class="p">(</span><span class="nx">id</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="na">apiGatewayEvent</span><span class="p">:</span> <span class="nx">APIGatewayEvent</span> <span class="o">=</span> <span class="p">{</span>
        <span class="na">httpMethod</span><span class="p">:</span> <span class="dl">"</span><span class="s2">GET</span><span class="dl">"</span><span class="p">,</span>
        <span class="na">path</span><span class="p">:</span> <span class="s2">`/orders/</span><span class="p">${</span><span class="nx">id</span><span class="p">}</span><span class="s2">`</span><span class="p">,</span>
        <span class="na">pathParameters</span><span class="p">:</span> <span class="p">{</span>
            <span class="dl">"</span><span class="s2">orderId</span><span class="dl">"</span><span class="p">:</span> <span class="nx">id</span>
        <span class="p">},</span>
        <span class="na">body</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
        <span class="na">isBase64Encoded</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
        <span class="na">headers</span><span class="p">:</span> <span class="p">{},</span>
        <span class="na">multiValueHeaders</span><span class="p">:</span> <span class="p">{},</span>
        <span class="na">queryStringParameters</span><span class="p">:</span> <span class="p">{},</span>
        <span class="na">multiValueQueryStringParameters</span><span class="p">:</span> <span class="p">{},</span>
        <span class="na">stageVariables</span><span class="p">:</span> <span class="p">{},</span>
        <span class="na">requestContext</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
        <span class="na">resource</span><span class="p">:</span> <span class="dl">""</span>
    <span class="p">};</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nx">OrderRequest</span><span class="p">(</span><span class="nx">apiGatewayEvent</span><span class="p">);</span>
<span class="p">};</span></code></pre></figure>
<p><!-- /wp:code --></p>
<p><!-- wp:paragraph --></p>
<p>One quick observation -</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:list --></p>
<ul>
<li>apiGatewayEvent had to be constructed with all the attributes even though we needed only pathParameters because <em>APIGatewayEvent</em> type mandates all the attributes</li>
<li>visibility of status and model (in the next test) had to be changed from private to public to assert on these fields</li>
</ul>
<p><!-- /wp:list --></p>
<p><!-- wp:paragraph --></p>
<p>Another test could be to check the order returned from controller given an id.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:code --></p>
<figure class="highlight"><pre><code class="language-typescript" data-lang="typescript"><span class="nx">test</span><span class="p">(</span><span class="dl">"</span><span class="s2">should return an order given a request to find an order by id</span><span class="dl">"</span><span class="p">,</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">sinon</span><span class="p">.</span><span class="nx">stub</span><span class="p">(</span><span class="nx">OrderService</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span> <span class="dl">"</span><span class="s2">findAnOrderBy</span><span class="dl">"</span><span class="p">)</span>
         <span class="p">.</span><span class="nx">callsFake</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="k">new</span> <span class="nx">Order</span><span class="p">(</span><span class="dl">"</span><span class="s2">id-100</span><span class="dl">"</span><span class="p">,</span> <span class="mi">1445</span><span class="p">));</span>

    <span class="kd">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="k">await</span> <span class="k">new</span> <span class="nx">OrderController</span><span class="p">().</span><span class="nx">handle</span><span class="p">(</span><span class="nx">orderRequest</span><span class="p">(</span><span class="dl">"</span><span class="s2">id-100</span><span class="dl">"</span><span class="p">));</span>

    <span class="nx">expect</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="o">!!</span><span class="p">).</span><span class="nx">toEqual</span><span class="p">(</span><span class="k">new</span> <span class="nx">Order</span><span class="p">(</span><span class="dl">"</span><span class="s2">id-100</span><span class="dl">"</span><span class="p">,</span> <span class="mi">1445</span><span class="p">));</span>
<span class="p">});</span></code></pre></figure>
<p><!-- /wp:code --></p>
<p><!-- wp:paragraph --></p>
<p>I guess we are ready to do TDD as well for Serverless.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading {"level":4} --></p>
<h4>Summary</h4>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>Finally we have come to an end of our first article where we made an attempt to design a small part of a serverless application which uses AWS Lambda, API Gateway and DynamoDB.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>As a part of this application we have tried to draw some parallels with MVC design pattern and bring the same to the serverless world.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p><strong>Items that we have left -</strong></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:list --></p>
<ul>
<li>Exception handling is missing</li>
<li>Controller checks if the request is for getting an order. This if/else ladder will grow given the same lambda handles creation and deletion of orders.</li>
<li>Every component is unit testable in itself, except Repository layer which needs dynamo db</li>
</ul>
<p>I am sure you will be able to fill these gaps and at this stage, I will move forward.</p>
<p><!-- wp:paragraph --></p>
<p><strong>There is a lot of work still left before we can deploy the code -</strong></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:list --></p>
<ul>
<li>We need to have integration test(s) which can give us confidence if this entire application is actually working or not</li>
<li>We need to integrate CDK (Cloud Development Kit) for deploying our infrastructure</li>
<li>We need to have unit tests and snapshot tests for our CDK based infra code</li>
</ul>
<p><!-- /wp:list --></p>
<p><!-- wp:paragraph --></p>
<p>Code is available <a href="https://github.com/aws-articles/serverless-order-service">here</a>. </p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Let's move on to our <a href="/testing-serverless-journey">next</a> article which explores integration testing using Localstack for our serverless application.</p>]]></content><author><name>Sarthak Makhija</name></author><category term="Serverless" /><category term="AWS Lambda" /><category term="Serverless" /><summary type="html"><![CDATA[Serverless is a paradigm which lays its foundations on the fact that "We don't have to provision and manage servers". Let's begin our Serverless journey which starts with building a Serverless application. After we have built an application we will proceed with testing it using LocalStack and finally deploying it using AWS CDK.]]></summary></entry><entry><title type="html">Invest In Blogging</title><link href="https://tech-lessons.in/invest-in-blogging/" rel="alternate" type="text/html" title="Invest In Blogging" /><published>2019-06-07T05:57:10+05:30</published><updated>2019-06-07T05:57:10+05:30</updated><id>https://tech-lessons.in/invest-in-blogging</id><content type="html" xml:base="https://tech-lessons.in/invest-in-blogging/"><![CDATA[<p><!-- wp:quote --></p>
<blockquote class="wp-block-quote"><p>We often have a lot to share with people, this could be our learnings, our opinions and our experiences. There are times when we feel the need to get our ideas validated or get feedback from people. These are definitely some of the reasons to invest in blogging and connect with community.</p>
</blockquote>
<p><!-- /wp:quote --></p>
<p><!-- wp:paragraph {"align":"left"} --></p>
<p style="text-align:left">Let's see some reasons for investing in writing blogs.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:image {"id":338,"align":"center","width":394,"height":262} --></p>
<div class="wp-block-image">
<figure class="aligncenter is-resized"><img src="/assets/img/pexels/invest-in-blogging.jpg" alt="Invest in blogging" class="wp-image-338" /></figure>
</div>
<p><!-- /wp:image --></p>
<p><!-- wp:heading {"level":3,"align":"left"} --></p>
<h3 style="text-align:left">Help people learn from your learning journey</h3>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>There are times when we often feel "it would have been great if someone had written an article to explain a concept", start writing if you have had this feeling. </p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Learning is like climbing a rock. While climbing, we always look at the tip of the rock just to realize it is too far away. What is also important is to realize that there are people who might have just started this journey and your "learning journey" could go a long way in helping them.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading {"level":3} --></p>
<h3 id="mce_14">Help people learn from your mistakes</h3>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>Share your mistakes with the community. We as a community learn from each other's mistakes and experiences and these things are really valuable. </p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Your blog on "<em>Failing with Microservices</em>" could help me in avoiding some mistakes or at least rethink my design if I am starting with microservices.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading {"level":3} --></p>
<h3>Get feedback from community</h3>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>There are a lot of things which help us grow as an individual and one of them is feedback or I should say "<em>Constructive Feedback</em>". Write to get feedback from community, to get their thoughts, to hear their experiences and to learn from all of these. Let's see how this could work. </p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Say, I am very excited to use Coroutines to build reactive streams in my next project and I share an article "<em>Being Reactive with Kotlin Coroutines</em>" which talks about the basics of Coroutines and abstractions like "<em>Channel</em>" to implement reactive streams. </p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>This article receives a lot of feedback and one of the feedback says - </p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:quote --></p>
<blockquote class="wp-block-quote"><p>Hey, nicely put. I would suggest you to check this <a href="https://github.com/Kotlin/kotlinx.coroutines/blob/master/reactive/coroutines-guide-reactive.md">link.</a> It says -</p>
<p><em>"There is no way to receive the elements from a channel again. The channel is closed when the producer coroutine is over and the attempt to receive from it again cannot receive anything."</em></p>
<p>You might also want to take a look at <a href="https://github.com/Kotlin/kotlinx.coroutines/blob/master/reactive/kotlinx-coroutines-rx2">kotlinx-coroutines-rx2.</a></p>
</blockquote>
<p><!-- /wp:quote --></p>
<p><!-- wp:paragraph --></p>
<p>Now, this is important as it helps me understand a lot of dimensions including backpressure, hot and cold observables which I had not considered. Thanks to the feedback, I got pointed in the right direction.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph {"align":"center"} --></p>
<p style="text-align:center"><strong>. . . </strong></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Investment is tricky and one expects a return from every investment. Let's see the overall "<em>return over investment</em>" in blogging.<em> </em></p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading {"level":3} --></p>
<h3 id="mce_16">Solidifies your understanding</h3>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>Like we learn when we teach people, we also learn when we share our ideas with people. Blogging helps in solidifying our understanding and the reason I say this is - </p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:quote --></p>
<blockquote class="wp-block-quote"><p>We try to communicate our ideas in the simplest possible manner to our readers. In order to do this, we choose to take small steps and each of these steps is well thought of and analyzed. Each step in turn teaches us something which improves our understanding.</p>
</blockquote>
<p><!-- /wp:quote --></p>
<p><!-- wp:paragraph --></p>
<p>We were talking about <em>DSLs in Kotlin </em>in one of the workshops and I happened to like the way that topic was built - <em>from lambdas to extension function to lambdas with receiver to invoke function</em>. </p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>I decided to share the same in an article <a href="https://dzone.com/articles/kotlin-dsl-basics">Kotlin DSLs: The Basics</a> and if I look back, I realize these two things - a workshop and an article have really helped me understand Kotlin DSLs well.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading {"level":3} --></p>
<h3>Increases your confidence</h3>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>You are not afraid of reaching out to people and you are not the same person you used to be who would think "<em>should I share this, people would already know it"</em>, "<em>this tech was released 5 years back and I am writing about it now, does it make sense?</em>". You become someone who would share his/her ideas with confidence.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading {"level":3} --></p>
<h3>Challenges you to write better every time</h3>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>You challenge yourself to write better every time. You tend to experiment with different styles of writing in an attempt to communicate your ideas clearly and connect with people better.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading {"level":3} --></p>
<h3> Makes you a better articulator of thoughts</h3>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>You tend to wear a writer's hat every time you sit to share something. An attempt is made is to talk to the readers through your article which acts like a story. You read your article hundreds of times in an attempt to articulate better. All this does is make you a better articulator of thoughts.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading {"level":3} --></p>
<h3>Builds your network</h3>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>Investment in blogging is a great way to build network, you get to know people and people get to know you. </p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Networking is very powerful and truly magical, it can surprise you with a lot of opportunities which you might not imagine. You might get to speak at conferences, work with people that you follow and many more. </p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:paragraph --></p>
<p>Investment in blogging is really a simple way to build network !!</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:heading {"level":3} --></p>
<h3 id="mce_0">Builds your brand</h3>
<p><!-- /wp:heading --></p>
<p><!-- wp:paragraph --></p>
<p>Investment in blogging acts as a great tool to build your and your organization's brand.</p>
<p><!-- /wp:paragraph --></p>
<p><!-- wp:quote --></p>
<blockquote class="wp-block-quote"><p>"<em>Return over investment in blogging</em>" looks promising but we need to be aware of the fact that a return might not be immediate for an investment. </p>
<p>Making an investment is the first step and usually the most difficult step, rest is all about return ;-)</p>
<p>Take your first step with blogging, share your ideas / opinions / thoughts with the community. It is a great tool which does a lot of magic, has got great return and more importantly "<em>it is fun</em>". </p>
<p>Invest in blogging.</p>
<p><cite><br /></cite></p></blockquote>
<p><!-- /wp:quote --></p>
<p><!-- wp:image {"id":462,"align":"center","width":537,"height":272} --></p>
<h3>Summary</h3>
<div class="wp-block-image">
<figure class="aligncenter is-resized"><img src="/assets/img/pexels/benefits-of-blogging.jpg" alt="Benefits of Blogging" class="wp-image-462" /><br />
</figure>
</div>]]></content><author><name>Sarthak Makhija</name></author><category term="Blogging" /><category term="Blogging" /><summary type="html"><![CDATA[We often have a lot to share with people, this could be our learnings, our opinions and our experiences. There are times when we feel the need to get our ideas validated or get feedback from people. These are definitely some of the reasons to invest in blogging and connect with community.]]></summary></entry></feed>