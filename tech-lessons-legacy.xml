<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

	<!-- generator="WordPress/5.3.2" created="2020-03-26 15:32" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>tech-lessons.in</title>
	<link>http://tech-lessons.in</link>
	<description>tech lessons and learnings from a developer</description>
	<pubDate>Thu, 26 Mar 2020 15:32:25 +0000</pubDate>
	<language>en-US</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://tech-lessons.in</wp:base_site_url>
	<wp:base_blog_url>http://tech-lessons.in</wp:base_blog_url>

		<wp:author><wp:author_id>1</wp:author_id><wp:author_login><![CDATA[sarthakmakhija]]></wp:author_login><wp:author_email><![CDATA[sarthak.makhija@gmail.com]]></wp:author_email><wp:author_display_name><![CDATA[sarthakmakhija]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>

		<wp:category>
		<wp:term_id>13</wp:term_id>
		<wp:category_nicename><![CDATA[legacy-code]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Legacy Code]]></wp:cat_name>
<wp:category_description><![CDATA[Defining Legacy Code, understanding Boy Scout Rule, Broken Window Theory  and dealing with Legacy Code professionally.]]></wp:category_description>
	</wp:category>
				
	<generator>https://wordpress.org/?v=5.3.2</generator>

		<item>
		<title>Let’s Define Legacy Code</title>
		<link>http://tech-lessons.in/lets-define-legacy-code/</link>
		<pubDate>Sun, 29 Apr 2018 19:15:53 +0000</pubDate>
		<dc:creator><![CDATA[sarthakmakhija]]></dc:creator>
		<guid isPermaLink="false">http://tech-lessons.in/?p=80</guid>
		<description></description>
		<content:encoded><![CDATA[<p id="dd4e" class="graf graf--p graf--startsWithDoubleQuote graf-after--h3">“I have been having sleepless nights trying to add features in the code we acquired from other company. I am dealing with purest form of <em class="markup--em markup--p-em">Legacy Code</em>”</p>
<p id="c4f4" class="graf graf--p graf--startsWithDoubleQuote graf-after--p">“I am having a real hard time dealing with tangled, unstructured code that I have to work with but I don’t understand a bit. <em class="markup--em markup--p-em">Legacy Code !</em>”</p>
<p id="d601" class="graf graf--p graf-after--p"><em class="markup--em markup--p-em">Legacy code</em> is a term which probably has a lot of different definitions like -code acquired from someone else, code written by someone else, code that is hard to understand or code written in outdated technologies. Whatever be the definition, most of us believe <em class="markup--em markup--p-em">Legacy Code is Scary.</em></p>
<p id="972b" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong"><em class="markup--em markup--p-em">Q</em></strong><em class="markup--em markup--p-em">uestion&gt; How would </em><strong class="markup--strong markup--p-strong"><em class="markup--em markup--p-em">you</em></strong><em class="markup--em markup--p-em"> define legacy code?</em></p>

<h4 id="23fb" class="graf graf--h4 graf-after--p">Defining Legacy Code</h4>
Michael Feathers in his book “Working Effectively with Legacy Code” defines legacy code as, code without tests.

Code without tests is a bad code. It doesn’t matter how well written it is; how well structured it is; how well encapsulated it is.Without tests there is no way to tell if our code is getting better or worse.
<p id="1a83" class="graf graf--p graf-after--blockquote">Well, a slightly modified version of this definition is “<em class="markup--em markup--p-em">code without unit tests is called legacy code</em>”. It is always better to have tests as close to the code as possible (<em class="markup--em markup--p-em">unit tests &gt; integration tests &gt; UI tests</em>). So, it would not be unfair to call a code without unit tests a <em class="markup--em markup--p-em">legacy code</em>.</p>

<h4 id="b275" class="graf graf--h4 graf-after--p">Working with Legacy Code</h4>
<p id="d37b" class="graf graf--p graf-after--h4"><strong class="markup--strong markup--p-strong"><em class="markup--em markup--p-em">Q</em></strong><em class="markup--em markup--p-em">uestion&gt; What approach will you take if you were to make a change in legacy code?</em></p>
<p id="f09e" class="graf graf--p graf-after--p">Most of us might say, “<em class="markup--em markup--p-em">I will make the change and call it a day, why bother about improving the code</em>”. Rationale behind this thought process could be -</p>

<ul class="postList">
 	<li id="a530" class="graf graf--li graf-after--p">I don’t have enough time to refactor the code, I would prefer making a change and completing my story</li>
 	<li id="079f" class="graf graf--li graf-after--li">Why risk changing the structure of the code that has been running in production for a long time</li>
 	<li id="0af9" class="graf graf--li graf-after--li">What is the overall benefit of refactoring legacy code</li>
</ul>
Michael Feathers calls this style of making a change as Edit and Pray. You plan and make your changes and when you are done, you pray and pray harder to get your changes right.
<p id="9a39" class="graf graf--p graf-after--blockquote">With this style, one can only contribute to increasing Legacy code.</p>
<img class="aligncenter wp-image-81 size-medium" title="Legacy Code" src="https://tech-lessons.in/wp-content/uploads/2018/04/1_w0Sa-2tK_TLB0EacGNEW_Q-300x179.jpeg" alt="Legacy Code" width="300" height="179" />

There is a different style of making changes which is Cover and Modify<em class="markup--em markup--blockquote-em">. </em>Build a Safety Net, make changes in the system, let Safety Net provide feedback and work on those feedbacks.
<p id="f1da" class="graf graf--p graf-after--blockquote">It can be safely assumed that <em class="markup--em markup--p-em">Cover and Modify</em> is a way to go to deal with Legacy code.</p>
<p id="3898" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong"><em class="markup--em markup--p-em">Q</em></strong><em class="markup--em markup--p-em">uestion&gt; But, should you even spend time writing tests in legacy code or even thinking about refactoring a legacy code?</em></p>

<h4 id="e6a7" class="graf graf--h4 graf-after--figure">The Boy Scout Rule</h4>
<blockquote id="b30b" class="graf graf--pullquote graf-after--h4">The idea behind the Boy Scout Rule, as stated by Uncle Bob, is fairly simple: Leave the code cleaner than you found it! Whenever you touch an old code, you should clean it properly. Do not just apply a shortcut solution that will make the code more difficult to understand but instead treat it with care. It’s not enough to write code well, the code has to be kept clean over time.</blockquote>
<p id="58e5" class="graf graf--p graf-after--pullquote">We get a very strong message when Boy Scout rule is applied to legacy code “<em class="markup--em markup--p-em">leave a trace of understanding behind you for others to follow</em>”, which means we will refactor the code to make it more understandable. And in order to refactor, we will build Safety Net around it.</p>
<p id="6ea8" class="graf graf--p graf-after--p">Now that we understand <em class="markup--em markup--p-em">we can not take shortcuts</em> the only option that is left with us is to write some tests, refactor code and proceed with the development.</p>
<p class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong"><em class="markup--em markup--p-em">Q</em></strong><em class="markup--em markup--p-em">uestions&gt;</em></p>

<ul class="postList">
 	<li id="58a6" class="graf graf--li graf-after--p">Which tests should we write?</li>
 	<li id="8206" class="graf graf--li graf-after--li">How much should we refactor?</li>
</ul>
<h4 id="3a87" class="graf graf--h4 graf-after--li">Which Tests To Write</h4>
<p id="6234" class="graf graf--p graf-after--h4">In nearly every legacy system, what the system does is more important than what it is supposed to do.</p>

<blockquote id="d49c" class="graf graf--pullquote graf-after--p">Characterization Tests, the tests that we need when we want to preserve behavior are called as characterization tests. A characterization test is a test that characterizes the actual behavior of a piece of code. There’s no “Well, it should do this” or “I think it does that”. The tests document the actual current behavior of the system.</blockquote>
<h4 id="708c" class="graf graf--h4 graf-after--pullquote">Writing Characterization Test</h4>
<p id="fb12" class="graf graf--p graf-after--h4">A <em class="markup--em markup--p-em">Characterization Test </em>by definition documents the actual current behavior of the system the exact same way it is running on Production environment.</p>
<p id="20c2" class="graf graf--p graf-after--p">Let’s write a <em class="markup--em markup--p-em">Characterization test </em>for a Customer object which generates text statement for some movies rented by a customer.</p>

<pre id="1fe4" class="graf graf--pre graf-after--p">import static com.code.legacy.movie.MovieType.CHILDREN;
import static org.junit.Assert.assertEquals;

public void shouldGenerateTextStatement(){
   Customer john          = new Customer("John");
   Movie    childrenMovie = new Movie("Toy Story", CHILDREN);   
   int      daysRented    = 3;
   Rental   rental        = new Rental(childrenMovie, daysRented);
   john.addRental(rental);
   
   String statement = john.generateTextStatement();
   assertEquals("", statement);</strong>
}</pre>
<p id="c242" class="graf graf--p graf-after--pre">This test attempts to understand (or characterize) the “Text Statement” generation for a customer given a children’s movie rented for 3 days. Because we do not understand the system (at least as of now), <em class="markup--em markup--p-em">we expect the statement to be blank or containing any dummy value.</em></p>
<p id="b267" class="graf graf--p graf-after--p">Let’s run the test and let it fail. When it does, <em class="markup--em markup--p-em">we have found out what the code actually does under that condition.</em></p>

<pre id="f0cd" class="graf graf--pre graf-after--p">java.lang.AssertionError: 
Expected :""
Actual   :Rental Record for John, Total amount owed = 12.5. You earned 4 frequent renter points.</pre>
Now, that we know the behavior of the code, we can go ahead and change the test.
<pre id="059c" class="graf graf--pre graf-after--p">import static com.code.legacy.movie.MovieType.CHILDREN;
import static org.junit.Assert.assertEquals;

public void shouldGenerateTextStatement(){
   String expectedStatement = "Rental Record for John, Total amount  owed = 12.5. You earned 4 frequent renter points";
   Customer john          = new Customer("John");
   Movie    childrenMovie = new Movie("Toy Story", CHILDREN);   
   int      daysRented    = 3;
   Rental   rental        = new Rental(childrenMovie, daysRented);
   john.addRental(rental);
   
   Sting statement = john.generateTextStatement();
   assertEquals(expectedStatement, statement);</strong>
}
</pre>
<p id="cd73" class="graf graf--p graf-after--pre"><em class="markup--em markup--p-em">Hold on</em>, did we just copy the output generated by the code and placed into our test. <em class="markup--em markup--p-em">Yes, that is exactly what we did.</em></p>
<p id="e4a5" class="graf graf--p graf-after--p">We aren’t trying to find bugs right now. We are trying to put in a mechanism to find bugs later, bugs that show up as differences from the system’s current behavior. When we adopt this perspective, our view of tests is different: They don’t have any moral authority; they just sit there <em class="markup--em markup--p-em">documenting what system really does</em>. At this stage, it’s very important to have that knowledge of what the system actually does someplace.</p>
<p id="4451" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong"><em class="markup--em markup--p-em">Q</em></strong><em class="markup--em markup--p-em">uestion&gt;</em> What is the total number of tests that we write to characterize a system?</p>
<p id="e7c4" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong"><em class="markup--em markup--p-em">A</em></strong><em class="markup--em markup--p-em">nswer&gt;</em> It’s infinite. We could dedicate a good portion of our lives to writing case after case for any class in a legacy code.</p>
<p id="8b1c" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong"><em class="markup--em markup--p-em">Q</em></strong><em class="markup--em markup--p-em">uestion&gt;</em> When do we stop then? Is there any way of knowing which cases are more important than others?</p>
<p id="998c" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong"><em class="markup--em markup--p-em">A</em></strong><em class="markup--em markup--p-em">nswer&gt;</em> Look at the code we are characterizing. The code itself can give us ideas about what it does, and if we have questions, tests are an ideal way of asking them. At that point, write a test or tests that cover good enough portion of the code.</p>
<p id="0d6a" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong"><em class="markup--em markup--p-em">Q</em></strong><em class="markup--em markup--p-em">uestion&gt; </em>Does that cover everything in the code?</p>
<p id="e2b6" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong"><em class="markup--em markup--p-em">A</em></strong><em class="markup--em markup--p-em">nswer&gt; </em>It might not. But then we do the next step. We think about the changes that we want to make in the code and try to figure out whether the tests that we have will sense any problems that we can cause. If they won’t, we add more tests until we feel confident that they will.</p>

<h4 id="acc6" class="graf graf--h4 graf-after--p">How Much To Refactor?</h4>
<p id="428a" class="graf graf--p graf-after--h4">There is so much to refactor in legacy code and we can not refactor everything. In order to answer this we need to go back to understanding our purpose of refactoring the legacy code.</p>
<p id="4485" class="graf graf--p graf-after--p">We want to refactor legacy code to leave it cleaner than what it was when it came to us and to make it understandable for others.</p>
<p id="b532" class="graf graf--p graf-after--p">With that said, we want to make the system better keeping the focus on the task. We don’t want go crazy with refactoring trying to rewrite the whole system in a few days. What we want to do is “<em class="markup--em markup--p-em">refactor the code that comes in our way of implementing any new change</em>”. We will try and understand this better with an example in the next article.</p>
[embed]https://www.youtube.com/watch?v=0U83rST3ang[/embed]
<h4></h4>
<h4 id="cc17" class="graf graf--h4 graf-after--figure">References</h4>
<ul class="postList">
 	<li id="1d0c" class="graf graf--li graf-after--h4">Working Effectively with Legacy Code</li>
</ul>

<div>
[wp_ulike]
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>80</wp:post_id>
		<wp:post_date><![CDATA[2018-04-29 19:15:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-04-29 19:15:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[lets-define-legacy-code]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="boy-scout-rule"><![CDATA[Boy Scout Rule]]></category>
		<category domain="post_tag" nicename="legacy-code"><![CDATA[Legacy Code]]></category>
		<category domain="category" nicename="legacy-code"><![CDATA[Legacy Code]]></category>
		<category domain="post_tag" nicename="software-development"><![CDATA[Software Development]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_6ccf9e9b7fc5f01b416ebe9d7686a22d]]></wp:meta_key>
		<wp:meta_value><![CDATA[<iframe width="500" height="281" src="https://www.youtube.com/embed/0U83rST3ang?feature=oembed" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_6ccf9e9b7fc5f01b416ebe9d7686a22d]]></wp:meta_key>
		<wp:meta_value><![CDATA[1525200124]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_40ebdbeb1f41ab68011e9e4f3bc482e5]]></wp:meta_key>
		<wp:meta_value><![CDATA[<iframe width="916" height="515" src="https://www.youtube.com/embed/0U83rST3ang?feature=oembed" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_40ebdbeb1f41ab68011e9e4f3bc482e5]]></wp:meta_key>
		<wp:meta_value><![CDATA[1525029135]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[81]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[inherit]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_4434a6dbf87cb4707918250a114c4db8]]></wp:meta_key>
		<wp:meta_value><![CDATA[<iframe width="920" height="518" src="https://www.youtube.com/embed/0U83rST3ang?feature=oembed" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_4434a6dbf87cb4707918250a114c4db8]]></wp:meta_key>
		<wp:meta_value><![CDATA[1525029156]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskw_text_input]]></wp:meta_key>
		<wp:meta_value><![CDATA[Legacy Code]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskw]]></wp:meta_key>
		<wp:meta_value><![CDATA[Legacy Code]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_metadesc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Legacy code is a term which probably has a lot of different definitions like - code acquired from someone else, code written by someone else, code that is hard to understand or code written in outdated technologies. Let's make an attempt to define Legacy Code.]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_linkdex]]></wp:meta_key>
		<wp:meta_value><![CDATA[82]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_like_ip]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:15:"114.143.114.122";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_like_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_519e4f3669278a16e6d2b01769c48566]]></wp:meta_key>
		<wp:meta_value><![CDATA[<iframe width="525" height="295" src="https://www.youtube.com/embed/0U83rST3ang?feature=oembed" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_519e4f3669278a16e6d2b01769c48566]]></wp:meta_key>
		<wp:meta_value><![CDATA[1525253675]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_cea7fa9fc293b8c734ff3a0f5c8e84f9]]></wp:meta_key>
		<wp:meta_value><![CDATA[<iframe width="660" height="371" src="https://www.youtube.com/embed/0U83rST3ang?feature=oembed" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_cea7fa9fc293b8c734ff3a0f5c8e84f9]]></wp:meta_key>
		<wp:meta_value><![CDATA[1525253697]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_liked]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_48b3442881802a314f3749f22536c4c3]]></wp:meta_key>
		<wp:meta_value><![CDATA[<iframe width="840" height="473" src="https://www.youtube.com/embed/0U83rST3ang?feature=oembed" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_48b3442881802a314f3749f22536c4c3]]></wp:meta_key>
		<wp:meta_value><![CDATA[1527443787]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[classic-editor-remember]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_a9ef4e98e0d7f3f76cd81d70e6e5b118]]></wp:meta_key>
		<wp:meta_value><![CDATA[<iframe width="574" height="323" src="https://www.youtube.com/embed/0U83rST3ang?feature=oembed" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_a9ef4e98e0d7f3f76cd81d70e6e5b118]]></wp:meta_key>
		<wp:meta_value><![CDATA[1555304009]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Let’s Deal with Legacy Code</title>
		<link>http://tech-lessons.in/lets-deal-with-legacy-code/</link>
		<pubDate>Sun, 29 Apr 2018 19:58:25 +0000</pubDate>
		<dc:creator><![CDATA[sarthakmakhija]]></dc:creator>
		<guid isPermaLink="false">http://tech-lessons.in/?p=87</guid>
		<description></description>
		<content:encoded><![CDATA[<p id="d8ad" class="graf graf--p graf-after--h3">This article is in continuation with the <a href="http://tech-lessons.in/lets-define-legacy-code/">previous article</a> where we defined some of the key aspects of Legacy Code. In this article we will take a Legacy code and add a new feature to it.</p>
<p id="bec2" class="graf graf--p graf-after--p">Before we begin with an example, let’s take a moment to understand <em class="markup--em markup--p-em">Broken Window Theory.</em></p>
<img class="aligncenter wp-image-88 size-medium" title="Broken Window Theory" src="https://tech-lessons.in/wp-content/uploads/2018/04/1_aS3sBB0370rt5yp_vjX3Aw-300x185.jpeg" alt="Broken Window Theory" width="300" height="185" />
<h4 id="0735" class="graf graf--h4 graf-after--figure">Broken Window Theory</h4>
<p id="533a" class="graf graf--p graf-after--h4">An<strong class="markup--strong markup--p-strong"> </strong>academic theory proposed by James Q. Wilson and George Kelling in 1982 that used broken windows as a metaphor for disorder within neighbourhoods.</p>

<blockquote id="e670" class="graf graf--pullquote graf-after--p">One broken window, if left unrepaired for a substantial amount of time, instills a sense of abandonment. So another window gets broken. People start littering. Graffiti appears. Serious structural damage begins. In a relatively short time, the building becomes damaged beyond the owner’s desire to fix it, and the sense of abandonment becomes reality.</blockquote>
<p id="4401" class="graf graf--p graf-after--pullquote">Let’s not abandon our code, let’s repair the code as soon as we get an opportunity to repair it and let’s not get ourselves into a situation where damage is beyond our capacity to fix. Let’s see our theory in action.</p>

<h4 id="1575" class="graf graf--h4 graf-after--p">Problem Definition Overview</h4>
<p id="1f4e" class="graf graf--p graf-after--h4">The below code belongs to a hypothetical application “Movie Rental” which allows its customers to rent either a Regular or a Children’s movies for fixed number of days. The application also allows generation of a statement which the business calls as “Text Statement”. This application has been running in Production for a long time without issues and has become very popular. Now business wants to generate an HTML statement with exact same logic for amount computation.</p>

<pre>public class Customer{
    private String name;
    private List<Rental> rentals = new ArrayList<>();

    public Customer(String name) {
        this.name = name;
    }
    public void addRental(Rental arg) {
        rentals.add(arg);
    }
    public String getName() {
        return name;
    }
    public String statement() {
        double totalAmount = 0;
        String result = "Rental Record for " + getName() + "\n";
        for (Rental each : rentals) {
            double thisAmount = 0;
            //determine amounts for each line
            switch (each.getMovie().getPriceCode()) {
                case Movie.REGULAR:
                    thisAmount += 2;
                    if (each.getDaysRented() < 2)
                        thisAmount += (each.getDaysRented() - 2) * 1.5;
                    break;
                case Movie.CHILDRENS:
                    thisAmount += 1.5;
                    if (each.getDaysRented() < 3)
                        thisAmount += (each.getDaysRented() - 3) * 1.5;
                    break;
            }
            //show figures for this Rental
            result += "\t" + each.getMovie().getTitle() + "\t" +
                    String.valueOf(thisAmount) + "\n";
            totalAmount += thisAmount;
        }
        //add footer lines result
        result += "Amount owed is " + String.valueOf(totalAmount) + "\n";
        return result;
    }
}

public class Movie{
    public static final int CHILDRENS = 2;
    public static final int REGULAR = 0;
    private String title;
    private int priceCode;

    public Movie(String title, int priceCode) {
        this.title = title;
        this.priceCode = priceCode;
    }
    //getters ignored
}

public class Rental{
    private int daysRented;
    private Movie movie;

    public Rental(Movie movie, int daysRented){
        this.movie = movie;
        this.daysRented = daysRented;
    }
    //getters ignored
}
</pre>
The team decides to discuss different ways to handle this new requirement in legacy code.

[embed]https://www.youtube.com/watch?v=aGGoW8YENKo[/embed]

&nbsp;
<p id="a254" class="graf graf--p graf-after--figure">And the team agrees to improve the code before implementing the new functionality. Scott and Jessica will be pairing on this. But, where do they start from? As mentioned in their discussion, they need to understand the code first so they decide to write Characterization Test(s).</p>

<h4 id="706f" class="graf graf--h4 graf-after--p">First Characterization Test</h4>
<p id="0928" class="graf graf--p graf-after--h4">Scott&gt; How many tests should we write?</p>
<p id="927f" class="graf graf--p graf-after--p">Jessica&gt; Let’s look at the code. It should give us some hints.</p>
<p id="6d15" class="graf graf--p graf-after--p">Scott&gt; I get it. We need a few rentals consisting of Regular and Children’s movie and the number of days rented for which these movies can be greater than 2 or 3. So, one test should cover a <strong class="markup--strong markup--p-strong">decent</strong> functionality.</p>
<p id="00b8" class="graf graf--p graf-after--p">Jessica&gt; I can’t agree more. So let’s write it then.</p>

<pre>public class CustomerUnitTest {
    @Test
    public void shouldGenerateStatement(){
        Customer john      = new Customer("John");
        Movie    regular   = new Movie("Black Panther", REGULAR);
        Movie    children  = new Movie("Lion King",     CHILDRENS);
        Rental rental1     = new Rental(regular, 3);  
        Rental rental2     = new Rental(children, 4);
        john.addRental(rental1);
        john.addRental(rental2);
        
        String statement = john.statement();
        assertEquals("", statement);
    }
}
</pre>
Scott&gt; Let’s run this and see it fail.
<pre id="7bb8" class="graf graf--pre graf-after--p">org.junit.ComparisonFailure: 
Expected: ""
Actual:
Rental Record for John
 Black Panther 3.5
 Lion King 3.0
Amount owed is 6.5
</pre>
Jessica&gt; Great. We have made some progress. Let’s correct our test.
<pre>public class CustomerUnitTest {
    @Test
    public void shouldGenerateStatement(){
        String expected = "Rental Record for John\n" +
                "\tBlack Panther\t3.5\n" +
                "\tLion King\t3.0\n" +
                "Amount owed is 6.5\n";
        
        Customer john      = new Customer("John");
        Movie    regular   = new Movie("Black Panther", REGULAR);
        Movie    children  = new Movie("Lion King",     CHILDRENS);
        Rental rental1     = new Rental(regular, 3);
        Rental rental2     = new Rental(children, 4);
        john.addRental(rental1);
        john.addRental(rental2);
        
        String statement = john.statement();
        assertEquals(expected, statement);
    }
}</pre>
<em>Jessica and Scott agree to write one test case covering a decent portion of the code. If this gives us confidence, we can live with one test for now else we can write a few more or include movies with daysRented &lt; 2.</em>
<p id="8a8b" class="graf graf--p graf-after--blockquote">Scott&gt; Jessica, what type of test should a Characterization test be? Unit, Functional, Integration?</p>
<p id="03f9" class="graf graf--p graf-after--p">Jessica&gt; Scott, it is not always possible to write unit or functional tests for legacy code. You might end up writing an <em class="markup--em markup--p-em">integration test</em> to begin with because you just want to know what system does. But, as soon as you get an opportunity, get your tests closer to the code.</p>
<p id="b979" class="graf graf--p graf-after--p">Scott&gt; Sure Jessica, let’s start the fun part. Let’s fix a broken window.</p>

<h4 id="9ff0" class="graf graf--h4 graf-after--p">Refactoring</h4>
<p id="3257" class="graf graf--p graf-after--h4">Scott&gt; Where do we start from?</p>
<p id="935c" class="graf graf--p graf-after--p">Jessica&gt; I believe statement() method is a long method. We should try and make it a little shorter.</p>
<p id="5a47" class="graf graf--p graf-after--p">Scott&gt; Agreed.</p>
<em>Jessica and Scott agreed that statement() method is a long method. But, this agreement was not based on the number of lines in the method. It was based on how easy it is to comprehend the method or is a method doing more than one thing at a time or it can be decomposed further.</em>
<pre>public String statement() {
    double totalAmount = 0;
    String result = "Rental Record for " + getName() + "\n";
    for (Rental each : Rentals) {
        //determine amounts for each line
        double thisAmount = amount(each);
        //show figures for this Rental
        result += "\t" + each.getMovie().getTitle() + "\t" + String.valueOf(thisAmount) + "\n";
        totalAmount += thisAmount;
    }
    //add footer lines result
    result += "Amount owed is " + String.valueOf(totalAmount) + "\n";
    return result;
}
private double amount(Rental each) {
    double thisAmount = 0.0;
    switch (each.getMovie().getPriceCode()) {
        case Movie.REGULAR:
            thisAmount += 2;
            if (each.getDaysRented() < 2)
                thisAmount += (each.getDaysRented() - 2) * 1.5;
            break;
        case Movie.CHILDRENS:
            thisAmount += 1.5;
            if (each.getDaysRented() < 3)
                thisAmount += (each.getDaysRented() - 3) * 1.5;
            break;
    }
    return thisAmount;
}</pre>
<p id="4d36" class="graf graf--p graf-after--figure">Jessica&gt; Switch statement has gone out and the extracted amount() method does one thing which is getting amount for a given rental.</p>
<p id="8b87" class="graf graf--p graf-after--p">Scott&gt; Let’s continue refactoring. I am in a mood to clean up everything.</p>
<p id="0ac2" class="graf graf--p graf-after--p">Jessica&gt; Hold on Scott, we need to run tests before we move on.</p>
<p id="356e" class="graf graf--p graf-after--p"><em class="markup--em markup--p-em">And the test ran successfully.</em></p>
<em>While working with Legacy Code it is important to take smaller steps and follow refactoring cycle. Refactor -&gt; Run Tests -&gt; Refactor</em>
<p id="f267" class="graf graf--p graf-after--blockquote">Scott&gt; Sure. Jessica, are we in a position to remove the comment <em class="markup--em markup--p-em">“determine amounts for each line” from previous code?</em></p>
<p id="9609" class="graf graf--p graf-after--p">Jessica&gt; Yes, we can remove it.</p>

<pre>public String statement() {
    double totalAmount = 0;
    String result = "Rental Record for " + getName() + "\n";
    for (Rental rental : Rentals) {
        double thisAmount = amount(rental);
        //show figures for this Rental
        result += "\t" + rental.getMovie().getTitle() + "\t" + String.valueOf(thisAmount) + "\n";
        totalAmount += thisAmount;
    }
    //add footer lines result
    result += "Amount owed is " + String.valueOf(totalAmount) + "\n";
    return result;
}
private double amount(Rental rental) {
    double thisAmount = 0.0;
    switch (rental.getMovie().getPriceCode()) {
        case Movie.REGULAR:
            thisAmount += 2;
            if (rental.getDaysRented() < 2)
                thisAmount += (rental.getDaysRented() - 2) * 1.5;
            break;
        case Movie.CHILDRENS:
            thisAmount += 1.5;
            if (rental.getDaysRented() < 3)
                thisAmount += (rental.getDaysRented() - 3) * 1.5;
            break;
    }
    return thisAmount;
}</pre>
<em>Remove comments from legacy code when you have captured their complete essence . Though I did take some liberty to rename variable along with removing comment, it is always ideal to take smaller steps when you are beginning to understand legacy code. As you grow in confidence, you might want to take bigger steps but one test failure and the reality reveals itself.</em>
<p id="49cd" class="graf graf--p graf-after--blockquote">Scott&gt; Let’s look at amount() method. It depends on priceCode from movie but is placed in Customer. We should move this method to the place where it belongs.</p>
<p id="e000" class="graf graf--p graf-after--p">Jessica&gt; Yes, let’s do a few method movements (in the interest of this article).</p>

<pre>//Customer
public String statement() {
    double totalAmount = 0;
    String result = "Rental Record for " + getName() + "\n";
    for (Rental rental : Rentals) {
        double thisAmount = rental.amount();
        //show figures for this Rental
        result += "\t" + rental.movieTitle() + "\t" + String.valueOf(thisAmount) + "\n";
        totalAmount += thisAmount;
    }
    //add footer lines result
    result += "Amount owed is " + String.valueOf(totalAmount) + "\n";
    return result;
}
//Rental
double amount() {
  return movie.amount(this.daysRented);
}
//Movie
double amount(int daysRented) {
    double thisAmount = 0.0;
    switch (this.getPriceCode()) {
        case Movie.REGULAR:
            thisAmount += 2;
            if (daysRented < 2)
                thisAmount += (daysRented - 2) * 1.5;
            break;
        case Movie.CHILDRENS:
            thisAmount += 1.5;
            if (daysRented < 3)
                thisAmount += (daysRented - 3) * 1.5;
            break;
    }
    return thisAmount;
}
</pre>
<em>I did a few movements. Moved amount() method to Rental and then to Movie and ran the tests. It should be noted that this is our first opportunity to write unit tests for Rental and Movie. I won’t, for this article, but I assume you will.</em>
<p id="7db7" class="graf graf--p graf-after--blockquote">Scott&gt; Jessica, I have a question. Movie has a switch statement based on different types of movies. Shall we introduce some polymorphism here?</p>
<p id="98cd" class="graf graf--p graf-after--p">Jessica&gt; I don’t think it is coming in our way of implementing HTML statement functionality.</p>

<blockquote id="8392" class="graf graf--blockquote graf-after--p">Scott has raised a valid point but we need to remember one thing, “we refactor the code which comes in our way”. At this point in time, we need to implement HTML statement and switch code does not come in the way of our new feature, neither do the magic numbers 2 or 1.5. If you want to continue with small refactorings which are not coming in your way, say changing Magic Numbers to Constants, go ahead and do it but do not move away from your actual task: implementing HTML statement.</blockquote>
<p id="9c99" class="graf graf--p graf-after--blockquote">Scott&gt; I get that. Thank you. The statement() method in Customer is short enough. Shall we pause our refactoring here?</p>
<p id="4221" class="graf graf--p graf-after--p">Jessica&gt; We could, but one thing that is bothering me is this method seems to be generating 3 parts of the statement and I can see it clearly — header, body and footer. <em class="markup--em markup--p-em">If the effort is not huge</em> we should try and extract this code into different methods.</p>
<p id="19cb" class="graf graf--p graf-after--p">Scott&gt; You clearly have an eye for refactoring. Let’s do it.</p>

<pre>public String textStatement() {
    return textHeader() + textBody() + textFooter();
}
private String textHeader() {
    return "Rental Record for " + getName() + "\n";
}
private String textBody() {
    String result = "";
    for (Rental rental : Rentals) {
        result += "\t" + rental.movieTitle() + "\t" + String.valueOf(rental.amount()) + "\n";
    }
    return result;
}
private String textFooter() {
    return "Amount owed is " + String.valueOf(totalAmount()) + "\n";
}
private double totalAmount() {
    double totalAmount = 0.0;
    for (Rental rental : Rentals) {
        totalAmount += rental.amount();
    }
    return totalAmount;
}</pre>
<em>I cheated again. Did lot more than what I should have done,renamed methods to be <strong class="markup--strong markup--blockquote-strong">text*,</strong> duplicated for loops (over rentals) to calculate totalAmount(), repeated the same in textBody().</em>

<em>Is that justified? Well, how many rentals do we expect to have for a customer? What is the cost of iterating over them twice? If it is not significant, go ahead and use it. What does it give me? Look at the statement() (renamed as textStatement()) method now.</em>
<p id="5e8c" class="graf graf--p graf-after--blockquote">Jessica&gt; Now, we are done with refactoring. We can introduce HTML statement functionality now.</p>

<h4 id="76b1" class="graf graf--h4 graf-after--p">Conclusion</h4>
<p id="9010" class="graf graf--p graf-after--h4"><em class="markup--em markup--p-em">Jessica and Scott went on to implement HTML functionality (with tests) and they did a lot to clean up the existing code. This is much more understandable that it used to be.</em></p>
<p id="7e4d" class="graf graf--p graf-after--p"><em class="markup--em markup--p-em">They might not have cleaned up everything but they clearly have left a great deal of understanding trace for others to follow.</em></p>
<p id="1251" class="graf graf--p graf-after--p"><em class="markup--em markup--p-em">They followed Cover and Modify, Boy Scout rule, Refactoring Cycle and refactored enough to finish the new functionality, in-short dealt with Legacy Code professionally.</em></p>

<h4 id="d3d3" class="graf graf--h4 graf-after--p">References</h4>
<ul class="postList">
 	<li id="0493" class="graf graf--li graf-after--h4">Refactoring — Improving The Design Of Existing Code</li>
 	<li id="98d5" class="graf graf--li graf-after--li graf--trailing"><a class="markup--anchor markup--li-anchor" href="https://refactoring.com/catalog/" target="_blank" rel="noopener nofollow" data-href="https://refactoring.com/catalog/">Refactoring Catalog</a></li>
</ul>

<div>
[wp_ulike]
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>87</wp:post_id>
		<wp:post_date><![CDATA[2018-04-29 19:58:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-04-29 19:58:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[lets-deal-with-legacy-code]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="broken-window-theory"><![CDATA[Broken Window Theory]]></category>
		<category domain="post_tag" nicename="legacy-code"><![CDATA[Legacy Code]]></category>
		<category domain="category" nicename="legacy-code"><![CDATA[Legacy Code]]></category>
		<category domain="post_tag" nicename="refactoring"><![CDATA[Refactoring]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[inherit]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[88]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_658caad2ebc3eaccdb28a07232e605ea]]></wp:meta_key>
		<wp:meta_value><![CDATA[<iframe width="500" height="281" src="https://www.youtube.com/embed/aGGoW8YENKo?feature=oembed" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_658caad2ebc3eaccdb28a07232e605ea]]></wp:meta_key>
		<wp:meta_value><![CDATA[1525200094]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_518bc91b140d2530c0c466a5df2c3992]]></wp:meta_key>
		<wp:meta_value><![CDATA[<iframe width="916" height="515" src="https://www.youtube.com/embed/aGGoW8YENKo?feature=oembed" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_518bc91b140d2530c0c466a5df2c3992]]></wp:meta_key>
		<wp:meta_value><![CDATA[1525030676]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_fc963310f964ac9f2c7fb1ad04e32194]]></wp:meta_key>
		<wp:meta_value><![CDATA[<iframe width="920" height="518" src="https://www.youtube.com/embed/aGGoW8YENKo?feature=oembed" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_fc963310f964ac9f2c7fb1ad04e32194]]></wp:meta_key>
		<wp:meta_value><![CDATA[1525031253]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskw_text_input]]></wp:meta_key>
		<wp:meta_value><![CDATA[Legacy Code]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskw]]></wp:meta_key>
		<wp:meta_value><![CDATA[Legacy Code]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_metadesc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Let's talk about Broken Window Theory and deal with Legacy Code professionally.]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_linkdex]]></wp:meta_key>
		<wp:meta_value><![CDATA[81]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_like_ip]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:15:"114.143.114.122";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_like_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_6e1e9ad84027dcd3238956aa020c292f]]></wp:meta_key>
		<wp:meta_value><![CDATA[<iframe width="525" height="295" src="https://www.youtube.com/embed/aGGoW8YENKo?feature=oembed" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_6e1e9ad84027dcd3238956aa020c292f]]></wp:meta_key>
		<wp:meta_value><![CDATA[1525253674]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_fccdcf5fe0f4eaaf1ea7019c44bfb586]]></wp:meta_key>
		<wp:meta_value><![CDATA[<iframe width="660" height="371" src="https://www.youtube.com/embed/aGGoW8YENKo?feature=oembed" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_fccdcf5fe0f4eaaf1ea7019c44bfb586]]></wp:meta_key>
		<wp:meta_value><![CDATA[1525253696]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_liked]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_a3ea515330d8a748545d878c2f48ebc9]]></wp:meta_key>
		<wp:meta_value><![CDATA[<iframe width="840" height="473" src="https://www.youtube.com/embed/aGGoW8YENKo?feature=oembed" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_a3ea515330d8a748545d878c2f48ebc9]]></wp:meta_key>
		<wp:meta_value><![CDATA[1527443787]]></wp:meta_value>
		</wp:postmeta>
							</item>
				</channel>
</rss>
	