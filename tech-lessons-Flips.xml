<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

	<!-- generator="WordPress/5.3.2" created="2020-03-26 15:50" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>tech-lessons.in</title>
	<link>http://tech-lessons.in</link>
	<description>tech lessons and learnings from a developer</description>
	<pubDate>Thu, 26 Mar 2020 15:50:41 +0000</pubDate>
	<language>en-US</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://tech-lessons.in</wp:base_site_url>
	<wp:base_blog_url>http://tech-lessons.in</wp:base_blog_url>

		<wp:author><wp:author_id>1</wp:author_id><wp:author_login><![CDATA[sarthakmakhija]]></wp:author_login><wp:author_email><![CDATA[sarthak.makhija@gmail.com]]></wp:author_email><wp:author_display_name><![CDATA[sarthakmakhija]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>

		<wp:category>
		<wp:term_id>9</wp:term_id>
		<wp:category_nicename><![CDATA[feature-toggles]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Feature Toggles]]></wp:cat_name>
<wp:category_description><![CDATA[Flips is an implementation of Feature Toggles pattern for Java. Feature Toggles are a powerful technique, allowing teams to modify system behavior without changing the code.]]></wp:category_description>
	</wp:category>
				
	<generator>https://wordpress.org/?v=5.3.2</generator>

		<item>
		<title>Flips: Feature Flipping for Java</title>
		<link>http://tech-lessons.in/flips-feature-flipping-for-java/</link>
		<pubDate>Sun, 29 Apr 2018 17:48:54 +0000</pubDate>
		<dc:creator><![CDATA[sarthakmakhija]]></dc:creator>
		<guid isPermaLink="false">http://tech-lessons.in/?p=51</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="https://github.com/Feature-Flip/flips"><img class="alignright wp-image-53 size-medium" title="Flips" src="https://tech-lessons.in/wp-content/uploads/2018/04/0_cHsj4HocHrjZFmlw-225x300.jpeg" alt="Flips" width="225" height="300" /></a>
<p id="182d" class="graf graf--p graf-after--figure"><a href="https://github.com/Feature-Flip/flips"><strong>Flips</strong></a> is an implementation of the Feature Toggles pattern for Java and Spring (Spring Core / Spring MVC/ Spring Boot) based application.</p>
<p id="f611" class="graf graf--p graf-after--p"><strong><span style="text-decoration: underline;"><a class="markup--anchor markup--p-anchor" href="https://martinfowler.com/articles/feature-toggles.html" target="_blank" rel="noopener nofollow" data-href="https://martinfowler.com/articles/feature-toggles.html">Feature Toggle</a> </span></strong>is a powerful technique that allows teams to modify system behavior and deliver new functionality to users rapidly but safely.</p>

<h3 id="5714" class="graf graf--h3 graf-after--p">Why Another Library for Feature Toggles?</h3>
<p id="5986" class="graf graf--p graf-after--h3">The idea behind <strong class="markup--strong markup--p-strong">Flips</strong> is to let the clients implement toggles with <em class="markup--em markup--p-em">minimum configuration and coding</em>.</p>
<p id="6563" class="graf graf--p graf-after--p">The main motivations behind implementing this library were -</p>

<ul class="postList">
 	<li id="0da3" class="graf graf--li graf-after--p">Should be simple to use</li>
 	<li id="c57f" class="graf graf--li graf-after--li">Should require minimal configuration and code</li>
 	<li id="a758" class="graf graf--li graf-after--li">Should be able to flip a feature based on various conditions</li>
 	<li id="194c" class="graf graf--li graf-after--li">Should be able to flip a feature based on a combination of different conditions</li>
 	<li id="24e2" class="graf graf--li graf-after--li">Should be possible for the clients to create custom conditions to suit their requirements</li>
</ul>
Flips works with Java 8 and Spring Core/Spring MVC/Spring Boot, and is available for web and non-web applications.
<h3 id="b2ad" class="graf graf--h3 graf-after--p">What Does Flips Offer?</h3>
Flips provides various conditions to flip a feature. The image below summarizes the features:

<img class="size-medium wp-image-54 aligncenter" src="https://tech-lessons.in/wp-content/uploads/2018/04/0_HuBO8_9076kf6pzT-300x129.png" alt="" width="300" height="129" />

Any feature can be flipped ON or OFF based on different conditions which can be value of a property, current active profiles, days of the week, or a combination of these, etc.
<p id="4643" class="graf graf--p graf-after--blockquote">Let’s get started with in-depth understanding of these features.</p>

<h3 id="b84c" class="graf graf--h3 graf-after--p">Getting Started</h3>
<p id="8695" class="graf graf--p graf-after--h3">Include the necessary dependency:</p>

<pre class="lang:default decode:true ">&lt;dependency&gt;
   &lt;groupId&gt;com.github.feature-flip&lt;/groupId&gt;
   &lt;artifactId&gt;flips-web&lt;/artifactId&gt;
   &lt;version&gt;1.0.1&lt;/version&gt;
&lt;/dependency&gt;</pre>
<p id="5f28" class="graf graf--p graf-after--pre">Or:</p>

<pre class="lang:default decode:true ">&lt;dependency&gt;
  &lt;groupId&gt;com.github.feature-flip&lt;/groupId&gt;
  &lt;artifactId&gt;flips-core&lt;/artifactId&gt;
  &lt;version&gt;1.0.1&lt;/version&gt;
&lt;/dependency&gt;</pre>
<h3 id="5b8f" class="graf graf--h3 graf-after--pre">Detailed Description of All Annotations</h3>
<p id="6fda" class="graf graf--p graf-after--h3">Flips provides various annotations to flip a feature. Let’s have a detailed walk-through of all the annotations:</p>

<h3 id="8c53" class="graf graf--h3 graf-after--p">@FlipOnEnvironmentProperty</h3>
<p id="81ce" class="graf graf--p graf-after--h3"><strong class="markup--strong markup--p-strong">@FlipOnEnvironmentProperty </strong>is used to flip a feature based on the value of an environment property.</p>

<pre class="graf graf--pre graf-after--p">@Component
class EmailSender {
    @FlipOnEnvironmentProperty(property = "feature.send.email", 
                               expectedValue = "true")
    public void sendEmail(EmailMessage emailMessage) {
    }
}
</pre>
<h3 id="ebde" class="graf graf--h3 graf-after--p">@FlipOnProfiles</h3>
<p id="d955" class="graf graf--p graf-after--h3"><strong class="markup--strong markup--p-strong">@FlipOnProfiles</strong> is used to flip a feature based on the environment in which the application is running</p>

<pre id="a052" class="graf graf--pre graf-after--p">@Component
class EmailSender {
    @FlipOnProfiles(activeProfiles = {"dev", "qa"})
    public void sendEmail(EmailMessage emailMessage) {
    }
}</pre>
<p id="fccf" class="graf graf--p graf-after--pre">Feature sendEmail is enabled if the current profile (or environment) is either <strong>dev or qa.</strong></p>

<h3 id="7e8a" class="graf graf--h3 graf-after--p">@FlipOnDaysOfWeek</h3>
<p id="b04e" class="graf graf--p graf-after--h3"><strong class="markup--strong markup--p-strong">@FlipOnDaysOfWeek</strong> is used to flip a feature based on the day of the week.</p>

<pre id="7af4" class="graf graf--pre graf-after--p">@Component
class EmailSender {
    @FlipOnDaysOfWeek(daysOfWeek = {DayOfWeek.MONDAY})
    public void sendEmail(EmailMessage emailMessage) {
    }
}</pre>
<p id="fbed" class="graf graf--p graf-after--pre">Feature sendEmail is enabled if the current day is <strong>MONDAY</strong>.</p>

<h3 id="0827" class="graf graf--h3 graf-after--p">@FlipOnDateTime</h3>
<p id="6a6d" class="graf graf--p graf-after--h3"><strong class="markup--strong markup--p-strong">@FlipOnDateTime</strong> is used to flip a feature based on date and time.</p>

<pre id="3f0e" class="graf graf--pre graf-after--p">@Component
class EmailSender {
    @FlipOnDateTime(cutoffDateTimeProperty = "default.date.enabled")
    public void sendEmail(EmailMessage emailMessage) {
    }
}</pre>
Feature sendEmail is enabled if the current datetime is equal to or greater than the value (in ISO-8601 format) defined by the <strong>default.date.enabled</strong> property.
<h3 id="f5bf" class="graf graf--h3 graf-after--p">@FlipOnSpringExpression</h3>
<p id="a1d8" class="graf graf--p graf-after--h3"><strong class="markup--strong markup--p-strong">@FlipOnSpringExpression</strong> is used to flip a feature based on the evaluation of a Spring expression.</p>

<pre id="fc81" class="graf graf--pre graf-after--p">@Component
class EmailSender {
    @FlipOnSpringExpression(expression = "T(java.lang.Math).sqrt(4) * 100.0 
                                          &lt; T(java.lang.Math).sqrt(4) * 10.0")
    public void sendEmail(EmailMessage emailMessage) {
    }
}</pre>
Feature sendEmail is enabled if the expression evaluates to TRUE. This annotation happens to be one of the most powerful annotations in Flips library. Why so ?
<p class="graf graf--p graf-after--pre">One could always write a custom spring component and use the same in @FlipOnSpringExpression to flip a feature.</p>

<h3 id="5d44" class="graf graf--h3 graf-after--blockquote">@FlipBean</h3>
<p id="1200" class="graf graf--p graf-after--h3"><strong class="markup--strong markup--p-strong">@FlipBean</strong> is used to flip the invocation of a method with another method <em class="markup--em markup--p-em">defined in a different bean</em>.</p>

<pre id="aa3e" class="graf graf--pre graf-after--p">@Component
class EmailSender {
    @FlipBean(with = SendGridEmailSender.class)
    @FlipOnProfiles(activeProfiles = "DEV")
    public void sendEmail(EmailMessage emailMessage) {
    }
}</pre>
This will flip the invocation of the sendEmail method with a method (having same signature) defined in SendGridEmailSender Spring component if the current profile is <strong>DEV</strong>.
<h3 id="eab3" class="graf graf--h3 graf-after--p">@FlipOff</h3>
<p id="42de" class="graf graf--p graf-after--h3"><strong class="markup--strong markup--p-strong">@FlipOff</strong> is used to flip a feature off.</p>

<pre class="graf graf--pre graf-after--p">@Component
class EmailSender {
    @FlipOff
    public void sendEmail(EmailMessage emailMessage) {
    }
}</pre>
<p id="a3bb" class="graf graf--p graf-after--pre">Feature sendEmail is always DISABLED.</p>

<h3 id="831b" class="graf graf--h3 graf-after--p">Combining annotations</h3>
<pre id="7b21" class="graf graf--pre graf-after--h3">@Component
class EmailSender {
    @FlipOnProfiles(activeProfiles = "dev")
    @FlipOnDaysOfWeek(daysOfWeek={DayOfWeek.MONDAY})
    public void sendEmail(EmailMessage emailMessage) {
    }
}</pre>
<p id="7937" class="graf graf--p graf-after--pre">Feature sendEmail is enabled if the current profile is "<strong>dev</strong>" AND the current day of the week is <strong>MONDAY</strong>.</p>

<h3 class="graf graf--p graf-after--pre">Import Flip Context Configuration</h3>
<p id="65cb" class="graf graf--p graf-after--h3">In order to bring all Flips-related annotations into effect, you need to import FlipContextConfiguration or FlipWebContextConfiguration and you are ready to go.</p>
 
<pre class="lang:java decode:true " >@SpringBootApplication
@Import(FlipWebContextConfiguration.class)
class ApplicationConfig {
    public static void main(String[] args) {
        SpringApplication.run(ApplicationConfig.class, args);
    }
}</pre> 

<p id="1e18" class="graf graf--p graf-after--pre">Please refer to this <a class="markup--anchor markup--p-anchor" href="https://github.com/SarthakMakhija/flips-samples/blob/master/flips-sample-spring-boot/src/main/java/com/finder/article/ApplicationConfig.java" target="_blank" rel="nofollow noopener" data-href="https://github.com/SarthakMakhija/flips-samples/blob/master/flips-sample-spring-boot/src/main/java/com/finder/article/ApplicationConfig.java">sample project</a>.</p>

<h3 id="6eed" class="graf graf--h3 graf-after--p">Creating Custom Annotations</h3>
<p id="03ee" class="graf graf--p graf-after--h3">All the annotations provided by the library are of type <em class="markup--em markup--p-em">@FlipOnOff</em>, which is essentially a meta-annotation. So, create a custom annotation annotated with @FlipOnOff at the method level:</p>

<pre id="860e" class="graf graf--pre graf-after--p">@Target({ElementType.METHOD}) 
@Retention(RetentionPolicy.RUNTIME) 
@FlipOnOff(value = MyCustomCondition.class) !!Important
public @interface MyCustomAnnotation {
}</pre>
As a part of this annotation, specify the condition that will evaluate this annotation.
<pre id="29c6" class="graf graf--pre graf-after--p">@Component
public class MyCustomCondition implements FlipCondition {
    @Override
    public boolean evaluateCondition(FeatureContext fContext,
                                     FlipAnnotationAttributes attr){
        
        //Code to evaluate flip condition
        return false;
    }
}

</pre>
This Condition class needs to implement <strong>FlipCondition</strong> and MUST be a Spring Component.
<p id="e279" class="graf graf--p graf-after--blockquote">That is it! You can use your custom annotation to any method to flip it ON or OFF based on your condition.</p>

<h3 class="graf graf--pre graf-after--p">What Does It Mean “Feature Is DISABLED”?</h3>
<p id="683b" class="graf graf--p graf-after--h3"><strong class="markup--strong markup--p-strong">FeatureNotEnabledException</strong> is thrown if a disabled feature is invoked. In case of a web application, one could use <a class="markup--anchor markup--p-anchor" href="https://mvnrepository.com/artifact/com.github.feature-flip/flips-web/1.0.1" target="_blank" rel="nofollow noopener" data-href="https://mvnrepository.com/artifact/com.github.feature-flip/flips-web/1.0.1">flips-web</a> dependency, which also provides a <em class="markup--em markup--p-em">ControllerAdvice</em> meant to handle this exception.</p>
<p id="e8ac" class="graf graf--p graf-after--p">It returns a default response and a status code of 501, which can be overridden. Please refer to the <a class="markup--anchor markup--p-anchor" href="https://github.com/SarthakMakhija/flips-samples/tree/master/flips-sample-spring-boot/src/main/java/com/finder/article/advice" target="_blank" rel="nofollow noopener" data-href="https://github.com/SarthakMakhija/flips-samples/tree/master/flips-sample-spring-boot/src/main/java/com/finder/article/advice">sample project</a> for more information.</p>

<h3 id="94a9" class="graf graf--h3 graf-after--p">Wrap Up</h3>
<p id="9413" class="graf graf--p graf-after--h3">We believe the MVP is done and features like flipping at runtime and supporting database-driven feature flips are in the pipeline.</p>
<p id="50de" class="graf graf--p graf-after--p">For any custom flip condition, one could go ahead and use @FlipOnSpringExpression with your custom spring bean to determine flip condition.</p>
<p id="35ec" class="graf graf--p graf-after--p">If you want to have a look at the code or even want to contribute, you can check out <a class="markup--anchor markup--p-anchor" href="https://github.com/Feature-Flip/flips" target="_blank" rel="nofollow noopener" data-href="https://github.com/Feature-Flip/flips"><strong class="markup--strong markup--p-strong">Flips</strong></a>. Feel free to give any feedback.</p>

<div>
[wp_ulike]
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>51</wp:post_id>
		<wp:post_date><![CDATA[2018-04-29 17:48:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-04-29 17:48:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[flips-feature-flipping-for-java]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="feature-toggles"><![CDATA[Feature Toggles]]></category>
		<category domain="category" nicename="feature-toggles"><![CDATA[Feature Toggles]]></category>
		<category domain="post_tag" nicename="flips"><![CDATA[Flips]]></category>
		<category domain="post_tag" nicename="spring"><![CDATA[Spring]]></category>
		<category domain="post_tag" nicename="spring-boot"><![CDATA[Spring Boot]]></category>
		<category domain="post_tag" nicename="spring-mvc"><![CDATA[Spring MVC]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[inherit]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[53]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskw_text_input]]></wp:meta_key>
		<wp:meta_value><![CDATA[Flips - Feature Toggles]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskw]]></wp:meta_key>
		<wp:meta_value><![CDATA[Flips - Feature Toggles]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_metadesc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Flips is an implementation of Feature Toggles pattern for Java. The idea behind Flips is to let the clients implement toggles with minimum configuration and coding. Flips, which works with Java 8 and Spring Core/Spring MVC/Spring Boot, is available for web and non-web applications.]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_linkdex]]></wp:meta_key>
		<wp:meta_value><![CDATA[63]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_like_ip]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:15:"114.143.114.122";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_like_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_liked]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
				</channel>
</rss>
	